[{"categories":["原创","vscode","git"],"content":"本地命令行删除分支","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/room/","tags":["原创","vscode","git","git提交"],"title":"本地命令行删除分支","uri":"https://daizelai.github.io/posts/git/room/"},{"categories":["原创","vscode","git"],"content":"一、删除本地仓库中的分支 git branch -d \u003cbranch-name\u003e 删除多个本地分支 git branch -d \u003cbranch1\u003e \u003cbranch2\u003e \u003cbranch3\u003e ... ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/room/:1:0","tags":["原创","vscode","git","git提交"],"title":"本地命令行删除分支","uri":"https://daizelai.github.io/posts/git/room/"},{"categories":["原创","vscode","git"],"content":"二、强制删除分支 如果要强制删除分支，即使它的更改尚未合并到其他分支中，可以使用以下命令： git branch -D \u003cbranch-name\u003e 强制删除多个分支 git branch -D \u003cbranch1\u003e \u003cbranch2\u003e \u003cbranch3\u003e ... 请确保在删除分支之前，已经将其上的任何重要更改合并到其他分支中或以其他方式进行了备份。 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/room/:2:0","tags":["原创","vscode","git","git提交"],"title":"本地命令行删除分支","uri":"https://daizelai.github.io/posts/git/room/"},{"categories":["原创","vscode","git"],"content":"三、删除远程仓库中的分支 如果你想删除远程仓库中的分支，可以使用以下命令： git push origin --delete \u003cbranch-name\u003e 删除多个远程分支 git push origin --delete \u003cbranch1\u003e \u003cbranch2\u003e \u003cbranch3\u003e ... 这将从远程仓库 origin 删除指定的分支。 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/room/:3:0","tags":["原创","vscode","git","git提交"],"title":"本地命令行删除分支","uri":"https://daizelai.github.io/posts/git/room/"},{"categories":["原创","vscode","git"],"content":"使用vscode合并分支提交到主分支","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"一、描述 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:1:0","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"1.1.前言 git多commit合并提交到主分支过程记录，本文记录了类似于1.2小节的整个过程。 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:1:1","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"1.2.在develop分支 git log 现有提交60714ec、fa0fbe5和6a54429。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git reflog -n 10\r6a54429 (HEAD -\u003e develop) HEAD@{0}: commit: 修改了版本号为11\rfa0fbe5 HEAD@{1}: commit: 修改版本号为10\r60714ec HEAD@{2}: commit: 修改版本号为9\r8cbf57e (origin/develop) HEAD@{3}: merge feature/login: Merge made by the 'recursive' strategy.\r8791add HEAD@{4}: checkout: moving from feature/login to develop\r0108492 (origin/feature/login, feature/login) HEAD@{5}: commit: 修改了版本号为8\r8bf847c HEAD@{6}: commit: 修改了版本号为7\r695c95c HEAD@{7}: checkout: moving from develop to feature/login\r8791add HEAD@{8}: merge feature/login: Merge made by the 'recursive' strategy.\rad9dc3c HEAD@{9}: checkout: moving from feature/login to develop\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ 合并 需要把下面的三次提交合并成一次提交到master分支。 6a54429 (HEAD -\u003e develop) HEAD@{0}: commit: 修改了版本号为11\rfa0fbe5 HEAD@{1}: commit: 修改版本号为10\r60714ec HEAD@{2}: commit: 修改版本号为9 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:1:2","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"二、效果 开发分支有多个commit提交记录，但主分支develop分支【通常为master】一般只需要最后的一次总的提交，不需要每次的提交。 下面是提交效果。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git log --graph\r* commit 8791addfb6cd50f86995c3a7145d16092942af79 (HEAD -\u003e develop, origin/develop)\r|\\ Merge: ad9dc3c 695c95c\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:58:08 2023 +0800\r| |\r| | Merge branch 'feature/login' into develop\r| |\r| * commit 695c95c9ebabf5171b8424c9f79adf808791b36a (origin/feature/login, feature/login)\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:57:36 2023 +0800\r| |\r| | 修改了版本号为6\r| |\r| * commit ae881814a440099c329dd3afad609c94c2a5c7d0\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:56:27 2023 +0800\r| |\r| | 修改了版本号为5\r| |\r| * commit bcacd0182e4728956b4d740f3f56424df8b01bfe\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:55:17 2023 +0800\r| |\r| | 修改了版本号为4\r| |\r| * commit e144fb0a181b1fc6e1b8a701c9c34606d16e1cb2\r|/ Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| Date: Sat Jun 3 15:54:30 2023 +0800\r|\r| 修改了版本号为3\r|\r* commit ad9dc3c1e583722d63e74214a40907a6720cff1d\r|\\ Merge: 23d0c6e 3397d2a\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 12:53:10 2023 +0800\r| |\r| | Merge branch 'test9999' into develop\r| |\r| * commit 3397d2a3f1262ad1258fb2757dfe04a87408b758\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 12:52:45 2023 +0800\r| |\r| | 333333\r| |\r| * commit 8bf05312cce22ba21a23026df54acb747bddfb27\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 12:52:34 2023 +0800\r| |\r| | 222222\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:2:0","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"三、vs Code提交 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:3:0","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"3.1.提交步骤 从develop分支创建开发分支feature。 在开发分支feature中开发完成。 push所有feature分支的代码都gitlab服务器。 切换到develop分支。 打开vs code中的Git Graaph。 鼠标右击feature分支。 选择Merge into current branch... pushdevelop分支都gitlab服务器。 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:3:1","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"3.2.提交效果 第一次提交示例 第一次提交示例 第二次提交示例 第二次提交示例 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:3:2","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"四、命令行提交 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:0","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.1.描述 feature分支提交开始连接develop合并结束处连接develop的方法。 下面使用的git merge --no-ff -m \"合并feature/login分支的登录功能到develop分支\" feature/login命令的解释： 1.使用这个git merge --no-ff -m \"合并feature/login分支的登录功能到develop分支\" feature/login命令，你可以将feature/login分支的更改合并到当前分支，并创建一个新的合并提交，以确保提交历史中保留了合并的信息，并在提交信息中指定了合并的描述。 2.将feature/login分支的更改合并到当前所在的分支，而且使用非快进合并模式，并且指定了合并提交的提交信息。 3.--no-ff: 这是git merge命令的选项之一，用于执行非快进合并（non-fast-forward merge）。非快进合并将创建一个新的合并提交，将要合并的分支的历史与当前分支的历史连接在一起，即使没有冲突也会创建一个合并提交。 4.feature/login: 这是要合并的分支的名称。在命令中指定了feature/login，表示将feature/login分支的更改合并到当前所在的（如develop）分支。 提交后的效果 提交后的效果 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:1","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.2.看一下当前所在分支 当前是在feature/login开发分支。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ date\rSat Jun 3 16:10:54 2023\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ git branch -a\rdevelop\r* feature/login\rmaster\rremotes/origin/HEAD -\u003e origin/master\rremotes/origin/develop\rremotes/origin/feature/login\rremotes/origin/master\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:2","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.3.查看现有的日志 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ git log -n 5\rcommit 01084928aa1cc70b8bd6447beeb6fc120c356916 (HEAD -\u003e feature/login, origin/feature/login)\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:10:22 2023 +0800\r修改了版本号为8\rcommit 8bf847c2a8cdd2f81c2f7a6a3e7a932a631f4063\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:10:00 2023 +0800\r修改了版本号为7\rcommit 695c95c9ebabf5171b8424c9f79adf808791b36a\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:57:36 2023 +0800\r修改了版本号为6\rcommit ae881814a440099c329dd3afad609c94c2a5c7d0\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:56:27 2023 +0800\r修改了版本号为5\rcommit bcacd0182e4728956b4d740f3f56424df8b01bfe\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:55:17 2023 +0800\r修改了版本号为4\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ git reflog -10\r0108492 (HEAD -\u003e feature/login, origin/feature/login) HEAD@{0}: commit: 修改了版本号为8\r8bf847c HEAD@{1}: commit: 修改了版本号为7\r695c95c HEAD@{2}: checkout: moving from develop to feature/login\r8791add (origin/develop, develop) HEAD@{3}: merge feature/login: Merge made by the 'recursive' strategy.\rad9dc3c HEAD@{4}: checkout: moving from feature/login to develop\r695c95c HEAD@{5}: commit: 修改了版本号为6\rae88181 HEAD@{6}: commit: 修改了版本号为5\rbcacd01 HEAD@{7}: commit: 修改了版本号为4\re144fb0 HEAD@{8}: commit: 修改了版本号为3\rad9dc3c HEAD@{9}: checkout: moving from develop to feature/login\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ 可以看到，本次有两个commit提交，修改了版本号为7和修改了版本号为8，需要把这两个提交合并到develop分支。 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:3","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.4.切换到develop分支 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ git checkout develop\rSwitched to branch 'develop'\rYour branch is up to date with 'origin/develop'.\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:4","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.5.查看一下日志 再查看下日志吧。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git log -n 5\rcommit 8791addfb6cd50f86995c3a7145d16092942af79 (HEAD -\u003e develop, origin/develop)\rMerge: ad9dc3c 695c95c\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:58:08 2023 +0800\rMerge branch 'feature/login' into develop\rcommit 695c95c9ebabf5171b8424c9f79adf808791b36a\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:57:36 2023 +0800\r修改了版本号为6\rcommit ae881814a440099c329dd3afad609c94c2a5c7d0\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:56:27 2023 +0800\r修改了版本号为5\rcommit bcacd0182e4728956b4d740f3f56424df8b01bfe\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:55:17 2023 +0800\r修改了版本号为4\rcommit e144fb0a181b1fc6e1b8a701c9c34606d16e1cb2\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:54:30 2023 +0800\r修改了版本号为3\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git reflog -10\r8791add (HEAD -\u003e develop, origin/develop) HEAD@{0}: checkout: moving from feature/login to develop\r0108492 (origin/feature/login, feature/login) HEAD@{1}: commit: 修改了版本号为8\r8bf847c HEAD@{2}: commit: 修改了版本号为7\r695c95c HEAD@{3}: checkout: moving from develop to feature/login\r8791add (HEAD -\u003e develop, origin/develop) HEAD@{4}: merge feature/login: Merge made by the 'recursive' strategy.\rad9dc3c HEAD@{5}: checkout: moving from feature/login to develop\r695c95c HEAD@{6}: commit: 修改了版本号为6\rae88181 HEAD@{7}: commit: 修改了版本号为5\rbcacd01 HEAD@{8}: commit: 修改了版本号为4\re144fb0 HEAD@{9}: commit: 修改了版本号为3\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:5","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.6.合并开分支feature/login到develop分支 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git merge --no-ff -m \"合并feature/login分支的登录功能到develop分支\" feature/login\rMerge made by the 'recursive' strategy.\rbuild.gradle | 2 +-\rgradle.properties | 2 +-\r2 files changed, 2 insertions(+), 2 deletions(-)\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ 合并过后再看下状态。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git status\rOn branch develop\rYour branch is ahead of 'origin/develop' by 3 commits.\r(use \"git push\" to publish your local commits)\rnothing to commit, working tree clean\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ 查看下日志 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git log -n 5\rcommit 8cbf57ecbd49775ca5a397a693dc3e95438cf276 (HEAD -\u003e develop)\rMerge: 8791add 0108492\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:13:24 2023 +0800\r合并feature/login分支的登录功能到develop分支\rcommit 01084928aa1cc70b8bd6447beeb6fc120c356916 (origin/feature/login, feature/login)\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:10:22 2023 +0800\r修改了版本号为8\rcommit 8bf847c2a8cdd2f81c2f7a6a3e7a932a631f4063\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:10:00 2023 +0800\r修改了版本号为7\rcommit 8791addfb6cd50f86995c3a7145d16092942af79 (origin/develop)\rMerge: ad9dc3c 695c95c\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:58:08 2023 +0800\rMerge branch 'feature/login' into develop\rcommit 695c95c9ebabf5171b8424c9f79adf808791b36a\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:57:36 2023 +0800\r修改了版本号为6\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git reflog -n10\r8cbf57e (HEAD -\u003e develop) HEAD@{0}: merge feature/login: Merge made by the 'recursive' strategy.\r8791add (origin/develop) HEAD@{1}: checkout: moving from feature/login to develop\r0108492 (origin/feature/login, feature/login) HEAD@{2}: commit: 修改了版本号为8\r8bf847c HEAD@{3}: commit: 修改了版本号为7\r695c95c HEAD@{4}: checkout: moving from develop to feature/login\r8791add (origin/develop) HEAD@{5}: merge feature/login: Merge made by the 'recursive' strategy.\rad9dc3c HEAD@{6}: checkout: moving from feature/login to develop\r695c95c HEAD@{7}: commit: 修改了版本号为6\rae88181 HEAD@{8}: commit: 修改了版本号为5\rbcacd01 HEAD@{9}: commit: 修改了版本号为4\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:6","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.7.推送到远程gitlab daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git push origin develop\rEnumerating objects: 1, done.\rCounting objects: 100% (1/1), done.\rWriting objects: 100% (1/1), 264 bytes | 264.00 KiB/s, done.\rTotal 1 (delta 0), reused 0 (delta 0), pack-reused 0\rremote:\rremote: To create a merge request for develop, visit:\rremote: http://gitlab.gbcom.com.cn/metro-system/wzs2_android_app/-/merge_requests/new?merge_request%5Bsource_branch%5D=develop\rremote:\rTo gitlab.gbcom.com.cn:metro-system/wzs2_android_app.git\r8791add..8cbf57e develop -\u003e develop\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ 查看下日志。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git log -n 5\rcommit 8cbf57ecbd49775ca5a397a693dc3e95438cf276 (HEAD -\u003e develop, origin/develop)\rMerge: 8791add 0108492\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:13:24 2023 +0800\r合并feature/login分支的登录功能到develop分支\rcommit 01084928aa1cc70b8bd6447beeb6fc120c356916 (origin/feature/login, feature/login)\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:10:22 2023 +0800\r修改了版本号为8\rcommit 8bf847c2a8cdd2f81c2f7a6a3e7a932a631f4063\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:10:00 2023 +0800\r修改了版本号为7\rcommit 8791addfb6cd50f86995c3a7145d16092942af79\rMerge: ad9dc3c 695c95c\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:58:08 2023 +0800\rMerge branch 'feature/login' into develop\rcommit 695c95c9ebabf5171b8424c9f79adf808791b36a\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:57:36 2023 +0800\r修改了版本号为6\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git reflog -10\r8cbf57e (HEAD -\u003e develop, origin/develop) HEAD@{0}: merge feature/login: Merge made by the 'recursive' strategy.\r8791add HEAD@{1}: checkout: moving from feature/login to develop\r0108492 (origin/feature/login, feature/login) HEAD@{2}: commit: 修改了版本号为8\r8bf847c HEAD@{3}: commit: 修改了版本号为7\r695c95c HEAD@{4}: checkout: moving from develop to feature/login\r8791add HEAD@{5}: merge feature/login: Merge made by the 'recursive' strategy.\rad9dc3c HEAD@{6}: checkout: moving from feature/login to develop\r695c95c HEAD@{7}: commit: 修改了版本号为6\rae88181 HEAD@{8}: commit: 修改了版本号为5\rbcacd01 HEAD@{9}: commit: 修改了版本号为4\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:7","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.8.查看提交的graph 可以看到feature/login分支从develop分支分出来，然后再合进去develop分支这条线。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git log --graph\r* commit 8cbf57ecbd49775ca5a397a693dc3e95438cf276 (HEAD -\u003e develop, origin/develop)\r|\\ Merge: 8791add 0108492\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 16:13:24 2023 +0800\r| |\r| | 合并feature/login分支的登录功能到develop分支\r| |\r| * commit 01084928aa1cc70b8bd6447beeb6fc120c356916 (origin/feature/login, feature/login)\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 16:10:22 2023 +0800\r| |\r| | 修改了版本号为8\r| |\r| * commit 8bf847c2a8cdd2f81c2f7a6a3e7a932a631f4063\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 16:10:00 2023 +0800\r| |\r| | 修改了版本号为7\r| |\r* | commit 8791addfb6cd50f86995c3a7145d16092942af79\r|\\| Merge: ad9dc3c 695c95c\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:58:08 2023 +0800\r| |\r| | Merge branch 'feature/login' into develop\r| |\r| * commit 695c95c9ebabf5171b8424c9f79adf808791b36a\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:57:36 2023 +0800\r| |\r| | 修改了版本号为6\r| |\r| * commit ae881814a440099c329dd3afad609c94c2a5c7d0\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:56:27 2023 +0800\r| |\r| | 修改了版本号为5\r| |\r| * commit bcacd0182e4728956b4d740f3f56424df8b01bfe\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:55:17 2023 +0800\r| |\r| | 修改了版本号为4\r| |\r| * commit e144fb0a181b1fc6e1b8a701c9c34606d16e1cb2\r|/ Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| Date: Sat Jun 3 15:54:30 2023 +0800\r|\r| 修改了版本号为3\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:8","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","android","方法耗时"],"content":"android开发中统计方法执行时间","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"一、android开发中统计方法执行时间 在Android开发中，可以使用以下方法来统计方法的执行时间： ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:1:0","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"1.1.System.currentTimeMillis() 使用System.currentTimeMillis()方法： 在方法的开始处使用long startTime = System.currentTimeMillis();记录开始时间，在方法的结束处使用long endTime = System.currentTimeMillis();记录结束时间。然后可以通过计算差值long executionTime = endTime - startTime;来得到方法的执行时间。 示例代码： long startTime = System.currentTimeMillis(); // 执行需要统计时间的方法 long endTime = System.currentTimeMillis(); long executionTime = endTime - startTime; Log.d(\"ExecutionTime\", \"Method execution time: \" + executionTime + \"ms\"); ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:1:1","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"1.2.System.nanoTime() 使用System.nanoTime()方法： System.nanoTime()方法提供了更高精度的时间单位，可以用于测量方法的执行时间。用法与System.currentTimeMillis()类似。 示例代码： long startTime = System.nanoTime(); // 执行需要统计时间的方法 long endTime = System.nanoTime(); long executionTime = endTime - startTime; Log.d(\"ExecutionTime\", \"Method execution time: \" + executionTime + \"ns\"); 注意：以上方法只能统计方法的总体执行时间，不适用于需要分析方法内部细节的时间消耗。对于更复杂的性能分析和优化需求，可以考虑使用Android Profiler工具或第三方性能分析库，如Tracer等。 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:1:2","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"二、使用第三方库用来统计函数的执行时间 在Android开发中，有一些第三方库可用于统计函数的执行时间。以下是其中一些常用的库： Method-Profiling: Method-Profiling是一个轻量级的Java库，用于测量方法执行时间。它提供了一个简单的API来开始和停止计时器，并计算方法的执行时间。该库易于使用且功能简单，适合对特定函数进行基本的执行时间统计。 GitHub链接：Method-Profiling Hugo: Hugo是一个注解处理器库，用于在编译时自动插入计时代码以测量方法的执行时间。它提供了一组自定义注解，可以应用于要统计执行时间的方法上。在编译时，Hugo会自动生成计时代码，从而方便地测量方法的执行时间。 GitHub链接：Hugo Stopwatch: Stopwatch是一个轻量级的Java库，用于测量方法的执行时间。它提供了一个简单的接口来开始和停止计时器，并计算方法的执行时间。该库易于集成和使用，适用于基本的方法执行时间统计。 GitHub链接：Stopwatch 这些库提供了不同的方法来测量和统计函数的执行时间。您可以根据自己的需求选择适合的库，然后根据库的文档和示例进行集成和使用。请注意，这些库都是第三方库，因此请确保阅读并遵循它们的许可和使用条款。 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:2:0","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"三、Method-Profiling示例 以下是一个使用Method-Profiling库的示例： ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:3:0","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"3.1.添加依赖 在项目的build.gradle文件中添加Method-Profiling库的依赖： dependencies { implementation 'com.github.jayrambhia:Method-Profiling:v1.0' } ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:3:1","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"3.2.添加@Profile注解 在要统计执行时间的方法上添加@Profile注解： import com.jayrambhia.profiling.Profile; public class MyClass { @Profile public void myMethod() { // 要统计执行时间的方法逻辑 } } ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:3:2","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"3.3.方法正常执行 在应用程序中调用要统计执行时间的方法： MyClass myClass = new MyClass(); myClass.myMethod(); ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:3:3","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"3.4.日志输出 运行应用程序并查看日志输出： Method [myMethod] took 25 ms 通过添加@Profile注解，Method-Profiling库会在方法的开始和结束处自动计时，并在日志中输出方法的执行时间。 请注意，以上示例只是Method-Profiling库的基本用法。您可以根据需要进行自定义配置，如更改日志输出格式、指定要统计的方法等。请参考Method-Profiling库的文档和示例以获得更多详细信息。 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:3:4","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"四、定时执行的方法的写法 如果要统计定时执行的方法的执行时间，可以使用Java中的ScheduledExecutorService来定时调度方法的执行，并结合Method-Profiling库来统计执行时间。以下是一个示例： import com.jayrambhia.profiling.Profile; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class MyClass { private ScheduledExecutorService executorService; public void startTimedMethod() { executorService = Executors.newSingleThreadScheduledExecutor(); // 定时执行方法，这里设定每隔1秒执行一次 executorService.scheduleAtFixedRate(this::timedMethod, 0, 1, TimeUnit.SECONDS); } public void stopTimedMethod() { // 停止定时执行方法 if (executorService != null \u0026\u0026 !executorService.isShutdown()) { executorService.shutdown(); } } @Profile public void timedMethod() { // 要统计执行时间的方法逻辑 } } 在上述示例中，startTimedMethod()方法用于启动定时执行方法，stopTimedMethod()方法用于停止定时执行。timedMethod()方法是要统计执行时间的方法，添加了@Profile注解。 当调用startTimedMethod()方法时，定时执行的方法将在后台线程按照指定的时间间隔执行。Method-Profiling库将自动记录每次方法执行的时间，并输出到日志中。 使用stopTimedMethod()方法可以停止定时执行的方法，以便在不需要时停止统计。 请确保在应用程序的适当位置调用startTimedMethod()和stopTimedMethod()方法来启动和停止定时执行。根据需要进行适当的修改和扩展。 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:4:0","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"五、Hugo的使用示例 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:5:0","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"5.1.添加依赖 以下是使用Hugo库的示例： 在项目的build.gradle文件中添加Hugo库的依赖： dependencies { debugAnnotationProcessor 'com.jakewharton.hugo:hugo-compiler:1.2.1' releaseAnnotationProcessor 'com.jakewharton.hugo:hugo-no-op:1.2.1' } ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:5:1","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"5.2.添加@DebugLog注解 在要统计执行时间的方法上添加@DebugLog注解： import com.jakewharton.hugo.annotations.DebugLog; public class MyClass { @DebugLog public void myMethod() { // 要统计执行时间的方法逻辑 } } ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:5:2","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"5.3.方法正常执行 在应用程序中调用要统计执行时间的方法： MyClass myClass = new MyClass(); myClass.myMethod(); ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:5:3","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"5.4.日志输出 运行应用程序并查看日志输出： D/MyClass: ⇢ myMethod() D/MyClass: ⇠ myMethod [100ms] 通过添加@DebugLog注解，Hugo库会在方法的开始和结束处自动插入计时代码，并在日志中输出方法的执行时间。 请注意，Hugo库只在Debug构建类型下有效，因此在发布版本中不会插入计时代码。这样可以确保在生产环境中不会有性能损失。 以上示例只是Hugo库的基本用法。您可以根据需要进行自定义配置，如更改日志输出格式、指定要统计的方法等。请参考Hugo库的文档和示例以获得更多详细信息。 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:5:4","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"六、Stopwatch的使用示例 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:6:0","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"6.1.添加stopwatch依赖 以下是使用Stopwatch库的示例： 在项目的build.gradle文件中添加Stopwatch库的依赖： dependencies { implementation 'com.github.mediavrog⏱️1.0.0' } ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:6:1","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"6.2.方法中使用 在要统计执行时间的方法中使用Stopwatch： import com.github.mediavrog.stopwatch.Stopwatch; public class MyClass { public void myMethod() { Stopwatch stopwatch = new Stopwatch(); stopwatch.start(); // 要统计执行时间的方法逻辑 stopwatch.stop(); long executionTime = stopwatch.getElapsedTimeMillis(); System.out.println(\"Method execution time: \" + executionTime + \"ms\"); } } 在上述示例中，我们创建了一个Stopwatch对象，并在方法的开始处调用start()方法开始计时。在方法的结束处调用stop()方法停止计时，并通过getElapsedTimeMillis()方法获取经过的时间。 请注意，这里使用的是Stopwatch库的简单版本，适用于基本的方法执行时间统计。如果需要更高级的功能，例如分段计时或并行计时等，可以查阅Stopwatch库的文档并使用适当的API。 以上示例只是Stopwatch库的基本用法。您可以根据需要进行自定义配置，如更改日志输出格式、指定要统计的方法等。请参考Stopwatch库的文档和示例以获得更多详细信息。 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:6:2","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["git","commit"],"content":"在项目开发中，一定要注意git代码的提交规范。","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"一、描述 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:0","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"说明 为了规范我的git提交内容，提交的时候commit -m “备注的信息”，但是每个人的备注信息千奇百怪，为了统一，我们进行了git的规范。 本次安装过程： npm install -g commitizen\rnpm install -g cz-conventional-changelog\recho '{ \"path\": \"cz-conventional-changelog\" }' \u003e .czrc\rnpx commitizen init cz-conventional-changelog --save-dev --save-exact\rnpx commitizen init cz-conventional-changelog --save-dev --save-exact --force\rnpm install -g conventional-changelog-cli\rnpm ls -g -depth=0\r# 为了Git Bash命令行中也可以使用上下箭头选择git type，安装下面这个。\rnpm install -g git-cz\r#下面是changlog\r#追加\rconventional-changelog -p angular -i CHANGELOG.md -s\r#全量生成\rconventional-changelog -p angular -i CHANGELOG.md -s -r 0 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:1","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"windows命令行环境 nvm-windows commitizen-windows.md ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:2","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Type 提交类型： 1.feat: 新功能（feature）\r2.fix: Bug修复\r3,.docs: 文档更新（documentation）\r4.style: 代码的格式，标点符号的更新（不影响代码运行的变动）\r5.refactor: 代码重构（即不是新增功能，也不是修改bug的代码变动）\r6.perf: 性能优化\r7.test: 测试更新\r8.build: 构建系统或者包依赖更新\r9.ci: CI 配置，脚本文件等更新\r10.chore: 非src或者测试文件的更新【构建过程或辅助工具的变动】\r11.revert: commit 回退 说明一下： # 主要type\rfeat: 增加新功能\rfix: 修复bug\r# 特殊type\rdocs: 只改动了文档相关的内容\rstyle: 不影响代码含义的改动，例如去掉空格、改变缩进、增删分号\rbuild: 构造工具的或者外部依赖的改动，例如webpack，npm\rrefactor: 代码重构时使用\rrevert: 执行git revert打印的message\r# 暂不使用type\rtest: 添加测试或者修改现有测试\rperf: 提高性能的改动\rci: 与CI（持续集成服务）有关的改动\rchore: 不修改src或者test的其余修改，例如构建过程或辅助工具的变动 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:3","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Scope 用来说明本次Commit影响的范围，即简要说明修改会涉及的部分。这个本来是选填项，但从AngularJS实际项目中可以看出基本上也成了必填项了。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:4","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Subject 用来简要描述本次改动，概述就好了，因为后面还会在Body里给出具体信息。并且最好遵循下面三条: 以动词开头，使用第一人称现在时，比如change，而不是changed或changes 首字母不要大写 结尾不用句号(.) ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:5","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Body 里的内容是对上面subject里内容的展开，在此做更加详尽的描述，内容里应该包含修改动机和修改前后的对比。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:6","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Footer footer里的主要放置不兼容变更和Issue关闭的信息。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:7","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Revert 此外如果需要撤销之前的Commit，那么本次Commit Message中必须以revert：开头，后面紧跟前面描述的Header部分，格式不变。并且，Body部分的格式也是固定的，必须要记录撤销前Commit的SHA值。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:8","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"过程精简 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:2:0","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Commitizen规范 1.全局安装commitizen \u0026 cz-conventional-changelog # 安装，安装完成之后可以使用git cz命令来取代git commit\rnpm install -g commitizen cz-conventional-changelog conventional-changelog-cli\r#适配器\r#如果需要在项目中使用commitizen生成符合AngularJS规范的提交说明，初始化cz-conventional-changelog适配器\rcommitizen init cz-conventional-changelog --save --save-exact\rnpx commitizen init cz-conventional-changelog --save-dev --save-exact --force\r#上面初始化适配器主要进行了3件事情：\r#1.在项目中安装cz-conventional-changelog 适配器依赖\r#2.将适配器依赖保存到package.json的devDependencies字段信息\r#3.在package.json中新增config.commitizen字段信息，主要用于配置cz工具的适配器路径 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:2:1","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Commitizen校验 2.项目内安装commitlint \u0026 husky #安装\rnpm install --save-dev @commitlint/config-conventional @commitlint/cli\r#添加规范\recho \"module.exports = {extends: ['@commitlint/config-conventional']};\" \u003e commitlint.config.js\r#即在项目根目录下`D:\\code\\gbcom_gitlab\\SH_JC_Android\\commitlint.config.js`添加如下内容。\rmodule.exports = {\rextends: ['@commitlint/config-conventional']\r};\r#安装git钩子工具\rnpm install husky --save-dev\r#在项目根目录下的package.json中配置git commit提交时的校验钩子`D:\\code\\gbcom_gitlab\\SH_JC_Android\\package.json`\r\"husky\": {\r\"hooks\": {\r\"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\r}\r}\r#上面的commit-msg代表对 commit message 进行 hook，hook 的时候执行后面的命令 commitlint -E HUSKY_GIT_PARAMS 进行检查。\r#安装husky后在package.json中添加脚本\r{\r\"devDependencies\": {\r\"@commitlint/cli\": \"^17.6.3\",\r\"@commitlint/config-conventional\": \"^17.6.3\",\r\"commitlint-config-cz\": \"^0.13.3\",\r\"commitlint-config-git-commit-emoji\": \"^1.0.0\",\r\"cz-customizable\": \"^7.0.0\",\r\"husky\": \"^7.0.1\"\r},\r\"scripts\": {\r+ \"prepare\": \"husky install\",\r\"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\",\r\"changelogs\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\",\r\"commit\": \"cz-customizable\"\r}\r}\r#添加 commit-msg 钩子,执行信息校验，其实就是在.husky/commit-msg文件中添加【npx --no-install commitlint --edit \"$1\"】\rnpx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\r# validate-commit-msg\r# 除了使用commitlint校验工具，也可以使用validate-commit-msg校验工具对cz提交说明是否符合Angular规范进行校验。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:2:2","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装的依赖 C:\\Users\\daizelai\\AppData\\Roaming\\npm\\node_modules C:\\Users\\daizelai\\AppData\\Roaming\\npm\\node_modules\u003edir\r驱动器 C 中的卷没有标签。\r卷的序列号是 1A38-870C\rC:\\Users\\daizelai\\AppData\\Roaming\\npm\\node_modules 的目录\r2023/05/11 14:04 \u003cDIR\u003e .\r2023/05/11 14:04 \u003cDIR\u003e ..\r2023/05/11 09:37 \u003cDIR\u003e commitizen\r2023/05/04 16:54 \u003cDIR\u003e conventional-changelog\r2023/05/11 14:04 \u003cDIR\u003e conventional-changelog-cli\r2023/05/11 09:48 \u003cDIR\u003e cz-conventional-changelog\r2023/05/11 10:47 \u003cDIR\u003e git-cz\r0 个文件 0 字节\r7 个目录 3,261,562,880 可用字节\rC:\\Users\\daizelai\\AppData\\Roaming\\npm\\node_modules\u003e ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:2:3","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装可自定义的cz适配器 因为commitizen只支持英文，如果我想要支持中文指令和emoji，那么就必须安装可自定义的cz适配器了 npm i -D commitlint-config-cz cz-customizable commitlint-config-git-commit-emoji 配置项目根目录的.cz-config.js文件内容： module.exports = { types: [ { value: '✨ feat', name: '✨ feat: 新功能' }, { value: '🐛 fix', name: '🐛 fix: 修复bug' }, { value: '📦 build', name: '📦️ build: 打包' }, { value: '⚡ perf', name: '⚡️ perf: 性能优化' }, { value: '🎉 release', name: '🎉 release: 发布正式版' }, { value: '💄 style', name: '💄 style: 代码的样式美化' }, { value: '♻️ refactor', name: '♻️ refactor: 重构' }, { value: '✏️ docs', name: '✏️ docs: 文档变更' }, { value: '✅ test', name: '✅ test: 测试' }, { value: '⏪ revert', name: '⏪️ revert: 回退' }, { value: '🚀 chore', name: '🚀 chore: 构建/工程依赖/工具' }, { value: '👷‍♂️ ci', name: '👷 ci: CI related changes' } ], messages: { type: '请选择提交类型(必填)', customScope: '请输入文件修改范围(可选)', subject: '请简要描述提交(必填)', body: '请输入详细描述(可选)', breaking: '列出任何BREAKING CHANGES(可选)', footer: '请输入要关闭的issue(可选)', confirmCommit: '确定提交此说明吗？' }, allowCustomScopes: true, // 跳过问题 skipQuestions: ['body', 'footer'], subjectLimit: 72 } 将cz-customizable脚本添加到您的package.json //#npm set-script commit \"git add . \u0026\u0026 cz-customizable\" { \"devDependencies\": { \"@commitlint/cli\": \"^17.6.3\", \"@commitlint/config-conventional\": \"^17.6.3\", \"commitlint-config-cz\": \"^0.13.3\", \"commitlint-config-git-commit-emoji\": \"^1.0.0\", \"cz-customizable\": \"^7.0.0\", \"husky\": \"^7.0.1\" }, \"scripts\": { \"prepare\": \"husky install\", \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\", \"changelogs\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\", + \"commit\": \"cz-customizable\" } } ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:2:4","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"commitizen 当你使用commitizen进行代码提交（gitcommit）时，commitizen会提交你在提交时填写所有必需的提交字段 commitizen是一个撰写合格commit message的工具，用于代替git commit 指令，而cz-conventional-changelog适配器提供conventional-changelog标准（约定式提交标准）。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:3:0","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:0","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装commitizen 首先要全局安装commitizen npm i -g commitizen@4.2.4 然后安装插件 npm i cz-customizable@6.3.0 --save-dev 也可以直接全局安装commitizen \u0026 cz-conventional-changelog npm install -g commitizen cz-conventional-changelog\recho '{ \"path\": \"cz-conventional-changelog\" }' \u003e ~/.czrc 正式安装 来的安装过程： PS C:\\Users\\daizelai\u003e npm -v\r9.5.1\rPS C:\\Users\\daizelai\u003e date\r2023年5月11日 9:36:43\rPS C:\\Users\\daizelai\u003e npm install -g commitizen\radded 191 packages in 1m\r24 packages are looking for funding\rrun `npm fund` for details\rPS C:\\Users\\daizelai\u003e npm fund\rdaizelai\rPS C:\\Users\\daizelai\u003e ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:1","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"全局安装适配器 cz-customizable和cz-conventional-changelog一样，也是commitizen的adapter，不过支持一定程度上的自定义。 npm install -g cz-conventional-changelog\r# 有的是安装下面这个，来没有这么安装\rnpm install -g conventional-changelog\rnpm install -g conventional-changelog-cli 来的安装过程： PS C:\\Users\\daizelai\u003e npm install -g cz-conventional-changelog\radded 191 packages in 28s\r24 packages are looking for funding\rrun `npm fund` for details\rPS C:\\Users\\daizelai\u003e 检验上面的工具是否安装成功，可以输入以下npm ls -g -depth=0命令。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm ls -g -depth=0\rC:\\Users\\daizelai\\AppData\\Roaming\\npm\r+-- commitizen@4.3.0\r+-- conventional-changelog@3.1.25\r+-- cz-conventional-changelog@3.3.0\r`-- git-cz@4.9.0\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 来后来又安装了一下，下面的命令安装cz-conventional-changelog, 并且初始化cz-conventional-changelog。 C:\\Users\\daizelai\u003enpx commitizen init cz-conventional-changelog --save-dev --save-exact\rAttempting to initialize using the npm package cz-conventional-changelog\rError: Error: A previous adapter is already configured. Use --force to override\radapterConfig.path: cz-conventional-changelog\rrepoPath: C:\\Users\\daizelai\rCLI_PATH: C:\\Users\\daizelai\\AppData\\Roaming\\npm\\node_modules\\commitizen\\\rinstallAdapterCommand: npm install cz-conventional-changelog --save-dev\radapterNpmName: cz-conventional-changelog\rC:\\Users\\daizelai\u003enpx commitizen init cz-conventional-changelog --save-dev --save-exact --force\rAttempting to initialize using the npm package cz-conventional-changelog\rnpm WARN using --force Recommended protections disabled.\rC:\\Users\\daizelai\u003e ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:2","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"配置 如果你是mac用户，运行下面这条命令，它会在你的home目录下，创建一个.czrc文件。路径指向刚才全局安装的适配器。 echo '{ \"path\": \"cz-conventional-changelog\" }' \u003e ~/.czrc 如果你是windows用户，请把下面这条命令中的C:\\Users\\daizelai更换成你自己电脑上的\\Users\\username目录再运行。这条命令的本质其实就是在Users\\username目录下创建一个内容为{ \"path\": \"cz-conventional-changelog\" }的.czrc文件。 echo { \"path\": \"cz-conventional-changelog\" } \u003e C:\\Users\\daizelai\\.czrc 来的操作过程： daizelai@GBCOM-20210524I MINGW64 ~\r$ date\rThu May 11 09:45:44 2023\rdaizelai@GBCOM-20210524I MINGW64 ~\r$ pwd\r/c/Users/daizelai\rdaizelai@GBCOM-20210524I MINGW64 ~\r$ ls -l .czrc\rls: cannot access '.czrc': No such file or directory\rdaizelai@GBCOM-20210524I MINGW64 ~\r$ echo '{ \"path\": \"cz-conventional-changelog\" }' \u003e .czrc\rdaizelai@GBCOM-20210524I MINGW64 ~\r$ ls -l .czrc\r-rw-r--r-- 1 daizelai 197121 36 May 11 09:46 .czrc\rdaizelai@GBCOM-20210524I MINGW64 ~\r$ cat .czrc\r{ path: cz-conventional-changelog }\rdaizelai@GBCOM-20210524I MINGW64 ~\r$ 一定要检查一下.czrc的文件内容： { \"path\": \"cz-conventional-changelog\" } 将这个.czrc文件转换为utf8格式，因为Git-bash只认utf8格式的该文件。 当然，也可以直接配置json，不生成.czrc文件 \"config\": { \"commitizen\": { \"path\": \"cz-conventional-changelog\" } } 已经完成了Commitizen的全局安装！你可以在任何一个git仓库中使用git cz，而不是git commit。另外，你可以在git cz上使用git commit的所有参数，比如git cz -a。如果项目和全局都安装过Commitizen，那么会使用项目中的Commitizen适配器，而不是全局的。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:3","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"使用 下面是通过Git Bash中执行git cz命令后，无法使用键盘的上下箭头来选择提交类型，不过可以直接输入类型关键字就可以了，如输入fix后回车，后面有介绍说可以重新安装一个git-cz来解决此问题。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/SH_JC_Android (master)\r$ git cz\rcz-cli@4.3.0, cz-conventional-changelog@3.3.0\r// 这次提交的类型是什么\r? Select the type of change that you're committing: (Use arrow keys)\r\u003e feat: A new feature // 新增特性（feature)\rfix: A bug fix // 修复bug(bug fix)\rdocs: Documentation only changes // 修改文档\rstyle: Changes that do not affect the meaning of the code (white-space,\rformatting, missing semi-colons, etc) // 代码格式修改\rrefactor: A code change that neither fixes a bug nor adds a feature // 代码重构\rperf: A code change that improves performance // 改善性能\rtest: Adding missing tests or correcting existing tests // 测试\rbuild: Changes that affect the build system or external dependencies (example\rscopes: gulp, broccoli, npm) // 变更项目构建或外部依赖（例如 scopes:webpack、gulp、npm等）\rci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs\r) // 更改持续集成软件的配置文件和package中的script 命令\rchore: Other changes that don't modify src or test files // 变更构建流程或辅助工具（比如更改测试环境）\rrevert: Reverts a previous commit // 代码回退\r(Move up and down to reveal more choices)\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/SH_JC_Android (master)\r$ 但是通过windows的终端命令行中，使用git cz命令就可以使用键盘的上下箭头来选择提交类型。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 13:28:11.28\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003egit status\rOn branch master\rYour branch is up to date with 'origin/master'.\rChanges to be committed:\r(use \"git restore --staged \u003cfile\u003e...\" to unstage)\rmodified: zte/app/build.gradle\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003egit cz\r? Select the type of change that you're committing: 🐛 fix: A bug fix\r? Write a short, imperative mood description of the change:\r[-------------------------------------------------------------] 56 chars left\rfix: 修复了通话时没有声音的BUG\r? Provide a longer description of the change:\r通过修复通话的业务代码，修复了组呼通话时没有声音的BUG。\r? List any breaking changes // 选择是否有不兼容改造点breaking，如果有输入不兼容改造点描述：\rBREAKING CHANGE:\r? Issues this commit closes, e.g #123: #110 // 选择是否有问题解决issues，如果有输入解决的问题清单\r[master 972ecce] fix: 🐛 修复了通话时没有声音的BUG\r1 file changed, 1 insertion(+), 1 deletion(-)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003egit log -n 1\rcommit 972ecce6e508a62d5c8ecbc0000ab04838b7250f (HEAD -\u003e master)\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Thu May 11 13:28:51 2023 +0800\rfix: 🐛 修复了通话时没有声音的BUG\r通过修复通话的业务代码，修复了组呼通话时没有声音的BUG。\r✅ Closes: #110\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003egit reflog -n 1\r972ecce (HEAD -\u003e master) HEAD@{0}: commit: fix: 🐛 修复了通话时没有声音的BUG\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:4","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装git-cz 在window系统下的Git Bash会有一个问题，window系统下使用git cz后无法上下选择本次提交的类型，这里给大家介绍一个工具，在你git cz前面加上“winpty”，即可实现上下选择。 npm install -g git-cz\rgit-cz 使用时输入如下命令即可。 winpty git cz 下面是来的安装过程记录： C:\\Users\\daizelai\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rC:\\Users\\daizelai\u003enpm install -g git-cz\rnpm ERR! code EEXIST\rnpm ERR! path C:\\Users\\daizelai\\AppData\\Roaming\\npm\\git-cz\rnpm ERR! EEXIST: file already exists\rnpm ERR! File exists: C:\\Users\\daizelai\\AppData\\Roaming\\npm\\git-cz\rnpm ERR! Remove the existing file and try again, or run npm\rnpm ERR! with --force to overwrite files recklessly.\rnpm ERR! A complete log of this run can be found in:\rnpm ERR! C:\\Users\\daizelai\\AppData\\Local\\npm-cache\\_logs\\2023-05-11T02_46_00_443Z-debug-0.log\rC:\\Users\\daizelai\u003enpm install -g git-cz --force\rnpm WARN using --force Recommended protections disabled.\radded 1 package in 54s\rC:\\Users\\daizelai\u003egit-cz\rCommand failed: git diff --cached --no-ext-diff --name-only\rerror: unknown option `cached'\rusage: git diff --no-index [\u003coptions\u003e] \u003cpath\u003e \u003cpath\u003e\rDiff output format options\r-p, --patch generate patch\r-s, --no-patch suppress diff output\r-u generate patch\r-U, --unified[=\u003cn\u003e] generate diffs with \u003cn\u003e lines context\r-W, --function-context\rgenerate diffs with \u003cn\u003e lines context\r--raw generate the diff in raw format\r--patch-with-raw synonym for '-p --raw'\r--patch-with-stat synonym for '-p --stat'\r--numstat machine friendly --stat\r--shortstat output only the last line of --stat\r-X, --dirstat[=\u003cparam1,param2\u003e...]\routput the distribution of relative amount of changes for each sub-directory\r--cumulative synonym for --dirstat=cumulative\r--dirstat-by-file[=\u003cparam1,param2\u003e...]\rsynonym for --dirstat=files,param1,param2...\r--check warn if changes introduce conflict markers or whitespace errors\r--summary condensed summary such as creations, renames and mode changes\r--name-only show only names of changed files\r--name-status show only names and status of changed files\r--stat[=\u003cwidth\u003e[,\u003cname-width\u003e[,\u003ccount\u003e]]]\rgenerate diffstat\r--stat-width \u003cwidth\u003e generate diffstat with a given width\r--stat-name-width \u003cwidth\u003e\rgenerate diffstat with a given name width\r--stat-graph-width \u003cwidth\u003e\rgenerate diffstat with a given graph width\r--stat-count \u003ccount\u003e generate diffstat with limited lines\r--compact-summary generate compact summary in diffstat\r--binary output a binary diff that can be applied\r--full-index show full pre- and post-image object names on the \"index\" lines\r--color[=\u003cwhen\u003e] show colored diff\r--ws-error-highlight \u003ckind\u003e\rhighlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\r-z do not munge pathnames and use NULs as output field terminators in --raw or --numstat\r--abbrev[=\u003cn\u003e] use \u003cn\u003e digits to display object names\r--src-prefix \u003cprefix\u003e\rshow the given source prefix instead of \"a/\"\r--dst-prefix \u003cprefix\u003e\rshow the given destination prefix instead of \"b/\"\r--line-prefix \u003cprefix\u003e\rprepend an additional prefix to every line of output\r--no-prefix do not show any source or destination prefix\r--inter-hunk-context \u003cn\u003e\rshow context between diff hunks up to the specified number of lines\r--output-indicator-new \u003cchar\u003e\rspecify the character to indicate a new line instead of '+'\r--output-indicator-old \u003cchar\u003e\rspecify the character to indicate an old line instead of '-'\r--output-indicator-context \u003cchar\u003e\rspecify the character to indicate a context instead of ' '\rDiff rename options\r-B, --break-rewrites[=\u003cn\u003e[/\u003cm\u003e]]\rbreak complete rewrite changes into pairs of delete and create\r-M, --find-renames[=\u003cn\u003e]\rdetect renames\r-D, --irreversible-delete\romit the preimage for deletes\r-C, --find-copies[=\u003cn\u003e]\rdetect copies\r--find-copies-harder use unmodified files as source to find copies\r--no-renames disable rename detection\r--rename-empty use empty blobs as rename source\r--follow continue listing the history of a file beyond renames\r-l \u003cn\u003e prevent rename/copy detection if the number of rename/copy targets exceeds given limit\rDiff algorithm options\r--minimal produce the smallest possible diff\r-w, --ignore-all-s","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:5","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装可自定义的cz适配器 因为commitizen只支持英文，如果我想要支持中文指令和emoji，那么就必须安装可自定义的cz适配器了 npm i -D commitlint-config-cz cz-customizable commitlint-config-git-commit-emoji 来后来又安装了。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/12 周五\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm i -D commitlint-config-cz cz-customizable\radded 52 packages, and audited 254 packages in 10s\r30 packages are looking for funding\rrun `npm fund` for details\rfound 0 vulnerabilities\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 10:42:30.03\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 在项目根目录创建.cz-config.js文件 echo \u003e .cz-config.js 配置.cz-config.js文件内容： module.exports = { types: [ { value: '✨ feat', name: '✨ feat: 新功能' }, { value: '🐛 fix', name: '🐛 fix: 修复bug' }, { value: '📦 build', name: '📦️ build: 打包' }, { value: '⚡ perf', name: '⚡️ perf: 性能优化' }, { value: '🎉 release', name: '🎉 release: 发布正式版' }, { value: '💄 style', name: '💄 style: 代码的样式美化' }, { value: '♻️ refactor', name: '♻️ refactor: 重构' }, { value: '✏️ docs', name: '✏️ docs: 文档变更' }, { value: '✅ test', name: '✅ test: 测试' }, { value: '⏪ revert', name: '⏪️ revert: 回退' }, { value: '🚀 chore', name: '🚀 chore: 构建/工程依赖/工具' }, { value: '👷‍♂️ ci', name: '👷 ci: CI related changes' } ], messages: { type: '请选择提交类型(必填)', customScope: '请输入文件修改范围(可选)', subject: '请简要描述提交(必填)', body: '请输入详细描述(可选)', breaking: '列出任何BREAKING CHANGES(可选)', footer: '请输入要关闭的issue(可选)', confirmCommit: '确定提交此说明吗？' }, allowCustomScopes: true, // 跳过问题 skipQuestions: ['body', 'footer'], subjectLimit: 72 } 将cz-customizable脚本添加到您的 package.json //#npm set-script commit \"git add . \u0026\u0026 cz-customizable\" { \"devDependencies\": { \"@commitlint/cli\": \"^17.6.3\", \"@commitlint/config-conventional\": \"^17.6.3\", \"commitlint-config-cz\": \"^0.13.3\", \"commitlint-config-git-commit-emoji\": \"^1.0.0\", \"cz-customizable\": \"^7.0.0\", \"husky\": \"^7.0.1\" }, \"scripts\": { \"prepare\": \"husky install\", \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\", \"changelogs\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\", + \"commit\": \"cz-customizable\" } } 上面就可以在命令行输入npm run commit了。 安装emoji插件，来实际使用中中文的表情显示都是乱码，使用notepad++修改.cz-config.js文件里的内容格式为UTF8无BOM就可以了。如果发现中文显示正常，但表情是乱码，请注意一下.cz-config.js文件内容中的表情是否就是乱码，只要在.cz-config.js文件为UTF8的格式下重新拷贝上面的json内容到.cz-config.js文件中就可以了。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm i -D commitlint-config-git-commit-emoji\radded 1 package, and audited 255 packages in 1s\r30 packages are looking for funding\rrun `npm fund` for details\rfound 0 vulnerabilities\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/12 周五\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 10:57:56.93\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 下面是安装后的使用。 PS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e date\r2023年5月12日 11:19:16\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e npm run commit\r\u003e cz-customizable\rcz-customizable standalone version\rAll lines except first will be wrapped after 100 characters.\r? 请选择提交类型(必填) (Use arrow keys)\r\u003e ✨ feat: 新功能\r🐛 fix: 修复bug\r📦️ build: 打包\r⚡️ perf: 性能优化\r🎉 release: 发布正式版\r💄 style: 代码的样式美化\r♻️ refactor: 重构\r(Move up and down to reveal more choices)\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:6","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"关于chagelog changelog使用，在项目第一层目录执行如下命令： #追加\rconventional-changelog -p angular -i CHANGELOG.md -s\r#全量生成\rconventional-changelog -p angular -i CHANGELOG.md -s -r 0 -p 指定风格* -i CHANGELOG.md 指定输出的文件名称 -s 输出到infile，这样就不需要指定与outfile相同的文件 -r 从最新的版本生成多少个版本。如果为0，则整个更改日志将被重新生成，输出文件将被覆盖。默认值:1 -n ./changelog-option.js 指定自定义配置 成功后将在项目生成 CHANGELOG.md 文件，在git lab上即可直观的展示git的提交记录。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003econventional-changelog -p angular -i CHANGELOG.md -s\r'conventional-changelog' 不是内部或外部命令，也不是可运行的程序\r或批处理文件。\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 13:51:19.65\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm install -g conventional-changelog-cli\rnpm WARN deprecated uuid@3.4.0: Please upgrade to version 7 or higher. Older versions may use Math.random() in certain circumstances, which is known to be problematic. See https://v8.dev/blog/math-random for details.\radded 168 packages in 14m\r15 packages are looking for funding\rrun `npm fund` for details\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 14:05:51.15\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003econventional-changelog -p angular -i CHANGELOG.md -s\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 下面是生成的changelog文件内容： # (2023-05-11)\r### Bug Fixes\r* 🐛 修复了通话时没有声音的BUG ([972ecce](https://gitlab.gbcom.com.cn/metro-system/sh_jc/commit/972ecce6e508a62d5c8ecbc0000ab04838b7250f)), closes [#110](https://gitlab.gbcom.com.cn/metro-system/sh_jc/issues/110) 集成命令 路径：D:\\code\\gbcom_gitlab\\SH_JC_Android\\package.json { \"devDependencies\": { \"@commitlint/cli\": \"^17.6.3\", \"@commitlint/config-conventional\": \"^17.6.3\", \"husky\": \"^7.0.1\" }, \"scripts\": { \"prepare\": \"husky install\", + \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\", + \"changelogs\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\" }, \"lint-staged\": { \"src/**/*.{js,vue}\": [ \"eslint --fix\", \"git add\" ] } } 在命令行就可以执行命令了 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm run changelog\r\u003e changelog\r\u003e conventional-changelog -p angular -i CHANGELOG.md -s\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm run changelogs\r\u003e changelogs\r\u003e conventional-changelog -p angular -i CHANGELOG.md -s -r 0\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 查看工具安装情况 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 14:26:22.09\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm ls -g -depth=0\rC:\\Users\\daizelai\\AppData\\Roaming\\npm\r+-- commitizen@4.3.0\r+-- conventional-changelog-cli@2.2.2\r+-- conventional-changelog@3.1.25\r+-- cz-conventional-changelog@3.3.0\r`-- git-cz@4.9.0\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:7","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"提交规范校验 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:0","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"描述 程序员如果忘记执行git cz命令怎么办？ 约定式提交规范 commitizen：git 提交规范化工具 commitlint：用于检查提交信息 pre-commit： git hooks 钩子 lint-staged：只检查本次修改更新的代码，并在出现错误的时候，自动修复并且推送 使用 husky + commitlint 检查提交描述是否符合规范要求 commitlint：用于检查提交信息 husky：是git hooks工具 注意：npm 需要在 7.x 以上版本！！！！！ 安装commitlint 1、npm install –save-dev @commitlint/config-conventional@12.1.4 @commitlint/cli@12.1.4 2、创建 commitlint.config.js 文件 说明 @commitlint/cli: commitlint 的 CLI 工具 @commitlint/config-conventional: commitlint 的 conventional 规范配置方案，这是一个从 config-angular 衍生出的一个分支 husky: 一款 git hook 工具，可以 hook git 的命令 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:1","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装校验工具 校验提交说明是否符合规范，安装校验工具commitlint。 安装符合Angular风格的校验规则@commitlint/config-conventional。 #安装\rnpm install --save-dev @commitlint/config-conventional @commitlint/cli\r#添加规范\recho \"module.exports = {extends: ['@commitlint/config-conventional']};\" \u003e commitlint.config.js 下面是命令执行过程： D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 15:27:31.51\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm install --save-dev @commitlint/config-conventional @commitlint/cli\radded 200 packages in 11m\r28 packages are looking for funding\rrun `npm fund` for details\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 15:40:22.36\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 在项目中新建commitlint.config.js文件并设置校验规则。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 8AC9-706C\rD:\\code\\gbcom_gitlab\\SH_JC_Android 的目录\r2023/05/11 15:38 \u003cDIR\u003e .\r2023/05/11 15:38 \u003cDIR\u003e ..\r2022/11/04 18:43 247 .gitignore\r2023/05/08 18:57 \u003cDIR\u003e .gitlab\r2023/05/11 14:24 262 CHANGELOG.md\r2023/05/09 10:35 \u003cDIR\u003e doc\r2023/05/11 15:38 \u003cDIR\u003e node_modules\r2023/05/11 15:38 81,136 package-lock.json\r2023/05/11 15:38 114 package.json\r2023/05/08 19:07 129 README.md\r2023/05/09 10:21 \u003cDIR\u003e td\r2023/05/09 09:25 \u003cDIR\u003e zte\r5 个文件 81,888 字节\r7 个目录 42,581,184,512 可用字节\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003eecho \"module.exports = {extends: ['@commitlint/config-conventional']};\" \u003e commitlint.config.js\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003edir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 8AC9-706C\rD:\\code\\gbcom_gitlab\\SH_JC_Android 的目录\r2023/05/11 15:44 \u003cDIR\u003e .\r2023/05/11 15:44 \u003cDIR\u003e ..\r2022/11/04 18:43 247 .gitignore\r2023/05/08 18:57 \u003cDIR\u003e .gitlab\r2023/05/11 14:24 262 CHANGELOG.md\r2023/05/11 15:44 69 commitlint.config.js\r2023/05/09 10:35 \u003cDIR\u003e doc\r2023/05/11 15:38 \u003cDIR\u003e node_modules\r2023/05/11 15:38 81,136 package-lock.json\r2023/05/11 15:38 114 package.json\r2023/05/08 19:07 129 README.md\r2023/05/09 10:21 \u003cDIR\u003e td\r2023/05/09 09:25 \u003cDIR\u003e zte\r6 个文件 81,957 字节\r7 个目录 42,581,118,976 可用字节\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 文件内容如下： module.exports={ extends: ['@commitlint/config-conventional'] }; 注意：确保保存为 UTF-8 的编码格式，否则可能报错 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:2","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装husky 安装依赖 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 15:53:35.59\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm install husky@7.0.1 --save-dev\radded 1 package, and audited 202 packages in 4s\r29 packages are looking for funding\rrun `npm fund` for details\rfound 0 vulnerabilities\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 启动hooks 启动hooks，生成 .husky 文件夹 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 8AC9-706C\rD:\\code\\gbcom_gitlab\\SH_JC_Android 的目录\r2023/05/11 15:44 \u003cDIR\u003e .\r2023/05/11 15:44 \u003cDIR\u003e ..\r2022/11/04 18:43 247 .gitignore\r2023/05/08 18:57 \u003cDIR\u003e .gitlab\r2023/05/11 14:24 262 CHANGELOG.md\r2023/05/11 15:44 69 commitlint.config.js\r2023/05/09 10:35 \u003cDIR\u003e doc\r2023/05/11 15:53 \u003cDIR\u003e node_modules\r2023/05/11 15:53 81,619 package-lock.json\r2023/05/11 15:53 137 package.json\r2023/05/08 19:07 129 README.md\r2023/05/09 10:21 \u003cDIR\u003e td\r2023/05/09 09:25 \u003cDIR\u003e zte\r6 个文件 82,463 字节\r7 个目录 42,580,422,656 可用字节\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpx husky install\rhusky - Git hooks installed\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003edir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 8AC9-706C\rD:\\code\\gbcom_gitlab\\SH_JC_Android 的目录\r2023/05/11 15:55 \u003cDIR\u003e .\r2023/05/11 15:55 \u003cDIR\u003e ..\r2022/11/04 18:43 247 .gitignore\r2023/05/08 18:57 \u003cDIR\u003e .gitlab\r2023/05/11 15:55 \u003cDIR\u003e .husky\r2023/05/11 14:24 262 CHANGELOG.md\r2023/05/11 15:44 69 commitlint.config.js\r2023/05/09 10:35 \u003cDIR\u003e doc\r2023/05/11 15:53 \u003cDIR\u003e node_modules\r2023/05/11 15:53 81,619 package-lock.json\r2023/05/11 15:53 137 package.json\r2023/05/08 19:07 129 README.md\r2023/05/09 10:21 \u003cDIR\u003e td\r2023/05/09 09:25 \u003cDIR\u003e zte\r6 个文件 82,463 字节\r8 个目录 42,580,422,656 可用字节\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 生成prepare指令 在package.json中生成prepare指令（需要 npm \u003e 7.0 版本 ），这里一直失败，一直失败，一直失败。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm set-script prepare \"husky install\"\rUnknown command: \"set-script\"\rDid you mean this?\rnpm run-script # Run arbitrary package scripts\rTo see a list of supported npm commands, run:\rnpm help\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 这里直接在json文件中配置一下也可以。 路径：D:\\code\\gbcom_gitlab\\SH_JC_Android\\package.json { \"devDependencies\": { \"@commitlint/cli\": \"^17.6.3\", \"@commitlint/config-conventional\": \"^17.6.3\", \"husky\": \"^7.0.1\" }, \"scripts\": { + \"prepare\": \"husky install\" } } 然后在项目根目录下的package.json就添加了一行\"husky\": \"^7.0.1\"。 {\r\"devDependencies\": {\r\"@commitlint/cli\": \"^17.6.3\",\r\"@commitlint/config-conventional\": \"^17.6.3\",\r\"husky\": \"^7.0.1\"\r}\r} 执行 prepare 指令 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm run prepare\rnpm ERR! Missing script: \"prepare\"\rnpm ERR!\rnpm ERR! To see a list of scripts, run:\rnpm ERR! npm run\rnpm ERR! A complete log of this run can be found in:\rnpm ERR! C:\\Users\\daizelai\\AppData\\Local\\npm-cache\\_logs\\2023-05-11T08_09_04_751Z-debug-0.log\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 2023/05/11 16:51手动在p中添加配置： {\r\"devDependencies\": {\r\"@commitlint/cli\": \"^17.6.3\",\r\"@commitlint/config-conventional\": \"^17.6.3\",\r\"husky\": \"^7.0.1\"\r},\r+ \"scripts\": {\r+ \"prepare\": \"husky install\"\r+ }\r} 再执行npm run prepare命令。 PS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e npm run prepare\r\u003e prepare\r\u003e echo \"在npm i之前会自动执行\"\r\"在npm i之前会自动执行\"\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 添加commitlint的hook到husky中 添加 commitlint 的 hook 到 husky中，并指令在 commit-msg 的 hooks 下执行 npx –no-install commitlint –edit “$1” 指令 下面是在cmd命令行执行，没有成功。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\rUsage:\rhusky install [dir] (default: .husky)\rhusky uninstall\rhusky set|add \u003cfile\u003e [cmd]\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 下面是在以管理员权限打开的Windows PowerShell中执行成功的。 PS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e npx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\rhusky - created .husky/commit-msg\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 文件结构 目录结构如下： PS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e dir .husky\r目录: D:\\code\\gbcom_gitlab\\SH_JC_Android\\.husky\rMode LastWriteTime Length Name\r---- ------------- ------ ----\rd----- 2023/5/11 15:55 _\r-a---- 2023/5/11 16:15 80 commit-msg\rPS D:\\code\\gbcom_","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:3","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"通过 pre-commit 检测提交时代码规范 描述 通过 husky 监测 pre-commit 钩子，在该钩子下执行 npx eslint –ext .js,.vue src 指令来去进行相关检测 配置pre-commit 执行 npx husky add .husky/pre-commit “npx eslint –ext .js,.vue src” 添加 commit 时的 hook （npx eslint –ext .js,.vue src 会在执行到该 hook 时运行） npx husky add .husky/pre-commit \"npx eslint --ext .js,.vue src\" 来在【管理员：Windows PowerShell】的执行命令记录如下： PS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e date\r2023年5月11日 18:51:56\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e npx husky add .husky/pre-commit \"npx eslint --ext .js,.vue src\"\rhusky - created .husky/pre-commit\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 该操作会生成对应文件 pre-commit： D:\\code\\gbcom_gitlab\\SH_JC_Android\\.husky\u003edir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 8AC9-706C\rD:\\code\\gbcom_gitlab\\SH_JC_Android\\.husky 的目录\r2023/05/11 18:52 \u003cDIR\u003e .\r2023/05/11 18:52 \u003cDIR\u003e ..\r2023/05/11 16:15 80 commit-msg\r2023/05/11 18:52 72 pre-commit\r2023/05/11 15:55 \u003cDIR\u003e _\r2 个文件 152 字节\r3 个目录 42,560,450,560 可用字节\rD:\\code\\gbcom_gitlab\\SH_JC_Android\\.husky\u003e pre-commit的内容如下： #!/bin/sh\r. \"$(dirname \"$0\")/_/husky.sh\"\rnpx eslint --ext .js,.vue src ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:4","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"lint-staged 自动修复格式错误 描述 lint-staged 可以让你当前的代码检查 只检查本次修改更新的代码，并在出现错误的时候，自动修复并且推送 lint-staged 无需单独安装，我们生成项目时，vue-cli 已经帮助我们安装过了，所以我们直接使用就可以了 修改 package.json 配置 { \"devDependencies\": { \"@commitlint/cli\": \"^17.6.3\", \"@commitlint/config-conventional\": \"^17.6.3\", \"husky\": \"^7.0.1\" }, \"scripts\": { \"prepare\": \"husky install\" }, + \"lint-staged\": { + \"src/**/*.{js,vue}\": [ + \"eslint --fix\", + \"git add\" + ] } } 说明 如上配置，每次它只会在你本地 commit 之前，校验你提交的内容是否符合你本地配置的 eslint规则(这个见文档ESLint)，校验会出现两种结果： 如果符合规则：则会提交成功。 如果不符合规则：它会自动执行 eslint –fix 尝试帮你自动修复，如果修复成功则会帮你把修复好的代码提交，如果失败，则会提示你错误，让你修好这个错误之后才能允许你提交代码。 修改.husky/pre-commit文件 #!/bin/sh\r. \"$(dirname \"$0\")/_/husky.sh\"\rnpx eslint --ext .js,.vue src\r+ npx lint-staged 再次执行提交代码，发现 暂存区中 不符合 ESlint 的内容，被自动修复。 在项目的package.json中添加commit钩子(设置校验规则) { \"husky\": { \"hooks\": { \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\" } } } commit-msg 代表对 commit message 进行 hook，hook 的时候执行后面的命令 commitlint -E HUSKY_GIT_PARAMS 进行检查。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:5","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Husky 对于husky用户，在package.json中添加下列配置： \"husky\": {\r\"hooks\": {\r\"prepare-commit-msg\": \"exec \u003c /dev/tty \u0026\u0026 npx cz --hook || true\"\r}\r} ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:6","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"新git项目的使用 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:6:0","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"描述 今天准备使用git提交深圳14号线的代码，记录一下使用过程。 git项目使用git提交规范。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:6:1","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装husky 1.先初始话cz-conventional-changelog PS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e git cz\r× error No files staged!\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e date\r2023年5月12日 14:51:38\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e commitizen init cz-conventional-changelog --save --save-exact\rcommitizen : 无法加载文件 C:\\Users\\daizelai\\AppData\\Roaming\\npm\\commitizen.ps1，因为在此系统上禁止运行脚本。有关详细信\r息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。\r所在位置 行:1 字符: 1\r+ commitizen init cz-conventional-changelog --save --save-exact\r+ ~~~~~~~~~~\r+ CategoryInfo : SecurityError: (:) []，PSSecurityException\r+ FullyQualifiedErrorId : UnauthorizedAccess\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e npx commitizen init cz-conventional-changelog --save-dev --save-exact\rAttempting to initialize using the npm package cz-conventional-changelog\rError: Error: A previous adapter is already configured. Use --force to override\radapterConfig.path: cz-conventional-changelog\rrepoPath: D:\\code\\gbcom_gitlab\\SZ14_Android_APP\rCLI_PATH: C:\\Users\\daizelai\\AppData\\Roaming\\npm\\node_modules\\commitizen\\\rinstallAdapterCommand: npm install cz-conventional-changelog --save-dev\radapterNpmName: cz-conventional-changelog\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e npx commitizen init cz-conventional-changelog --save-dev --save-exact --force\rAttempting to initialize using the npm package cz-conventional-changelog\rnpm WARN using --force Recommended protections disabled.\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e 执行上面的命令后，会生成如下文件和目录。 package.json package-lock.json node_modules 此时json文件如下： { \"devDependencies\": { \"cz-conventional-changelog\": \"^3.3.0\" }, \"config\": { \"commitizen\": { \"path\": \"./node_modules/cz-conventional-changelog\" } } } 2.安装husky PS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e date\r2023年5月12日 14:58:38\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e npm install husky --save-dev 【此命令执行完后在json中添加（\"husky\": \"^8.0.3\"）】\radded 1 package, and audited 193 packages in 3s\r25 packages are looking for funding\rrun `npm fund` for details\rfound 0 vulnerabilities\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e npx husky install\rhusky - Git hooks installed\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e 执行npx husky install后在项目根目录下生成了.husky目录。 { \"devDependencies\": { \"cz-conventional-changelog\": \"^3.3.0\", \"husky\": \"^8.0.3\" }, \"config\": { \"commitizen\": { \"path\": \"./node_modules/cz-conventional-changelog\" } } } 3.添加 husky install 到 package.json scripts 中 为了让其他人在此项目中安装依赖后也能自动创建.husky目录并指定该目录为git hooks所在的目录，我们需要在package.json里面添加一条脚本命令\"prepare\": “husky install”，然后执行npm run prepare { \"devDependencies\": { \"cz-conventional-changelog\": \"^3.3.0\", \"husky\": \"^8.0.3\" }, \"scripts\": { + \"prepare\": \"husky install\", \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\", \"changelogs\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\" }, \"config\": { \"commitizen\": { \"path\": \"./node_modules/cz-conventional-changelog\" } } } 安装好husky之后，需要配置检测规则。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:6:2","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Commitlint 4.安装Commitlint 该工具用于帮助我们规范提交信息 PS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e date\r2023年5月12日 15:09:14\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e npm install @commitlint/config-conventional @commitlint/cli --save-dev\radded 116 packages, and audited 309 packages in 20s\r43 packages are looking for funding\rrun `npm fund` for details\rfound 0 vulnerabilities\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e 上面的操作修改了 { \"devDependencies\": { + \"@commitlint/cli\": \"^17.6.3\", + \"@commitlint/config-conventional\": \"^17.6.3\", \"cz-conventional-changelog\": \"^3.3.0\", \"husky\": \"^8.0.3\" }, \"scripts\": { \"prepare\": \"husky install\", \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\", \"changelogs\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\" }, \"config\": { \"commitizen\": { \"path\": \"./node_modules/cz-conventional-changelog\" } } } 5.在项目根目录创建commitlint.config.js文件 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/WH19-MetroSystem (develop)\r$ echo \"\"\u003ecommitlint.config.js module.exports = { // 忽略部分 ignores: [(commit) =\u003e commit.includes(\"init\")], // 继承的规则 extends: [\"@commitlint/config-conventional\"], // 定义规则类型 rules: { \"body-leading-blank\": [2, \"always\"], \"footer-leading-blank\": [1, \"always\"], \"header-max-length\": [2, \"always\", 108], \"subject-empty\": [2, \"never\"], \"type-empty\": [2, \"never\"], // type 类型定义，表示 git 提交的 type 必须在以下类型范围内 \"type-enum\": [ 2, \"always\", [ \"feat\", // 新增feature \"fix\", // 修复bug \"perf\", // 优化相关，比如性能、体验的提升 \"style\", // 仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑; \"docs\", // 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等; \"test\", // 测试用例，包括单元测试、集成测试等 \"refactor\", // 代码重构，没有加新功能或者修复bug \"build\", \"ci\", \"chore\", // 改变构建流程、或者增加依赖库、工具等 \"revert\", // 回滚到上一个版本 \"wip\", \"workflow\", \"types\", \"release\", ], ], }, }; 6.使用 commit-msg 钩子规范化提交信息 使用以下命令快速创建git hooks的commit-msg钩子，这样每次commit的时候都会由 commitlint对commit信息进行一次检验。 PS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e date\r2023年5月12日 15:13:17\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e npx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\rhusky - created .husky/commit-msg\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e 上面的操作创建了D:\\code\\gbcom_gitlab\\SZ14_Android_APP\\.husky\\commit-msg文件。 #!/usr/bin/env sh . \"$(dirname -- \"$0\")/_/husky.sh\" npx --no-install commitlint --edit $1 7.提交git commit 测试 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/SZ14_Android_APP (develop)\r$ date\rFri May 12 15:16:00 2023\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/SZ14_Android_APP (develop)\r$ git status\rOn branch develop\rYour branch is up to date with 'origin/develop'.\rChanges not staged for commit:\r(use \"git add \u003cfile\u003e...\" to update what will be committed)\r(use \"git restore \u003cfile\u003e...\" to discard changes in working directory)\rmodified: app/src/main/java/com/gbcom/subwaysystem/activity/TrainActivity.java\rmodified: app/src/main/java/com/gbcom/subwaysystem/adapter/DisListAdapter.java\rUntracked files:\r(use \"git add \u003cfile\u003e...\" to include in what will be committed)\r.husky/\rcommitlint.config.js\rnode_modules/\rpackage-lock.json\rpackage.json\rno changes added to commit (use \"git add\" and/or \"git commit -a\")\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/SZ14_Android_APP (develop)\r$ git add app/src/main/java/com/gbcom/subwaysystem/activity/TrainActivity.java app/src/main/java/com/gbcom/subwaysystem/adapter/DisListAdapter.java\rwarning: LF will be replaced by CRLF in app/src/main/java/com/gbcom/subwaysystem/adapter/DisListAdapter.java.\rThe file will have its original line endings in your working directory\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/SZ14_Android_APP (develop)\r$ git status\rOn branch develop\rYour branch is up to date with 'origin/develop'.\rChanges to be committed:\r(use \"git restore --staged \u003cfile\u003e...\" to unstage)\rmodified: app/src/main/java/com/gbcom/subwaysystem/activity/TrainActivity.java\rmodified: app/src/main/java/com/gbcom/subwaysystem/adapter/DisListAdapter.java\rUntracked files:\r(use \"git add \u003cfile\u003e...\" to include in what will be committed)\r.husky/\rcommitlint.config.js\rnode_modules","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:6:3","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":null,"content":"大家好，我是一名coder。 简介 出生地：中国 性别：男 年龄：38 编程经历 html/css/js asp/mysql/sql php/mysql java/mysql android/sqite kotlin ","date":"2023-05-27","objectID":"https://daizelai.github.io/about/:0:0","tags":null,"title":"关于我","uri":"https://daizelai.github.io/about/"},{"categories":["git","vs code"],"content":"20230523_1540使用vscode提交代码交合并分支 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:0:0","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"一、描述 使用Visual Studio Code对代码进行提交和分支合并。 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:1:0","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"二、提交 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:2:0","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"2.1.添加到暂存区 选把feature分支修改的代码添加到暂存区，点击Changes下文件后面的加号就可以把需要commit的文件添加到暂存区Staged Chages，实际执行的是git add 文件名命令。 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:2:1","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"2.2.提交代码 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:2:2","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"三、合并分支 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:3:0","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"3.1.切换到devlop分支 要把在开发分支feature的修改代码合并到develop分支的话，需要先切换到develop分支。 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:3:1","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"3.2.pull最新代码到本地 合并之前选择执行pull命令，让本地的develop分支代码保持最新。 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:3:2","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"3.3.选择合并分支 选择合并分支菜单。 选择要合并的分支，我们要把feature分支的代码合并到develop分支，所以这里选择feature分支。 合并成功，可以看到本地的develop分支代码已经更新了。 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:3:3","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"推送到远程 本地的develop分支推送到远程的develop分支。 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:3:4","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["原创","git","gitflow","git提交"],"content":"gitflow记录","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"一、描述 记录git flow的使用 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:1:0","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"1.2.总结 1.dev-开发分支是从master分支派生的。\r2.feature-特性分支是从dev-开发分支派生的，feature只是本地分支，不会被上传远端，特殊环境例外。\r3.feature-特性分支完成时，它被合并到dev-开发分支中。\r4.feature-特性分支合并完成后删除。\r4.release-发布分支是从dev-开发分支派生的。\r5.release-发布分支发布完成时，它被合并到master分支和dev-开发分支中（前提是保证版本的稳定性后再合并到master分支上）。\r6.release-发布分支合并完成后删除。\r7.版本出现问题时候则通过master分支派生出hotfixes-紧急分支进行修复，修复完成后将它合并到master分支和dev-开发分支中。\r8.hotfixes-紧急分支合并完成后删除。 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:1:1","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"二、常用分支git命令 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:0","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.1.新开分支 $ git branch 新分支名\r#新建分支 develop\r$ git branch develop ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:1","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.2.切换到另一个分支 $ git checkout 分支名\r#切换到 develop 分支\r$ git checkout develop ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:2","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.3.新开分支并切换到新分支 $ git checkout -b 新分支名\r#新开 develop 分支，并切换到此分支\r$ git checkout -b develop ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:3","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.4.查看分支列表 头部带 remotes/origin 的，表示远程分支 $ git branch -a ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:4","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.5.查看远程分支列表 $ git branch -r daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/WZS2_Android_APP (develop)\r$ git branch -r\rorigin/HEAD -\u003e origin/master\rorigin/develop\rorigin/master\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/WZS2_Android_APP (develop)\r$ 下面是查看所有分支： daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/WZS2_Android_APP (develop)\r$ git branch -a\r* develop\rmaster\rmsg\rremotes/origin/HEAD -\u003e origin/master\rremotes/origin/develop\rremotes/origin/master\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/WZS2_Android_APP (develop)\r$ ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:5","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.6.向远程仓库提交本地新开的分支 $ git push origin 新开分支名\r#提交新建的 develop 分支\r$ git push origin develop ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:6","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.7.删除远程分支 $ git push origin --delete 远程分支名\r#删除远程仓库中的 develop 分支\r$ git push origin --delete develop ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:7","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.8.删除本地分支 $ git branch -d 分支名\r#删除本地的 develop 分支\r$ git branch -d develop ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:8","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.9.更新分支列表信息 用于协作时，项目队友添加或删除了远程分支的分支，可以通过这种方式来刷新分支列表信息 $ git fetch -p ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:9","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"三、git flow ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:0","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.1.git flow完整流程示意 Git 开发模式本质上是一套流程，团队每个成员遵守这套流程以确保完成可控的软件开发过程。 git flow完整流程示意 所有在Master分支上的Commit应该Tag。 master的commit ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:1","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.2.主要分支介绍 主要分支分为develop分支和master分支，下图是它们之间的关系。 master与develop之间的关系 master 分支（origin/master） 代码仓库中有且仅有的一条主分支，默认为 master ，在创建版本库时会自动创建。所有提供给用户使用的正式版本的源码，都会在这个分支上发布。也就是说主分支 master 用来发布重大版本。 develop 分支（origin/develop） 日常开发工作都会在 develop 分支上面完成。develop 分支可以用来生成代码的最新隔夜版本（nightly builds）。 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:2","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.3.创建develop分支 基于master分支创建一个develop分支。 $ git checkout -b develop master\r#push develop 到远程仓库\r$ git push origin develop\r$ git push -u origin develop 当我们在develop上完成了新版本的功能，最终会把所有的修改 merge 到 master 分支。针对每次 master 的修改都会打一个 Tag 作为可发布产品的版本号。 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:3","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.4.辅助分支介绍 开发过程中不可能项目人所有都在一个 develop 分支中开发，版本管理会很混乱。所以除了主要分支外，我们还需要一些辅助分支来协助团队成员间的并行开发。 所用到的辅助分支大体分三类： Feature branches（功能分支） Release branches（预发布分支） Hotfix branches（热修复分支） ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:4","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.5.Feature branches（功能分支） 3.5.1.应用场景 当要开始一个新功能的开发时，我门可以创建一个 Feature branche 。等待这个新功能开发完成并确定应用到新版本中就合并回 develop，那么如果不是就会被很遗憾的丢弃。。。 Feature branches分支 3.5.2.应用规则 从 develop 分支创建，最终合并回 develop 分支; 分支名：feature／＊; Tips： 这里很多地方说用feature-*的方式命名，也可以使用feature/*方式，其实意思是一样的。 3.5.3.Creat a feature branch # 基于develop分支创建feature功能分支，当然这里也可以先【git push -u origin feature/name_v1.0.0】\r$ git checkout -b feature/name_v1.0.0 develop 创建name_v1.0.0分支之后，就可以开始开发了。 git status\rgit add fiel...\rgit commit -m \"submit\" 开发完成之后，push到远程，push本地feature/name_v1.0.0到远处代码库。 # 将feature分支推送到远程【可选，如果这个需求有其他人参与开发的话】对应`git flow publish feature name`命令，拉取`git flow feature track feature name`。\r$ git push origin feature/name_v1.0.0\r$ git push -u origin 分支名称 3.5.4.切换到develop合并feature/name_v1.0.0 完成feature分支的开发之后， 先切换到develop分支。 # 拉取远端最新develop分支并切换到develop【这是为了后面合并feature分支的工作】\r$ git pull origin develop \u0026\u0026 git checkout develop\r# develop合资feature分支的修改\r$ git merge --no-ff feature/name_v1.0.0\r# 提交feature的更改到远程develop分支\r$ git push origin develop \"- -no-ff\" 的作用是创建一个新的\"commit\"对象用于当前合并操作。这样既可以避免丢失该功能分支的历史存在信息，又可以集中该功能分支所有历史提交。并且如果想回退版本也会比较方便。 下面是git merge --no-ff图示： git merge –no-ff 图示 3.5.5.移除本地和远程仓库的feature/name_v1.0.0分支 # 删除本地分支feature/name_v1.0.0\r$ git branch -d feature/name_v1.0.0\r# 删除远程分支，如果远程存在这个分支的话\r$ git push origin --delete feature/name_v1.0.0 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:5","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.6.Release branches（预发布分支） 3.6.1.应用场景 “Release branches” 用来做新版本发布前的准备工作，在上面可以做一些小的 bug 修复、准备发布版本号等等和发布有关的小改动，其实已经是一个比较成熟的版本了。另外这样我们既可以在预发布分支上做一些发布前准备，也不会影响 “develop” 分支上下一版本的新功能开发。 3.6.2.应用规则 从develop分支创建，最终合并回develop和master; 分支名：release-＊; 3.6.3.Creat a release branch # 从develop分支创建release分支\r$ git checkout -b release-1.1 develop\r#push 到远程仓库（可选）\r$ git push origin release-1.1 现在可以在这个release-1.1分支中开始开发了。 3.6.4.切换到 develop 合并 release-1.1 预发布分支所做的修改同时也要合并回 develop # 完成release分支开发之后，获取最新develop分支内容，并且切换到develop分支。\r$ git pull origin develop \u0026\u0026 git checkout develop\r# 合并release-1.1分支到develop分支\r$ git merge --no-ff release-1.1\r# 提交到远程develop分支\r$ git push origin develop 3.6.5.切换到 master 合并 release-1.1 # 完成release分支开发之后，获取最新master分支，并切换到master分支\r$ git pull origin master \u0026\u0026 git checkout master\r# 合并release-1.1修改到master分支\r$ git merge --no-ff release-1.1\r# 把本地master分支的修改推送到远程服务器\r$ git push origin master\r# 给版本打tag，【git tag -a v1.1 master】\r$ git tag -a v1.1 -m 'my version 1.1'\r# 推送tag到远程服务器，也可以`git push --tags`提交所有包括tag\r$ git push origin v1.1 当我们的 release-1.1 的 Review 完成，也就预示着我们可以发布了。打上相应的版本号，再 push 到远程仓库。 3.6.6.移除本地和远程仓库的 release-1.1 # 删除本地release-1.1分支\r$ git branch -d release-1.1\r# 删除远程release-1.1分支\r$ git push origin --delete release-1.1 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:6","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.7.Hotfix branches（热修复分支） 3.7.1.应用场景 “Hotfix branches” 主要用于处理线上版本出现的一些需要立刻修复的 bug 情况. 下面是示意图： 3.7.2.应用规则 从master分支上当前版本号的tag处切出，也就是从最新的master上创建，最终合并回develop和master; 分支名：hotfix-＊; 3.7.3.Creat a fixbug branch $ git checkout -b fixbug-1.1.1 master\r# push 到远程仓库（可选）\r$ git push origin fixbug-1.1.1 现在可以修改BUG了。 3.7.4.切换到develop合并fixbug－1.1.1 # 更新develop为最新，并切换到develop分支\r$ git pull origin develop \u0026\u0026 git checkout develop\r# 合并fixbug-1.1.1到develop分支。\r$ git merge --no-ff fixbug-1.1.1\r# 推送最新修改到远程develop分支\r$ git push origin develop 3.7.5.切换到master合并fixbug-1.1.1 bug修复完成，合并回master并打上版本号； # 从远程服务器获取最新master代码，并切换到master分支\r$ git pull origin master \u0026\u0026 git checkout master\r# 合并fixbug-1.1.1的修改到master分支\r$ git merge --no-ff fixbug-1.1.1\r# 推送master到远程服务器\r$ git push origin master\r# 给版本打tag\r$ git tag -a v1.1.1 -m 'my version 1.1.1'\r# 推送tag到远程服务器，也可以`git push --tags`提交所有包括tag\r$ git push origin v1.1.1 3.7.6.移除本地和远程仓库的 fixbug-1.1.1 # 删除本地fixbug-1.1.1分支\r$ git branch -d fixbug-1.1.1\r# 删除远程fixbug-1.1.1分支\r$ git push origin --delete fixbug-1.1.1 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:7","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.8.删除远程分支 $ git branch -r -d origin/branch-name \u0026\u0026 git push origin :branch-name ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:8","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.9.远程有分支本地无分支 $ git checkout --track origin/branch-name ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:9","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.10.本地有分支远程无分支 $ git push --set-upstream origin branch-name ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:10","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","ssh"],"content":"ssh免密码登录","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/","tags":["原创","ssh","远程登录","ssh登录"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/"},{"categories":["原创","ssh"],"content":"20221016_1619ssh免密码登录 [TOC] ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/:0:0","tags":["原创","ssh","远程登录","ssh登录"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/"},{"categories":["原创","ssh"],"content":"一、描述 ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/:1:0","tags":["原创","ssh","远程登录","ssh登录"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/"},{"categories":["原创","ssh"],"content":"1.1.前言 by daizelai 2022/10/16 16:20 本文介绍如何在Windows10上面免密码登录远程centos服务器的ssh ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/:1:1","tags":["原创","ssh","远程登录","ssh登录"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/"},{"categories":["原创","ssh"],"content":"1.2.介绍 A免密登录B的两种方式 比如A本地台式机电脑上远程登录linux系统的B服务器 1.2.1.方式一，上传A的pub公钥到B服务器 把A的公钥pub文件，放在B的~/authorized_keys文件中 打开A的id_isa.pub的文件，复制并粘贴到B的~/authorized_keys文件的最下方，不要带多余的空格和其他符号 vim ~/authorized_keys #插入B服务器的的内容底部 authorized_keys文件里保存了其他人的公钥列表，代表这些服务器可以直接登录自己。 命令执行过程：A会用自己的.ssh/目录下的私钥文件，例如id_rds进行加密登录。而B会用自己authorized_keys保存的公钥内容进行解密，如果解密成功，就认为A是合法用户，让A免密登录。 注： 所以A的目录下必须有id_rsa文件。 1.2.2.方式二、下载B的私钥文件，生成pem文件 新建一个pem文件，把B的private内容粘贴进去 利用ssh命令即可登录 ssh -i b的私钥.pem文件 root@B的ip地址 B的私钥文件（原本只能B自己知道）给了A，证明B足够信任A，A可以直接登录B 命令执行过程：A会用 -i指定的私钥文件（这里就是B的私钥文件）加密，B在自己的authorized_keys中用自己的公钥文件解密。如果成功，就认为A是合法用户，让A免密登录。 ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/:1:2","tags":["原创","ssh","远程登录","ssh登录"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/"},{"categories":["原创","ssh"],"content":"二、免密码SSH登录 ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/:2:0","tags":["原创","ssh","远程登录","ssh登录"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/"},{"categories":["原创","ssh"],"content":"2.1.生成密钥 密钥生成说明 C:\\Users\\你的用户名\u003essh-keygen -t rsa -b 2048 【上面一行的-t参数代表类型type，表示用rsa方式加密；-b参数，这里表示生成2048位的公钥】\r【输完ssh-keygen -t rsa -b 2048后回车，生成公钥-私钥对总共只用到这一个命令，以下是配置部分】\rGenerating public/private rsa key pair.\rEnter file in which to save the key (/cygdrive/c/Users/你的用户名/.ssh/id_rsa): 【在上一行的冒号后输入保存私钥的文件名。默认是在C:\\Users\\你的用户名\\.ssh\\ 这个路径下，生成名为id_rsa的文件。】\r【另外在该路径下还会自动生成id_rsa.pub文件，用来保存公钥。】\rEnter passphrase (empty for no passphrase):【在这里输入私钥密码】\rEnter same passphrase again:【重复输入私钥密码】\rYour identification has been saved in c/Users/你的用户名/.ssh/id_rsa.\rYour public key has been saved in c/Users/你的用户名/.ssh/id_rsa.pub.\r【上面两行说明了你私钥、公钥的保存位置】\rThe key fingerprint is:\rxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 在lai的windows台式机上面也就是A电脑上面生成密钥。 PS C:\\Users\\daizelai\\.ssh\u003e dir\r目录: C:\\Users\\daizelai\\.ssh\rMode LastWriteTime Length Name\r---- ------------- ------ ----\r-a---- 2022/10/3 15:11 800 config\r-a---- 2022/5/12 15:59 2610 id_rsa\r-a---- 2022/5/12 15:59 575 id_rsa.pub\r-a---- 2022/9/27 14:03 2655 id_rsa_itcss_gitlab\r-a---- 2022/9/27 14:03 572 id_rsa_itcss_gitlab.pub\r-a---- 2022/9/27 14:24 1323 known_hosts\r-a---- 2021/6/21 10:27 101 known_hosts.old\rPS C:\\Users\\daizelai\\.ssh\u003e date\r2022年10月16日 14:03:33\rPS C:\\Users\\daizelai\\.ssh\u003e ssh-keygen -t rsa -f C:/Users/daizelai/.ssh/id_rsa_centos79\rGenerating public/private rsa key pair.\rEnter passphrase (empty for no passphrase): #这里我没有输入密码\rEnter same passphrase again:\rYour identification has been saved in C:/Users/daizelai/.ssh/id_rsa_centos79.\rYour public key has been saved in C:/Users/daizelai/.ssh/id_rsa_centos79.pub.\rThe key fingerprint is:\rSHA256:zt84eZ7ml+45laBc9I/DL+4aw72RAHP5brmWJ1X/Qic daizelai@GBCOM-20210524I\rThe key's randomart image is:\r+---[RSA 3072]----+\r| |\r| o |\r| o + . |\r| + + ..|\r| S . +.o.=|\r| o + +E+*|\r| o .+.BX.|\r| .ooo=X=+|\r| o**OO* |\r+----[SHA256]-----+\rPS C:\\Users\\daizelai\\.ssh\u003e dir\r目录: C:\\Users\\daizelai\\.ssh\rMode LastWriteTime Length Name\r---- ------------- ------ ----\r-a---- 2022/10/3 15:11 800 config\r-a---- 2022/5/12 15:59 2610 id_rsa\r-a---- 2022/5/12 15:59 575 id_rsa.pub\r-a---- 2022/10/16 14:04 2610 id_rsa_centos79\r-a---- 2022/10/16 14:04 579 id_rsa_centos79.pub\r-a---- 2022/9/27 14:03 2655 id_rsa_itcss_gitlab\r-a---- 2022/9/27 14:03 572 id_rsa_itcss_gitlab.pub\r-a---- 2022/9/27 14:24 1323 known_hosts\r-a---- 2021/6/21 10:27 101 known_hosts.old\rPS C:\\Users\\daizelai\\.ssh\u003e ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/:2:1","tags":["原创","ssh","远程登录","ssh登录"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/"},{"categories":["原创","ssh"],"content":"2.2.复制公钥到B服务器 [daizelai@0883a4966fee ~]$ date\rSun Oct 16 08:27:22 UTC 2022\r[daizelai@0883a4966fee ~]$ whoami\rdaizelai\r[daizelai@0883a4966fee ~]$ pwd\r/home/daizelai\r[daizelai@0883a4966fee ~]$ ls -lah\rtotal 36K\rdrwx------ 4 daizelai daizelai 4.0K Oct 16 07:26 .\rdrwxr-xr-x 1 root root 4.0K Oct 13 09:58 ..\rdrwxrwxr-x 2 daizelai daizelai 4.0K Oct 14 01:36 aaa\r-rw-rw-r-- 1 daizelai daizelai 4 Oct 14 01:03 a.txt\r-rw------- 1 daizelai daizelai 226 Oct 14 07:22 .bash_history\r-rw-r--r-- 1 daizelai daizelai 18 Apr 1 2020 .bash_logout\r-rw-r--r-- 1 daizelai daizelai 193 Apr 1 2020 .bash_profile\r-rw-r--r-- 1 daizelai daizelai 231 Apr 1 2020 .bashrc\rdrwx------ 2 daizelai daizelai 4.0K Oct 16 07:53 .ssh\r[daizelai@0883a4966fee ~]$ cat .ssh/autherized_keys\rcat: .ssh/autherized_keys: No such file or directory\r[daizelai@0883a4966fee ~]$\r[daizelai@0883a4966fee ~]$ echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/+0+SWT/18/qrClf49vZ8L4HQ2p3ZSkoEQC82UpuuuDf0IPMK5kqKISFTn9QzB+5R0GQ1gXiYQeNhFSvuWi8R5sdDtJbVphaLh/FGxJhah8SAE7w+Y4i7XKsMMuOdFD60IQuvm3qDnlT4B3DMVr31FoThzLdAGWF6DN7l9aKWUPDkWp0YExEYdUJTusdgXe8X6JP4qnb5AiQeOpyopl+VNAf6I7rSFD41IjiaetQpc6cdrMu7nh8yQWM0jr0i7PmzlHMws8k5zvDf52LOKOqfcq1ml9hINB1LsoFoOOpIjoDj/TbXLWCRH3J8s+jPgT50IvDM8wCsEBH0PqY7sJvU2/GRIP7iFZqrb+YFvq9+dStUpnXEfU7hg8D5CFjJAA3svoniyFG9aYCNez/W0kNDW40CZ6ABHEwMkOkee3/hbuX/eP58+zdjbjZ4O8DOLZWz7y7W2ok4BGk2T4PTsNTWk9KgpeiK7OlzAO5SlMEVqz51RBgKMBZMGpSU/kWbK6M= daizelai@GBCOM-20210524I\" \u003e .ssh/autherized_keys\r[daizelai@0883a4966fee ~]$ cat .ssh/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/+0+SWT/18/qrClf49vZ8L4HQ2p3ZSkoEQC82UpuuuDf0IPMK5kqKISFTn9QzB+5R0GQ1gXiYQeNhFSvuWi8R5sdDtJbVphaLh/FGxJhah8SAE7w+Y4i7XKsMMuOdFD60IQuvm3qDnlT4B3DMVr31FoThzLdAGWF6DN7l9aKWUPDkWp0YExEYdUJTusdgXe8X6JP4qnb5AiQeOpyopl+VNAf6I7rSFD41IjiaetQpc6cdrMu7nh8yQWM0jr0i7PmzlHMws8k5zvDf52LOKOqfcq1ml9hINB1LsoFoOOpIjoDj/TbXLWCRH3J8s+jPgT50IvDM8wCsEBH0PqY7sJvU2/GRIP7iFZqrb+YFvq9+dStUpnXEfU7hg8D5CFjJAA3svoniyFG9aYCNez/W0kNDW40CZ6ABHEwMkOkee3/hbuX/eP58+zdjbjZ4O8DOLZWz7y7W2ok4BGk2T4PTsNTWk9KgpeiK7OlzAO5SlMEVqz51RBgKMBZMGpSU/kWbK6M= daizelai@GBCOM-20210524I\r[daizelai@0883a4966fee ~]$ ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/:2:2","tags":["原创","ssh","远程登录","ssh登录"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/"},{"categories":["原创","ssh"],"content":"2.3.配置ssh 这里是用root账号登录B服务器电脑里，对sshd进行配置的。 [root@0883a4966fee ~]# vi /etc/ssh/sshd_config\rPermitRootLogin yes\rPubkeyAuthentication yes\rPasswordAuthentication yes\rAuthorizedKeysFile .ssh/authorized_keys ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/:2:3","tags":["原创","ssh","远程登录","ssh登录"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/"},{"categories":["原创","ssh"],"content":"2.4.配置root账号authorized_keys [daizelai@0883a4966fee ~]$ su - root\rPassword: Last login: Sun Oct 16 07:58:58 UTC 2022 from gateway on pts/2\rLast failed login: Sun Oct 16 08:22:36 UTC 2022 from gateway on ssh:notty\rThere were 4 failed login attempts since the last successful login.\r[root@0883a4966fee ~]# date\rSun Oct 16 08:32:49 UTC 2022\r[root@0883a4966fee ~]# ls -lah total 68K\rdr-xr-x--- 1 root root 4.0K Oct 16 07:48 .\rdrwxr-xr-x 1 root root 4.0K Oct 4 06:49 ..\r-rw------- 1 root root 3.4K Nov 13 2020 anaconda-ks.cfg\rdrwxr-xr-x 4 root root 4.0K Oct 6 01:50 .android\r-rw------- 1 root root 2.4K Oct 16 08:03 .bash_history\r-rw-r--r-- 1 root root 18 Dec 29 2013 .bash_logout\r-rw-r--r-- 1 root root 176 Dec 29 2013 .bash_profile\r-rw-r--r-- 1 root root 176 Dec 29 2013 .bashrc\rdrwxr-xr-x 3 root root 4.0K Oct 4 06:35 .cache\r-rw-r--r-- 1 root root 100 Dec 29 2013 .cshrc\rdrwxr-xr-x 10 root root 4.0K Oct 6 02:15 .gradle\rdrwxr-xr-x 3 root root 4.0K Oct 4 06:20 .groovy\rdrwxr-xr-x 3 root root 4.0K Oct 4 06:09 .java\rdrwxr-xr-x 3 root root 4.0K Oct 5 06:32 .kotlin\r-rw------- 1 root root 126 Oct 14 07:21 .mysql_history\rdrwxr-xr-x 2 root root 4.0K Oct 16 07:51 .ssh\r-rw-r--r-- 1 root root 129 Dec 29 2013 .tcshrc\r[root@0883a4966fee ~]# ls -lah .ssh/\rtotal 12K\rdrwxr-xr-x 2 root root 4.0K Oct 16 07:51 .\rdr-xr-x--- 1 root root 4.0K Oct 16 07:48 ..\r-rw-r--r-- 1 root root 578 Oct 16 07:49 authorized_keys\r[root@0883a4966fee ~]#\r[root@0883a4966fee ~]# cat .ssh/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/+0+SWT/18/qrClf49vZ8L4HQ2p3ZSkoEQC82UpuuuDf0IPMK5kqKISFTn9QzB+5R0GQ1gXiYQeNhFSvuWi8R5sdDtJbVphaLh/FGxJhah8SAE7w+Y4i7XKsMMuOdFD60IQuvm3qDnlT4B3DMVr31FoThzLdAGWF6DN7l9aKWUPDkWp0YExEYdUJTusdgXe8X6JP4qnb5AiQeOpyopl+VNAf6I7rSFD41IjiaetQpc6cdrMu7nh8yQWM0jr0i7PmzlHMws8k5zvDf52LOKOqfcq1ml9hINB1LsoFoOOpIjoDj/TbXLWCRH3J8s+jPgT50IvDM8wCsEBH0PqY7sJvU2/GRIP7iFZqrb+YFvq9+dStUpnXEfU7hg8D5CFjJAA3svoniyFG9aYCNez/W0kNDW40CZ6ABHEwMkOkee3/hbuX/eP58+zdjbjZ4O8DOLZWz7y7W2ok4BGk2T4PTsNTWk9KgpeiK7OlzAO5SlMEVqz51RBgKMBZMGpSU/kWbK6M= daizelai@GBCOM-20210524I\r[root@0883a4966fee ~]# ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/:2:4","tags":["原创","ssh","远程登录","ssh登录"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/"},{"categories":["原创","ssh"],"content":"2.5.配置普通账号daizelai登录 下面是设置非root账号daizelai的免密码登录。 特别注意：.ssh目录的权限为700，其下文件authorized_keys和私钥的权限为600，否则会因为权限问题导致无法免密码登录。zelai就是因为这个问题一开始怎么也登录不了，后面就如下设置权限就可以登录了。 [daizelai@0883a4966fee .ssh]$ date\rSun Oct 16 08:14:44 UTC 2022\r[daizelai@0883a4966fee .ssh]$ whoami\rdaizelai\r[daizelai@0883a4966fee .ssh]$ pwd\r/home/daizelai/.ssh\r[daizelai@0883a4966fee .ssh]$\r[daizelai@0883a4966fee .ssh]$ cd ..\r[daizelai@0883a4966fee ~]$ ls -lah\rtotal 36K\rdrwx------ 4 daizelai daizelai 4.0K Oct 16 07:26 .\rdrwxr-xr-x 1 root root 4.0K Oct 13 09:58 ..\rdrwxrwxr-x 2 daizelai daizelai 4.0K Oct 14 01:36 aaa\r-rw-rw-r-- 1 daizelai daizelai 4 Oct 14 01:03 a.txt\r-rw------- 1 daizelai daizelai 226 Oct 14 07:22 .bash_history\r-rw-r--r-- 1 daizelai daizelai 18 Apr 1 2020 .bash_logout\r-rw-r--r-- 1 daizelai daizelai 193 Apr 1 2020 .bash_profile\r-rw-r--r-- 1 daizelai daizelai 231 Apr 1 2020 .bashrc\rdrwxrwxr-x 2 daizelai daizelai 4.0K Oct 16 07:53 .ssh\r[daizelai@0883a4966fee ~]$ chmod 700 .ssh\r[daizelai@0883a4966fee ~]$ ls -lah\rtotal 36K\rdrwx------ 4 daizelai daizelai 4.0K Oct 16 07:26 .\rdrwxr-xr-x 1 root root 4.0K Oct 13 09:58 ..\rdrwxrwxr-x 2 daizelai daizelai 4.0K Oct 14 01:36 aaa\r-rw-rw-r-- 1 daizelai daizelai 4 Oct 14 01:03 a.txt\r-rw------- 1 daizelai daizelai 226 Oct 14 07:22 .bash_history\r-rw-r--r-- 1 daizelai daizelai 18 Apr 1 2020 .bash_logout\r-rw-r--r-- 1 daizelai daizelai 193 Apr 1 2020 .bash_profile\r-rw-r--r-- 1 daizelai daizelai 231 Apr 1 2020 .bashrc\rdrwx------ 2 daizelai daizelai 4.0K Oct 16 07:53 .ssh\r[daizelai@0883a4966fee ~]$ cd .ssh\r[daizelai@0883a4966fee .ssh]$ ls -l\rtotal 4\r-rwxrwxrwx 1 daizelai daizelai 578 Oct 16 06:08 authorized_keys\r[daizelai@0883a4966fee .ssh]$ chmod 600 authorized_keys [daizelai@0883a4966fee .ssh]$ ls -l\rtotal 4\r-rw------- 1 daizelai daizelai 578 Oct 16 06:08 authorized_keys\r[daizelai@0883a4966fee ~]$ cd\r[daizelai@0883a4966fee ~]$ pwd\r/home/daizelai\r[daizelai@0883a4966fee ~]$ cat .ssh/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/+0+SWT/18/qrClf49vZ8L4HQ2p3ZSkoEQC82UpuuuDf0IPMK5kqKISFTn9QzB+5R0GQ1gXiYQeNhFSvuWi8R5sdDtJbVphaLh/FGxJhah8SAE7w+Y4i7XKsMMuOdFD60IQuvm3qDnlT4B3DMVr31FoThzLdAGWF6DN7l9aKWUPDkWp0YExEYdUJTusdgXe8X6JP4qnb5AiQeOpyopl+VNAf6I7rSFD41IjiaetQpc6cdrMu7nh8yQWM0jr0i7PmzlHMws8k5zvDf52LOKOqfcq1ml9hINB1LsoFoOOpIjoDj/TbXLWCRH3J8s+jPgT50IvDM8wCsEBH0PqY7sJvU2/GRIP7iFZqrb+YFvq9+dStUpnXEfU7hg8D5CFjJAA3svoniyFG9aYCNez/W0kNDW40CZ6ABHEwMkOkee3/hbuX/eP58+zdjbjZ4O8DOLZWz7y7W2ok4BGk2T4PTsNTWk9KgpeiK7OlzAO5SlMEVqz51RBgKMBZMGpSU/kWbK6M= daizelai@GBCOM-20210524I\r[daizelai@0883a4966fee ~]$ 最好重启ssh服务生效。 [daizelai@0883a4966fee .ssh]$ /bin/systemctl restart sshd.service\r==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===\rAuthentication is required to manage system services or units.\rAuthenticating as: root\rPassword: ==== AUTHENTICATION COMPLETE ===\r[daizelai@0883a4966fee .ssh]$ ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/:2:5","tags":["原创","ssh","远程登录","ssh登录"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/"},{"categories":["原创","ssh"],"content":"2.6.客户端登录效果 下面是在我的台式机客户端上面使用WindTerm配置密钥登录B服务器。 新增ssh连接会话 配置密钥登录 下面是使用WindTerm登录效果 Last login: Sun Oct 16 08:12:48 2022 from gateway\r[daizelai@0883a4966fee ~]$ ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/:2:6","tags":["原创","ssh","远程登录","ssh登录"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/ssh/"},{"categories":["mysql"],"content":"mysql创建用户","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["mysql"],"content":"20221008_1513mysql创建用户 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/:0:0","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["mysql"],"content":"一、描述 by daizelai on 2022/10/08 16:23 创建MYSQL账号的方法记录。 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/:1:0","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["mysql"],"content":"二、创建mysql账号 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/:2:0","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["mysql"],"content":"2.1.使用CREATE USER语句创建新用户 mysql\u003e CREATE USER 'daizelai'@'192.168.42.55' IDENTIFIED BY '123456'; 如果创建失败，提示当前密码不满足策略要求。 修改密码策略 mysql\u003e SELECT @@VALIDATE_PASSWORD_POLICY; mysql\u003e set global validate_password_policy = 0; GRANT ALL ON *.* TO 'daizelai'@'192.168.42.55'; 在 MySQL 中，可以使用 password() 函数获取密码的哈希值，查看 test1 哈希值的 SQL 语句和执行过程如下： mysql\u003e SELECT password('test1'); +-------------------------------------------+ | password('test1') | +-------------------------------------------+ | *06C0BF5B64ECE2F648B5F048A71903906BA08E5C | +-------------------------------------------+ 1 row in set, 1 warning (0.00 sec) 创建用户 test1，SQL 语句和执行过程如下： mysql\u003e CREATE USER 'daizelai'@'192.168.42.55'IDENTIFIED BY PASSWORD '*06C0BF5B64ECE2F648B5F048A71903906BA08E5C'; Query OK, 0 rows affected, 1 warning (0.00 sec) ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/:2:1","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["mysql"],"content":"2.2.使用grant创建新用户 grant select,insert on *.* to 'daizelai'@'192.168.42.55' identified by '123456'; ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/:2:2","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["mysql"],"content":"2.3.直接操作MYSQL用户表 使用CREATE和GRANT的本质都是像USER表中插入一个用户。所以也可以直接在USER表中插入一条数据。 mysql\u003e INSERT INTO mysql.user(Host, User, authentication_string, ssl_cipher, x509_issuer, x509_subject) VALUES ('192.168.42.55', 'daizelai', PASSWORD('password'), '', '', ''); MySQL 5.7 的 user 表中的密码字段从 Password 变成了 authentication_string，如果你使用的是 MySQL 5.7 之前的版本，将 authentication_string 字段替换成 Password 即可。 由于 mysql 数据库的 user 表中，ssl_cipher、x509_issuer 和 x509_subject 这 3 个字段没有默认值，所以向 user 表插入新记录时，一定要设置这 3 个字段的值，否则 INSERT 语句将不能执行。 使用 FLUSH 命令让用户生效 mysql\u003e FLUSH PRIVILEGES; ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/:2:3","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["原创","gm655+","gm605"],"content":"中兴SDK多端口配置的使用记录","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/wzs2/gm605/","tags":["原创","gm655+","gm605","多端口"],"title":"中兴SDK多端口配置的使用记录","uri":"https://daizelai.github.io/posts/wzs2/gm605/"},{"categories":["原创","gm655+","gm605"],"content":"20221011_1049中兴SDK多端口配置的使用记录 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/wzs2/gm605/:0:0","tags":["原创","gm655+","gm605","多端口"],"title":"中兴SDK多端口配置的使用记录","uri":"https://daizelai.github.io/posts/wzs2/gm605/"},{"categories":["原创","gm655+","gm605"],"content":"一、描述 by daizelai on 2022/10/11 10:52 中兴GM605/GM655+多端口配置。 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/wzs2/gm605/:1:0","tags":["原创","gm655+","gm605","多端口"],"title":"中兴SDK多端口配置的使用记录","uri":"https://daizelai.github.io/posts/wzs2/gm605/"},{"categories":["原创","gm655+","gm605"],"content":"二、多端口使用 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/wzs2/gm605/:2:0","tags":["原创","gm655+","gm605","多端口"],"title":"中兴SDK多端口配置的使用记录","uri":"https://daizelai.github.io/posts/wzs2/gm605/"},{"categories":["原创","gm655+","gm605"],"content":"2.1.配置主机telnet访问 多端口配置主机telnet连接。 多端口配置主机telnet连接的操作示例。 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/wzs2/gm605/:2:1","tags":["原创","gm655+","gm605","多端口"],"title":"中兴SDK多端口配置的使用记录","uri":"https://daizelai.github.io/posts/wzs2/gm605/"},{"categories":["原创","gm655+","gm605"],"content":"2.1.配置主机web访问 未配置主机的web多端口时是无法访问主机的web界面的 配置主机web访问的多端口 成功配置主机web访问的多端口效果 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/wzs2/gm605/:2:2","tags":["原创","gm655+","gm605","多端口"],"title":"中兴SDK多端口配置的使用记录","uri":"https://daizelai.github.io/posts/wzs2/gm605/"},{"categories":["原创","android"],"content":"BottomNavigationView菜单调整高度和间距","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"20220930_1657BottomNavigationView菜单调整高度和间距 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:0:0","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"一、描述 by daizelai on 2022/09/30 16:58 关键字：菜单栏间距,温州S2号线菜单调整,BottomNavigationView菜单调整 之前一直困扰许久的问题，BottomNavigationView菜单文件和图片的间距调整不好，然后调度还不知道怎么调整。 今天终于搞定了。 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:1:0","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"二、BottomNavigationView菜单 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:2:0","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"菜单布局 activity_main.xml 路径：\\SH-CityRailway-ZTE\\library_main\\src\\main\\res\\layout\\activity_main.xml - \u003ccom.google.android.material.bottomnavigation.BottomNavigationView - android:id=\"@+id/nav_menu_view\" - android:layout_width=\"450dp\" - android:layout_height=\"100dp\" - android:background=\"#cccccc\" - android:visibility=\"gone\" - android:padding=\"3dp\" - app:elevation=\"500dp\" - app:itemIconSize=\"35dp\" - app:itemTextColor=\"@color/main_bottom_item_text_selector\" - app:labelVisibilityMode=\"labeled\" - app:menu=\"@menu/main_menu\" /\u003e \u003ccom.google.android.material.bottomnavigation.BottomNavigationView android:id=\"@+id/nav_menu_view\" android:layout_width=\"600dp\" android:layout_height=\"wrap_content\" android:padding=\"10dp\" app:itemIconSize=\"45dp\" android:background=\"#cccccc\" app:itemTextAppearanceActive=\"@style/bottom_tab_title_active\" app:itemTextAppearanceInactive=\"@style/bottom_tab_title_inactive\" app:itemTextColor=\"@color/main_bottom_item_text_selector\" app:labelVisibilityMode=\"labeled\" app:menu=\"@menu/main_menu\" /\u003e ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:2:1","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"菜单设置 这里还是和温州S2号线APP一样，没有改变。 路径：\\SH-CityRailway-ZTE\\library_main\\src\\main\\res\\menu\\main_menu.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cmenu xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\"\u003e \u003c!-- 设置了android:icon=\"@drawable/bottom_png_list\"，就不需要BottomNavigationView设置 itemIconTint和itemTextColor 颜色 --\u003e \u003citem android:id=\"@+id/toRirstFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_index_item_selector\" android:title=\"主页\" app:showAsAction=\"never\" /\u003e \u003citem android:id=\"@+id/toSecondFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_call_item_selector\" android:title=\"通话\" app:showAsAction=\"always\" /\u003e \u003citem android:id=\"@+id/toThirdFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_message_item_selector\" android:title=\"消息\" app:showAsAction=\"collapseActionView\" /\u003e \u003citem android:id=\"@+id/toFiveFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_message_item_selector\" android:title=\"调度命令\" app:showAsAction=\"withText\" /\u003e \u003citem android:id=\"@+id/toFourthFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_setting_item_selector\" android:title=\"我的\" app:showAsAction=\"ifRoom\" /\u003e \u003c/menu\u003e main_menu_index_item_selector.xml 路径：\\SH-CityRailway-ZTE\\library_res\\src\\main\\res\\drawable\\main_menu_index_item_selector.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003citem android:drawable=\"@drawable/train_menu_index_active\" android:state_checked=\"true\"\u003e\u003c/item\u003e \u003citem android:drawable=\"@drawable/train_menu_index_normal\" android:state_checked=\"false\"\u003e\u003c/item\u003e \u003c/selector\u003e main_menu_call_item_selector.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003citem android:drawable=\"@drawable/train_menu_call_active\" android:state_checked=\"true\"\u003e\u003c/item\u003e \u003citem android:drawable=\"@drawable/train_menu_call_normal\" android:state_checked=\"false\"\u003e\u003c/item\u003e \u003c/selector\u003e main_menu_message_item_selector.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003citem android:drawable=\"@drawable/train_menu_msg_active\" android:state_checked=\"true\"\u003e\u003c/item\u003e \u003citem android:drawable=\"@drawable/train_menu_msg_normal\" android:state_checked=\"false\"\u003e\u003c/item\u003e \u003c/selector\u003e main_menu_setting_item_selector.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003citem android:drawable=\"@drawable/train_menu_set_active\" android:state_checked=\"true\"\u003e\u003c/item\u003e \u003citem android:drawable=\"@drawable/train_menu_set_normal\" android:state_checked=\"false\"\u003e\u003c/item\u003e \u003c/selector\u003e ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:2:2","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"调整菜单高度【图片和文字间距】 这里的design_bottom_navigation_height可以设置main_menu.xml中的图片和文字的距离，也就是整个菜单高度越高，间距越大。 路径：\\SH-CityRailway-ZTE\\library_res\\src\\main\\res\\values\\dimens.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cresources xmlns:tools=\"http://schemas.android.com/tools\"\u003e \u003c!-- 项目默认文字大小 --\u003e \u003cdimen name=\"defaultTextSize\"\u003e18sp\u003c/dimen\u003e \u003cdimen name=\"textSize22sp\"\u003e22sp\u003c/dimen\u003e \u003c!-- BottomNavigationView修改文字与icon之间的间距 --\u003e \u003c!-- BottomNavigationView设置icon距离上边距的距离 --\u003e \u003cdimen name=\"design_bottom_navigation_margin\" tools:override=\"true\"\u003e6dp\u003c/dimen\u003e \u003c!-- 下面两个是设置TextView的大小：选中时的文字和未选中时的文字大小，保持一样的话，就没有动画了【好像没有起作用，style.xml的bottom_tab_title_active和bottom_tab_title_inactive起作用】 --\u003e \u003cdimen name=\"design_bottom_navigation_active_text_size\" tools:override=\"true\"\u003e18sp\u003c/dimen\u003e \u003cdimen name=\"design_bottom_navigation_text_size\" tools:override=\"true\"\u003e18sp\u003c/dimen\u003e \u003c!-- BottomNavigationView菜单栏-导航栏高度和文字和图片之间的间距，值越大，图片和文字间的距离越大 --\u003e \u003cdimen name=\"design_bottom_navigation_height\"\u003e90dp\u003c/dimen\u003e \u003c/resources\u003e ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:2:3","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"文字样式 路径：\\SH-CityRailway-ZTE\\library_res\\src\\main\\res\\values\\styles.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cresources\u003e \u003c!--BottomNavigationView选中的样式，可以设置选择的字体颜色，这里只是为了改变选择时的字体大小--\u003e \u003cstyle name=\"bottom_tab_title_active\"\u003e \u003citem name=\"android:textSize\"\u003e28sp\u003c/item\u003e \u003citem name=\"android:drawablePadding\"\u003e14dp\u003c/item\u003e \u003c/style\u003e \u003c!--BottomNavigationView没有选中的样式，导航默认的字体大小就是12sp--\u003e \u003cstyle name=\"bottom_tab_title_inactive\"\u003e \u003citem name=\"android:textSize\"\u003e24sp\u003c/item\u003e \u003citem name=\"android:drawablePadding\"\u003e14dp\u003c/item\u003e \u003c/style\u003e \u003c/resources\u003e ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:2:4","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","springboot","项目打包"],"content":"springboot打包自定义文件名","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"一、描述 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:1:0","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"1.1.引言 by daizelai on 2022/10/08 16:59 本文记录一下在对springboot项目进行打包的时候，如何修改生成的文件名称。 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:1:1","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"1.2.默认打包 在springboot项目的根目录下，使用maven打包命令mvn clean package对项目进行打包。 PS D:\\code\\IdeaProjects\\springbootdemo\u003e mvn clean package [INFO] Scanning for projects... Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/2.1.3.RELEASE/spring-boot-starter-parent-2.1.3.RELEASE.pom Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/2.1.3.RELEASE/spring-boot-starter-parent-2.1.3.RELEASE.pom (12 kB at 10 kB/s) ...... [INFO] Replacing main artifact with repackaged archive [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 01:45 min [INFO] Finished at: 2022-10-08T16:31:28+08:00 [INFO] ------------------------------------------------------------------------ PS D:\\code\\IdeaProjects\\springbootdemo\u003e 打包完成之后，生成如下文件： D:\\code\\IdeaProjects\\springbootdemo\\target\u003edir 驱动器 D 中的卷是 新加卷 卷的序列号是 8AC9-706C D:\\code\\IdeaProjects\\springbootdemo\\target 的目录 2022/10/08 16:51 \u003cDIR\u003e . 2022/10/08 16:51 \u003cDIR\u003e .. 2022/10/08 16:51 \u003cDIR\u003e classes 2022/10/08 16:51 \u003cDIR\u003e generated-sources 2022/10/08 16:51 \u003cDIR\u003e generated-test-sources 2022/10/08 16:51 \u003cDIR\u003e maven-archiver 2022/10/08 16:51 \u003cDIR\u003e maven-status 2022/10/08 16:51 39,623,979 springbootdemo-0.0.1-SNAPSHOT.jar 2022/10/08 16:51 30,305 springbootdemo-0.0.1-SNAPSHOT.jar.original 2022/10/08 16:51 \u003cDIR\u003e test-classes 2 个文件 39,654,284 字节 8 个目录 14,321,639,424 可用字节 D:\\code\\IdeaProjects\\springbootdemo\\target\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:1:2","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"二、自定义打包文件名 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:2:0","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"2.1.配置打包文件名 在build节点下增加finalName节点，内容就是文件名称。 \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cbuild\u003e + \u003cfinalName\u003ewzs2_station_broadcast_v0.0.2\u003c/finalName\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-maven-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003cfork\u003etrue\u003c/fork\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003cplugin\u003e\u003c!-- 跳过单元测试 --\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-surefire-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003cskipTests\u003etrue\u003c/skipTests\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003c/project\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:2:1","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"2.2.打包 再次编译 PS D:\\code\\IdeaProjects\\springbootdemo\u003e mvn clean package\r[INFO] Scanning for projects...\r[INFO] [INFO] -----------------\u003c cn.itcss.springboot:springbootdemo \u003e-----------------\r[INFO] Building springbootdemo 0.0.1-SNAPSHOT\r[INFO] --------------------------------[ jar ]---------------------------------\r[INFO] [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ springbootdemo ---\r[INFO] Deleting D:\\code\\IdeaProjects\\springbootdemo\\target\r[INFO] [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ springbootdemo ---\r[INFO] Using 'UTF-8' encoding to copy filtered resources.\r[INFO] Copying 4 resources\r[INFO] Copying 2 resources\r[INFO] [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ springbootdemo ---\r[INFO] Changes detected - recompiling the module!\r[INFO] Compiling 25 source files to D:\\code\\IdeaProjects\\springbootdemo\\target\\classes\r[INFO] /D:/code/IdeaProjects/springbootdemo/src/main/java/cn/itcss/springboot/filter/FilterConfig.java: D:\\code\\IdeaProjects\\springbootdemo\\src\\main\\java\\cn\\itcss\\springboot\\filter\\FilterConfig.java使用了未经检查或不安全的操作。\r[INFO] /D:/code/IdeaProjects/springbootdemo/src/main/java/cn/itcss/springboot/filter/FilterConfig.java: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。\r[INFO]\r[INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ springbootdemo ---\r[INFO] Using 'UTF-8' encoding to copy filtered resources.\r[INFO] skip non existing resourceDirectory D:\\code\\IdeaProjects\\springbootdemo\\src\\test\\resources\r[INFO]\r[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ springbootdemo ---\r[INFO] Changes detected - recompiling the module!\r[INFO] Compiling 1 source file to D:\\code\\IdeaProjects\\springbootdemo\\target\\test-classes\r[INFO] [INFO] --- maven-surefire-plugin:2.22.1:test (default-test) @ springbootdemo ---\r[INFO]\r[INFO] --- maven-jar-plugin:3.1.1:jar (default-jar) @ springbootdemo ---\r[INFO] Building jar: D:\\code\\IdeaProjects\\springbootdemo\\target\\wzs2_station_broadcast_v0.0.2.jar\r[INFO]\r[INFO] --- spring-boot-maven-plugin:2.1.3.RELEASE:repackage (repackage) @ springbootdemo ---\r[INFO] Replacing main artifact with repackaged archive\r[INFO] ------------------------------------------------------------------------\r[INFO] BUILD SUCCESS\r[INFO] ------------------------------------------------------------------------\r[INFO] Total time: 2.298 s\r[INFO] Finished at: 2022-10-08T16:52:12+08:00\r[INFO] ------------------------------------------------------------------------\rPS D:\\code\\IdeaProjects\\springbootdemo\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:2:2","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"2.4.打包的文件名 我们再来看一下打包的文件，文件名称已经修改成wzs2_station_broadcast_v0.0.2.jar了。 PS D:\\code\\IdeaProjects\\springbootdemo\u003e dir target\r目录: D:\\code\\IdeaProjects\\springbootdemo\\target\rMode LastWriteTime Length Name\r---- ------------- ------ ----\rd----- 2022/10/8 16:52 classes\rd----- 2022/10/8 16:52 generated-sources\rd----- 2022/10/8 16:52 generated-test-sources\rd----- 2022/10/8 16:52 maven-archiver\rd----- 2022/10/8 16:52 maven-status\rd----- 2022/10/8 16:52 test-classes\r-a---- 2022/10/8 16:52 39624014 wzs2_station_broadcast_v0.0.2.jar\r-a---- 2022/10/8 16:52 30340 wzs2_station_broadcast_v0.0.2.jar.original\rPS D:\\code\\IdeaProjects\\springbootdemo\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:2:3","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"三、渠道打包 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:3:0","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"3.1.修改配置 修改pom.xml配置 \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e ...... + \u003cprofiles\u003e + \u003cprofile\u003e + \u003cid\u003edev\u003c/id\u003e + \u003cproperties\u003e + \u003cpackage.environment\u003edev\u003c/package.environment\u003e + \u003c/properties\u003e + \u003c!-- 是否默认,true表示默认 --\u003e + \u003cactivation\u003e + \u003cactiveByDefault\u003etrue\u003c/activeByDefault\u003e + \u003c/activation\u003e + \u003c/profile\u003e + \u003cprofile\u003e + \u003cid\u003etest\u003c/id\u003e + \u003cproperties\u003e + \u003cpackage.environment\u003etest\u003c/package.environment\u003e + \u003c/properties\u003e + \u003c/profile\u003e + \u003c/profiles\u003e ...... \u003cbuild\u003e + \u003cfinalName\u003ewzs2_station_broadcast_v0.0.2_-${package.environment}\u003c/finalName\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-maven-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003cfork\u003etrue\u003c/fork\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003cplugin\u003e\u003c!-- 跳过单元测试 --\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-surefire-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003cskipTests\u003etrue\u003c/skipTests\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003c/project\u003e 修改yml配置 此处用@标签@，中间的标签位置就是pom文件中包围名称的标签 # 开发环境 server: port: 8086 tomcat: uri-encoding: utf-8 spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.13.177:3306/giedu # url: jdbc:mysql://127.0.0.1:3306/giedu username: springboot password: 123456 jpa: show-sql: true database-platform: org.hibernate.dialect.MySQL5InnoDBDialect hibernate: ddl-auto: update + profiles: + active: @package.environment@ boy: id: 1 name: lai sex: male age: 18 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:3:1","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"3.2.打包 使用命令mvn clean package -Pdev进行打包。 在打包时使用mvn clean package -Pdev即指定打包dev配置文件的项目，生成包的名称应为：项目名-服务名-dev PS D:\\code\\IdeaProjects\\springbootdemo\u003e date 2022年10月8日 17:06:10 PS D:\\code\\IdeaProjects\\springbootdemo\u003e mvn clean package -Pdev [INFO] Scanning for projects... [INFO] [INFO] -----------------\u003c cn.itcss.springboot:springbootdemo \u003e----------------- [INFO] Building springbootdemo 0.0.1-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO] [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ springbootdemo --- [INFO] Deleting D:\\code\\IdeaProjects\\springbootdemo\\target [INFO] [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ springbootdemo --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 4 resources [INFO] Copying 2 resources [INFO] [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ springbootdemo --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 25 source files to D:\\code\\IdeaProjects\\springbootdemo\\target\\classes [INFO] /D:/code/IdeaProjects/springbootdemo/src/main/java/cn/itcss/springboot/filter/FilterConfig.java: D:\\code\\IdeaProjects\\springbootdemo\\src\\main\\java\\cn\\itcss\\springboot\\filter\\FilterConfig.java使用了未经检查或不安全的操作。 [INFO] /D:/code/IdeaProjects/springbootdemo/src/main/java/cn/itcss/springboot/filter/FilterConfig.java: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。 [INFO] [INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ springbootdemo --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory D:\\code\\IdeaProjects\\springbootdemo\\src\\test\\resources [INFO] [INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ springbootdemo --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 1 source file to D:\\code\\IdeaProjects\\springbootdemo\\target\\test-classes [INFO] [INFO] --- maven-surefire-plugin:2.22.1:test (default-test) @ springbootdemo --- [INFO] Tests are skipped. [INFO] [INFO] --- maven-jar-plugin:3.1.1:jar (default-jar) @ springbootdemo --- [INFO] Building jar: D:\\code\\IdeaProjects\\springbootdemo\\target\\wzs2_station_broadcast_v0.0.2_-dev.jar [INFO] [INFO] --- spring-boot-maven-plugin:2.1.3.RELEASE:repackage (repackage) @ springbootdemo --- [INFO] Replacing main artifact with repackaged archive [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.472 s [INFO] Finished at: 2022-10-08T17:06:24+08:00 [INFO] ------------------------------------------------------------------------ PS D:\\code\\IdeaProjects\\springbootdemo\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:3:2","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"3.3.打包的文件 Microsoft Windows [版本 10.0.19044.2006]\r(c) Microsoft Corporation。保留所有权利。\rD:\\code\\IdeaProjects\\springbootdemo\\target\u003edate\r当前日期: 2022/10/08 周六\r输入新日期: (年月日)\rD:\\code\\IdeaProjects\\springbootdemo\\target\u003edir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 8AC9-706C\rD:\\code\\IdeaProjects\\springbootdemo\\target 的目录\r2022/10/08 17:06 \u003cDIR\u003e .\r2022/10/08 17:06 \u003cDIR\u003e ..\r2022/10/08 17:06 \u003cDIR\u003e classes\r2022/10/08 17:06 \u003cDIR\u003e generated-sources\r2022/10/08 17:06 \u003cDIR\u003e generated-test-sources\r2022/10/08 17:06 \u003cDIR\u003e maven-archiver\r2022/10/08 17:06 \u003cDIR\u003e maven-status\r2022/10/08 17:06 \u003cDIR\u003e test-classes\r2022/10/08 17:06 39,624,168 wzs2_station_broadcast_v0.0.2_-dev.jar\r2022/10/08 17:06 30,494 wzs2_station_broadcast_v0.0.2_-dev.jar.original\r2 个文件 39,654,662 字节\r8 个目录 14,319,632,384 可用字节\rD:\\code\\IdeaProjects\\springbootdemo\\target\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:3:3","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"四、打包时的FAILURE问题 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:4:0","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"4.1.mvn打包遇到FAILURE FAILURE错误如下所示： PS D:\\code\\IdeaProjects\\springbootdemo\u003e mvn clean package -Pprod\r[INFO] Scanning for projects...\r[INFO] [INFO] -----------------\u003c cn.itcss.springboot:springbootdemo \u003e-----------------\r[INFO] Building springbootdemo 0.0.1-SNAPSHOT [INFO] --------------------------------[ jar ]---------------------------------\r[INFO] [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ springbootdemo ---\r[INFO] Deleting D:\\code\\IdeaProjects\\springbootdemo\\target\r[INFO] ------------------------------------------------------------------------\r[INFO] BUILD FAILURE\r[INFO] ------------------------------------------------------------------------\r[INFO] Total time: 1.648 s\r[INFO] Finished at: 2022-10-08T18:12:38+08:00\r[INFO] ------------------------------------------------------------------------\r[WARNING] The requested profile \"prod\" could not be activated because it does not exist.\r[ERROR] Failed to execute goal org.apache.maven.plugins:maven-clean-plugin:3.1.0:clean (default-clean) on project springbootdemo: Failed to clean project: Failed to delete D:\\code\\IdeaProjects\\springbootdemo\\target -\u003e [Help 1]\r[ERROR]\r[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\r[ERROR] Re-run Maven using the -X switch to enable full debug logging.\r[ERROR]\r[ERROR] For more information about the errors and possible solutions, please read the following articles:\r[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\rPS D:\\code\\IdeaProjects\\springbootdemo\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:4:1","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"4.2.问题解决 cmd命令行占用target目录，这样的话，使用mvn命令打包时会失败。 解决办法很简单，关闭此cmd窗口就可以了。 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:4:2","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"4.3.打包成功 PS D:\\code\\IdeaProjects\\springbootdemo\u003e mvn clean package -Pprod\r[INFO] Scanning for projects...\r[INFO] [INFO] -----------------\u003c cn.itcss.springboot:springbootdemo \u003e-----------------\r[INFO] Building springbootdemo 0.0.1-SNAPSHOT\r[INFO] --------------------------------[ jar ]---------------------------------\r[INFO] [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ springbootdemo ---\r[INFO] Deleting D:\\code\\IdeaProjects\\springbootdemo\\target\r[INFO] [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ springbootdemo ---\r[INFO] Using 'UTF-8' encoding to copy filtered resources.\r[INFO] Copying 4 resources\r[INFO] Copying 2 resources\r[INFO] [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ springbootdemo ---\r[INFO] Changes detected - recompiling the module!\r[INFO] Compiling 25 source files to D:\\code\\IdeaProjects\\springbootdemo\\target\\classes\r[INFO] /D:/code/IdeaProjects/springbootdemo/src/main/java/cn/itcss/springboot/filter/FilterConfig.java: D:\\code\\IdeaProjects\\springbootdemo\\src\\main\\java\\cn\\itcss\\springboot\\filter\\FilterConfig.java使用了未经检查或不安全的操作。\r[INFO] /D:/code/IdeaProjects/springbootdemo/src/main/java/cn/itcss/springboot/filter/FilterConfig.java: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。\r[INFO]\r[INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ springbootdemo ---\r[INFO] Using 'UTF-8' encoding to copy filtered resources.\r[INFO] skip non existing resourceDirectory D:\\code\\IdeaProjects\\springbootdemo\\src\\test\\resources\r[INFO]\r[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ springbootdemo ---\r[INFO] Changes detected - recompiling the module!\r[INFO] Compiling 1 source file to D:\\code\\IdeaProjects\\springbootdemo\\target\\test-classes\r[INFO] [INFO] --- maven-surefire-plugin:2.22.1:test (default-test) @ springbootdemo ---\r[INFO] Tests are skipped.\r[INFO] [INFO] --- maven-jar-plugin:3.1.1:jar (default-jar) @ springbootdemo ---\r[INFO] Building jar: D:\\code\\IdeaProjects\\springbootdemo\\target\\wzs2_station_broadcast_v0.0.2_-dev.jar\r[INFO] [INFO] --- spring-boot-maven-plugin:2.1.3.RELEASE:repackage (repackage) @ springbootdemo ---\r[INFO] Replacing main artifact with repackaged archive\r[INFO] ------------------------------------------------------------------------\r[INFO] BUILD SUCCESS\r[INFO] ------------------------------------------------------------------------\r[INFO] Total time: 2.379 s\r[INFO] Finished at: 2022-10-08T18:13:46+08:00\r[INFO] ------------------------------------------------------------------------\r[WARNING] The requested profile \"prod\" could not be activated because it does not exist.\rPS D:\\code\\IdeaProjects\\springbootdemo\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:4:3","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","linux"],"content":"搜索查找记录","date":"2022-08-19","objectID":"https://daizelai.github.io/posts/linux/linuxsearch/","tags":["原创","linux","linux搜索"],"title":"搜索查找记录","uri":"https://daizelai.github.io/posts/linux/linuxsearch/"},{"categories":["原创","linux"],"content":"搜索查找记录 ","date":"2022-08-19","objectID":"https://daizelai.github.io/posts/linux/linuxsearch/:0:0","tags":["原创","linux","linux搜索"],"title":"搜索查找记录","uri":"https://daizelai.github.io/posts/linux/linuxsearch/"},{"categories":["原创","linux"],"content":"一、描述 by daizelai on 2021/08/19 16:08 在SC60中搜索和查找相关文件。 关键字：日志搜索、搜索日志、linux搜索 ","date":"2022-08-19","objectID":"https://daizelai.github.io/posts/linux/linuxsearch/:1:0","tags":["原创","linux","linux搜索"],"title":"搜索查找记录","uri":"https://daizelai.github.io/posts/linux/linuxsearch/"},{"categories":["原创","linux"],"content":"二、在文件内容中查找 $ grep \"code\" -rni ./\r$ grep \"sdcard u:object_r:rootfs:s0\" -nr ./system/\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ grep \"code\" -rni ./\r./kernel/msm-3.18/kernel/power/snapshot.c:837: * initialization code)\r./kernel/msm-3.18/kernel/power/snapshot.c:1880: info-\u003eversion_code = LINUX_VERSION_CODE; ","date":"2022-08-19","objectID":"https://daizelai.github.io/posts/linux/linuxsearch/:2:0","tags":["原创","linux","linux搜索"],"title":"搜索查找记录","uri":"https://daizelai.github.io/posts/linux/linuxsearch/"},{"categories":["原创","linux"],"content":"四、gpio查找 gpio查找其实也是在文件内容中查找。 # grep -rn \"gpio99\" kernel/msm-3.18/arch/arm64/boot/dts/qcom/\r# grep -rn \"tlmm 99\" kernel/msm-3.18/arch/arm64/boot/dts/qcom/\r# grep -rn \"\u0026msm_gpio\" kernel/msm-3.18/arch/arm64/boot/dts/qcom/ 查找示例： $ grep -rn \"gpio99\" kernel/msm-3.18/arch/arm64/boot/dts/qcom/\rkernel/msm-3.18/arch/arm64/boot/dts/qcom/msm8953-pinctrl.dtsi:470: /*pins = \"gpio99\";*/\rkernel/msm-3.18/arch/arm64/boot/dts/qcom/msm8953-pinctrl.dtsi:475: /*pins = \"gpio99\";*/\rkernel/msm-3.18/arch/arm64/boot/dts/qcom/msm8953-pinctrl.dtsi:936: /*pins = \"gpio98\", \"gpio99\";*/\rkernel/msm-3.18/arch/arm64/boot/dts/qcom/msm8953-pinctrl.dtsi:942: /*pins = \"gpio98\", \"gpio99\";*/\rkernel/msm-3.18/arch/arm64/boot/dts/qcom/msm8953-pinctrl.dtsi:951: /*pins = \"gpio98\", \"gpio99\";*/\rkernel/msm-3.18/arch/arm64/boot/dts/qcom/msm8953-pinctrl.dtsi:957: /*pins = \"gpio98\", \"gpio99\";*/\r$ ","date":"2022-08-19","objectID":"https://daizelai.github.io/posts/linux/linuxsearch/:3:0","tags":["原创","linux","linux搜索"],"title":"搜索查找记录","uri":"https://daizelai.github.io/posts/linux/linuxsearch/"},{"categories":["原创","linux"],"content":"五、文件查找 查找 # find . -name Android.mk 按文件类型查找： # find ./device/qcom/ -type f -name splash.img\r./device/qcom/common/display/logo/splash.img\r./device/qcom/common/display/gbcom/splash.img\r# 示例： # find ./vendor/ -type f -name generate_extra_images.mk ./vendor/qcom/build/tasks/generate_extra_images.mk\r# ","date":"2022-08-19","objectID":"https://daizelai.github.io/posts/linux/linuxsearch/:4:0","tags":["原创","linux","linux搜索"],"title":"搜索查找记录","uri":"https://daizelai.github.io/posts/linux/linuxsearch/"},{"categories":["java","bit"],"content":"Java位运算","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"Java位运算（按位与、按位或、异或） ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:0:0","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"一、位运算 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:1:0","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"1.1.描述 位即二进制位或bit位 所有运算到计算中底层中都会变成位运算，位运算可以提高程序的效率,而且我们在研究JDK或者某个框架的源码时，会发现很多地方都用到了位运算！ 例如我们在对数组进行排序时会大量用到交换两个数的值，如何提高排序效率呢 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:1:1","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"1.2.用第三者 /** * 通过第三个变量交换 */ public static void exchangeNumByTemp(int num1, int num2){ // 创建第三个临时变量 int temp = num1; num1 = num2; num2 = temp; } ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:1:2","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"1.3.用按位异或 /** * 通过按位异或交换 */ public static void exchangeNumByXor(int num1, int num2){ num1 = num1 ^ num2; num2 = num1 ^ num2; num1 = num1 ^ num2; } 用按位异或的效率要高于前者。 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:1:3","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"二、位运算符的种类 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:2:0","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"2.2.运算符列表 1.\u0026：按位与 2.|：按位或 3.^：按位异或 4.~：按位取反 5.«：左移 6.»：右移 7.»\u003e：无符号右移 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:2:1","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"三、常用位运算解析 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:0","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.1.按位与（\u0026） 参加运算的两个数，按二进制位进行与运算。 运算规则：两个数的二进制同为1，结果才为1，否则为0 负数按照补码形式进行与运算 即0 \u0026 0 = 0,0 \u0026 1 = 0,1 \u0026 1 = 1 例如：3 \u0026 5 0011 \u0026 0101 = 0001 所以3\u00265的值为1 示例2： 定义：针对二进制，只要有一个为0，就为0。 2 \u0026 5 = 0 2的二进制：00000000 00000000 00000000 00000010 5的二进制：00000000 00000000 00000000 00000101 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:1","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.2.按位或运算符（|） 参加运算的两个数，按二进制位进行或运算 运算规则：两个数的二进制只要一个为1就为1 即0 | 0 = 0,0 | 1 = 1,1 | 1 = 1 例如：3 | 5 0011 | 0101 = 0111 所以3|5的值为7 示例2: 定义：针对二进制，只要有一个为1，就为1。 2 | 5 = 7 2的二进制：00000000 00000000 00000000 00000010 5的二进制：00000000 00000000 00000000 00000101 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:2","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.3.异或运算符（^） 参加运算的两个数，按二进制位进行异或运算 运算规则：两个数的二进制值不同，结果为1 即0 ^ 0 = 0,0 ^ 1 = 1,1 ^ 1 = 0 例如：3 ^ 5 0011 ^ 0101 = 0110 所以3^5的值为6 示例2： 定义：针对二进制，相同的为0，不同的为1。 2 ^ 5 = 7 2的二进制：00000000 00000000 00000000 00000010 5的二进制：00000000 00000000 00000000 00000101 2 ^ 3 = 1 2的二进制：00000000 00000000 00000000 00000010 3的二进制：00000000 00000000 00000000 00000011 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:3","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.4.~(按位非) 定义：按位取反运算符翻转操作数的每一位，即0变成1，1变成0。 ~8 = -9 8的二进制：00000000 00000000 00000000 00000100 ~8的二进制：11111111 11111111 11111111 11110111 因为高位是1，所以该数为负数。负数的补码是其绝对值的原码取反，末尾再加1。 末尾减1得反码：11111111 11111111 11111111 11110110 将反码取反：00000000 00000000 00000000 00001001 = 9 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:4","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.5.«(向左位移) 定义：针对二进制，转换成二进制后向左移动3位，后面用0补齐。 3 « 1 = 6 3的二进制：00000000 00000000 00000000 00000011 3左移后进制数：00000000 00000000 00000000 00000110 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:5","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.6.»(向右位移) 定义：针对二进制，转换成二进制后向右移动3位。 3 » 1 = 1 3的二进制：00000000 00000000 00000000 00000011 3右移后进制数：00000000 00000000 00000000 00000001 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:6","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.7.»\u003e(无符号右移) 定义：忽略符号位，空位都以0补齐。 -1 »\u003e 1 = 2147483647 -1的二进制(补码表示法)：11111111 11111111 11111111 11111111 右移后：01111111 11111111 11111111 11111111 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:7","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["原创","windows10","NTP服务器"],"content":"windows10搭建本地NTP服务器","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/winddows/windowsntp/","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/winddows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"windows10搭建本地NTP服务器 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/winddows/windowsntp/:0:0","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/winddows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"一、描述 因二开业务需要，将在本地Windows10笔记本上面搭建一个本地NTP服务器，用于车载台SC60终端中的车载台APP的NTP时间同步服务器。 by daizelai on 2021/12/1 11:03 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/winddows/windowsntp/:1:0","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/winddows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"二、搭建 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/winddows/windowsntp/:2:0","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/winddows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.1.启用NTP服务器 先打开注册表，使用win+r命令并输入regedit。 打开注册表[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer] Enabled值修改为1，这里默认值为0，1为启用NTP服务器。 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/winddows/windowsntp/:2:1","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/winddows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.2.修改时间源可靠性 打开注册表中[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\Config\\AnnounceFlags] 把AnnounceFlags默认的值10修改为5，5的意思就是自身为可靠的时间源，注意这里的10是十进制，如果是十六进制的话是字母a。 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/winddows/windowsntp/:2:2","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/winddows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.3.设置NTP服务器为开机启动 使用Win+r命令打开服务窗口，输入services.msc，找到Windows Time服务，启动并设置开机启动 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/winddows/windowsntp/:2:3","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/winddows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.4.重启NTP服务 使用快捷键Win+X，打开Windows PowerShell(管理员)，然后输入命令重启NTP服务器，让修改生效。 Windows PowerShell\r版权所有 (C) Microsoft Corporation。保留所有权利。\r尝试新的跨平台 PowerShell https://aka.ms/pscore6\rPS C:\\WINDOWS\\system32\u003e net stop w32time\rWindows Time 服务正在停止.\rWindows Time 服务已成功停止。\rPS C:\\WINDOWS\\system32\u003e net start w32time\rWindows Time 服务正在启动 .\rWindows Time 服务已经启动成功。\rPS C:\\WINDOWS\\system32\u003e 当然也可以直接在services.msc服务窗口，停止启动NTP服务。 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/winddows/windowsntp/:2:4","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/winddows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.5.检测命令 检测命令 w32tm /stripchart /computer:ntp_server_address 检测NTP服务器是否可用。 PS C:\\WINDOWS\\system32\u003e w32tm /stripchart /computer:127.0.0.1\r正在跟踪 127.0.0.1 [127.0.0.1:123]。\r当前时间是 2021/12/1 10:57:53。\r10:57:53, d:+00.0002170s o:+00.0000605s [ * ]\rPS C:\\WINDOWS\\system32\u003e w32tm /stripchart /computer:192.168.42.139\r正在跟踪 192.168.42.139 [192.168.42.139:123]。\r当前时间是 2021/12/1 10:58:00。\r10:58:00, d:+00.0001460s o:+00.0000538s [ * ]\r10:58:02, d:+00.0005158s o:+00.0001161s [ * ]\r10:58:04, d:+00.0002701s o:+00.0000668s [ * ]\r10:58:06, d:+00.0002298s o:+00.0000449s [ * ]\rPS C:\\WINDOWS\\system32\u003e ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/winddows/windowsntp/:2:5","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/winddows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.6.配置防火墙 在实际使用当中，发现SC60车载台APP中并不能请求到本地的NTP服务器以获取时间，这个时间只需要配置一条防火墙规则就可以了。 控制面板—\u003e系统和安全—\u003ewindows防火墙—\u003e高级设置—\u003e入站规则(右键)—\u003e新建规则—\u003e端口—\u003e下一步—-\u003eUDP—-\u003e特定本地端口：123(不要换别的) 一直点下一步，直到下面这个页面填写名称：NTP，完成。 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/winddows/windowsntp/:2:6","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/winddows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.7.其它机器进行验证 这个是其它linux服务器使用这个NTP进行时间校准使用的。 # ntpdate -u 192.168.42.139 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/winddows/windowsntp/:2:7","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/winddows/windowsntp/"},{"categories":["原创","excel"],"content":"设置excel单元格下拉框过程记录","date":"2021-05-31","objectID":"https://daizelai.github.io/posts/winddows/excel/","tags":["原创","excel","excel下拉框"],"title":"设置excel单元格下拉框","uri":"https://daizelai.github.io/posts/winddows/excel/"},{"categories":["原创","excel"],"content":"设置excel单元格下拉框 ","date":"2021-05-31","objectID":"https://daizelai.github.io/posts/winddows/excel/:0:0","tags":["原创","excel","excel下拉框"],"title":"设置excel单元格下拉框","uri":"https://daizelai.github.io/posts/winddows/excel/"},{"categories":["原创","excel"],"content":"一、描述 by daizelai on 2021/05/31 09:36 在excel中设置单元格下拉框。 ","date":"2021-05-31","objectID":"https://daizelai.github.io/posts/winddows/excel/:1:0","tags":["原创","excel","excel下拉框"],"title":"设置excel单元格下拉框","uri":"https://daizelai.github.io/posts/winddows/excel/"},{"categories":["原创","excel"],"content":"二、设置excel单元格下拉框文字选择 选中要设置下拉框的单元格，点击数据–\u003e有效性。 设置标签页面配置下拉选项，允许处设置“序列”，来源设置下拉选项为“通过,不通过”。 ","date":"2021-05-31","objectID":"https://daizelai.github.io/posts/winddows/excel/:2:0","tags":["原创","excel","excel下拉框"],"title":"设置excel单元格下拉框","uri":"https://daizelai.github.io/posts/winddows/excel/"},{"categories":["原创","excel"],"content":"三、设置excel单元格下拉框文字颜色 选中要设置下拉框的单元格，设置下拉选项的颜色，点击开始–\u003e条件格式–\u003e突出显示单元格规则–\u003e文本包含。 文版包含中有设置字体颜色，填充颜色，边框颜色。 ","date":"2021-05-31","objectID":"https://daizelai.github.io/posts/winddows/excel/:3:0","tags":["原创","excel","excel下拉框"],"title":"设置excel单元格下拉框","uri":"https://daizelai.github.io/posts/winddows/excel/"},{"categories":["原创","room","数据库"],"content":"快速解决room升级数据库添加新表SQL语句冲突问题","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"一、描述 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:1:0","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"1.1.前言 创建一张ROOM新表在升级数据库解决冲突问题。 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:1:1","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"1.2.表实体类 调度命令DispatchOrder表实体类。 package com.gbcom.library_base.db import androidx.room.ColumnInfo import androidx.room.Entity import androidx.room.PrimaryKey /** * 调度命令表 * @author daizelai@gbcom.com.cn * @date 2022/09/29 13:45 */ @Entity(tableName = \"metro_dispatch_order\") data class DispatchOrder( /** * 主键 */ @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") val id: Long = 0 ) { /** * 发令处所编号 */ @ColumnInfo(name = \"sender_id\") var senderID: Int = 0 /** * 发令人姓名 */ @ColumnInfo(name = \"sender\") var sender: String? = null /** * 调度命令内容 */ @ColumnInfo(name = \"order_info\") var orderInfo: String? = null /** * 调度命令编号,不到6位时后面补空格 */ @ColumnInfo(name = \"order_no\") var orderNo: Int = 0 /** * 总包数 */ @ColumnInfo(name = \"total_pkg_num\") var totalPkgNum: Int = 0 /** * 本包号 */ @ColumnInfo(name = \"pkg_index\") var pkgIndex: Int = 0 /** * 消息类型：默认为0为工单调度命令 */ @ColumnInfo(name = \"type\") var type: Int = 0 /** * 置顶:默认 * 0不置顶，1已置顶 */ @ColumnInfo(name = \"to_top\") var toTop: Int = 0 /** * 创建时间 */ @ColumnInfo(name = \"create_time\") var createTime: Long = 0 /** * 浏览状态：先放上来，后面看需求是否需要实现，0未读，1已读，2回执状态，工单才有回执状态 */ @ColumnInfo(name = \"status\") var status: Int = 0 /** * 确保唯一性，每台设备的登录用户只看到这个IdentityID的那些记录 // @Ignore表示不想持久化 */ @ColumnInfo(name = \"identity_id\") var identityID: String = \"\" override fun toString(): String { return \"DispatchOrder(id=$id, senderID=$senderID, sender=$sender, orderInfo=$orderInfo, orderNo=$orderNo, totalPkgNum=$totalPkgNum, pkgIndex=$pkgIndex, type=$type, toTop=$toTop, createTime=$createTime, status=$status, identityID='$identityID')\" } } ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:1:2","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"二、升级数据库 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:2:0","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"2.1.卸载设备APK PS C:\\Users\\daizelai\u003e adb uninstall com.gbcom.metrosystem Success PS C:\\Users\\daizelai\u003e ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:2:1","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"2.2.清除数据 手动在设备中，设置应用中找到中兴车台Demo，停止应用，清除数据。 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:2:2","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"2.3.使用上一个数据库版本 2.3.1.版本号回退上一个版本 如果当前想要添加一个调度命令表，那么数据库就要进行升级，数据库版本号由7修改为8，但由于冲突，先让version版本号保持在未升级前的7。 package com.gbcom.library_base.db /** * 项目数据表 * @author daizelai@gbcom.com.cn * @date 2021/10/26 13:28 */ @Database( entities = [AppConfig::class, Ats::class, StationAts::class, DisCfg::class, PredefinedSMS::class, TrainBrdGroup::class, TrainPos::class, Station::class, StationBrdZone::class, Call::class, Message::class, SelfTest:: class, Log::class, FileInfo::class], version = 7, exportSchema = false ) abstract class AppDatabase : RoomDatabase() { ...... } **当应用清除数据库，把新添加的表实体类配置进来，然后运行APP，这个时候运行APP后，新添加的表就已经创建好了。**后面可以把APP的数据库导出去，通过Navicat等工具导出SQL。 package com.gbcom.library_base.db /** * 项目数据表 * @author daizelai@gbcom.com.cn * @date 2021/10/26 13:28 */ @Database( entities = [AppConfig::class, Ats::class, StationAts::class, DisCfg::class, PredefinedSMS::class, TrainBrdGroup::class, TrainPos::class, Station::class, StationBrdZone::class, Call::class, Message::class, SelfTest:: class, Log::class, FileInfo::class, DispatchOrder::class], version = 7, exportSchema = false ) abstract class AppDatabase : RoomDatabase() { ...... } 2.3.2.注释刚刚写好的升级语句 如果已经写好了数据加升级语句 /** * 调度命令 * @author daizelai@gbcom.com.cn * @date 2022/09/29 15:30 */ // abstract fun dispatchOrderDao(): DispatchOrderDao 2.3.3.注释调用此Dao的地方 package com.gbcom.library_base.udp /** * 与主机API接口交互类 * @author daizelai * @date 2021/12/01 11:35 */ class MasterApiReceive private constructor() { ...... /** * DBA转发APP调度命令 * @author daizelai@gbcom.com.cn * @date 2022/09/28 19:12 */ private fun parseCirSendDispatchOrderData(data: String) { try { val moshi: Moshi = Moshi.Builder().build() val jsonAdapter = moshi.adapter(MasterCirDispatchOrder::class.java) val mMasterData = jsonAdapter.fromJson(\"\"\"$data\"\"\") mMasterData?.let { Log.d(TAG, \"parseCirSendDispatchOrderData: data=\" + it.msgInfo.toString()) } val dispatchOrder = DispatchOrder() mMasterData?.msgInfo?.let { dispatchOrder.senderID = it.senderID dispatchOrder.sender = it.sender dispatchOrder.orderInfo = it.orderInfo dispatchOrder.orderNo = it.orderNo dispatchOrder.totalPkgNum = it.totalPkgNum dispatchOrder.pkgIndex = it.pkgIndex dispatchOrder.type = 0 dispatchOrder.toTop = 0 dispatchOrder.createTime = DateUtils.getCurrentTimeMillis() // 默认为未回执 dispatchOrder.status = 0 dispatchOrder.identityID = ZTEUtils.getUserId()!! } Log.d(TAG, \"parseCirSendDispatchOrderData: dispatchOrder == $dispatchOrder\") // TODO: 2022/9/28 跟DIS一样，这里直接入库 if (dispatchOrder != null) { // 自动签收 UdpMasterRepository.INSTANCE.cirAutoRecvDispatchOrderReq( dispatchOrder.senderID, dispatchOrder.orderNo!!, \"\", dispatchOrder.pkgIndex ) - // 数据入库 - val dispatchOrderDao: DispatchOrderDao = - AppDatabase.getInstance(BaseApp.instance()).dispatchOrderDao() - dispatchOrderDao.insertDispatchOrder(dispatchOrder) +// // 数据入库 +// val dispatchOrderDao: DispatchOrderDao = +// AppDatabase.getInstance(BaseApp.instance()).dispatchOrderDao() +// dispatchOrderDao.insertDispatchOrder(dispatchOrder) } } catch (e: Exception) { Log.d(TAG, \"parseCirSendDispatchOrderData: e=${e.message}\") e.printStackTrace() } } } 注释 package com.gbcom.message.mvvm.viewmodel class DispatchOrderViewModel(application: Application) : BaseViewModel(application) { - private val mDispatchOrderDao by lazy { - AppDatabase.getInstance(application).dispatchOrderDao() - } - private val mDispatchOrderRepository by lazy { - DispatchOrderRepository.getInstance( - mDispatchOrderDao - ) - } - - val flow = Pager( - /* - PagingConfig( - // 每页显示的数据的大小 - pageSize = 60, - // 开启占位符 - enablePlaceholders = true, - // 预刷新的距离，距离最后一个 item 多远时加载数据 - prefetchDistance = 3, - //初始化加载数量，默认为 pageSize * 3 - initialLoadSize = 60, - //一次应在内存中保存的最大数据,这个数字将会触发，滑动加载更多的数据 - maxSize = 200 - ) - */ - config = PagingConfig( - // 每页显示的数据的大小 - pageSize = BaseConstant.MSG_LIST_PAGE_SIZE, - // 开启占位符 - enablePlaceholders = true, - // 预刷新的距离，距离最后一个 item 多远时加载数据 - prefetchDistance = 2, - // 初始化加载数量，默认为 pageSize * 3 - initialLoadSize = BaseConstant.MSG_LIST_PAGE_S","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:2:3","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"2.4.拿到SQL 导出数据库，比如使用Navicat打开，并导出新增加的表的SQL语句。 此时，把SQL语句直接赋值到APP项目中使用就可以了，ROOM版本号修改7为8，MIGATION_6_7后面增加MIGATION_7_8。 package com.gbcom.library_base.db /** * 项目数据表 * @author daizelai@gbcom.com.cn * @date 2021/10/26 13:28 */ @Database( entities = [AppConfig::class, Ats::class, StationAts::class, DisCfg::class, PredefinedSMS::class, TrainBrdGroup::class, TrainPos::class, Station::class, StationBrdZone::class, Call::class, Message::class, SelfTest:: class, Log::class, FileInfo::class, DispatchOrder::class], - version = 7, + version = 8, exportSchema = false ) abstract class AppDatabase : RoomDatabase() { ...... /** * 调度命令 * @author daizelai@gbcom.com.cn * @date 2022/09/29 15:30 */ + abstract fun dispatchOrderDao(): DispatchOrderDao companion object { @Volatile private var INSTANCE: AppDatabase? = null ...... /** * 创建调度命令表 * @author daizelai@gbcom.com.cn * @date 2022/09/29 14:18 */ var MIGATION_7_8: Migration = object : Migration(7, 8) { override fun migrate(database: SupportSQLiteDatabase) { + database.execSQL( + \"CREATE TABLE `metro_dispatch_order` (\" + + \"`sender_id` INTEGER NOT NULL, \" + + \"`sender` TEXT, \" + + \"`order_info` TEXT, \" + + \"`order_no` TEXT, \" + + \"`total_pkg_num` INTEGER NOT NULL, \" + + \"`pkg_index` INTEGER NOT NULL, \" + + \"`type` INTEGER NOT NULL, \" + + \"`to_top` INTEGER NOT NULL, \" + + \"`create_time` INTEGER NOT NULL, \" + + \"`status` INTEGER NOT NULL, \" + + \"`receipt` INTEGER NOT NULL, \" + + \"`identity_id` TEXT NOT NULL, \" + + \"`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL);\" ) } } fun getInstance(context: Context): AppDatabase = INSTANCE ?: synchronized(this) { INSTANCE ?: buildDatabase(context).also { INSTANCE = it } } private fun buildDatabase(context: Context) = Room.databaseBuilder( context.applicationContext, AppDatabase::class.java, \"Metro.db\" ) // 5.增加Migrations .addMigrations( MIGATION_1_2, MIGATION_2_3, MIGATION_3_4, MIGATION_4_5, MIGATION_5_6, - MIGATION_6_7 + MIGATION_6_7, + MIGATION_7_8 ) // 出现异常问题 重建数据表，同时数据也会丢失。 // .fallbackToDestructiveMigration() .build() } } ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:2:4","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","android studio"],"content":"android studio默认打开上一次的状态","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/"},{"categories":["原创","android studio"],"content":" 20220930_1207as默认打开上一次的状态 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/:0:0","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/"},{"categories":["原创","android studio"],"content":"一、描述 by daizelai on 2022/09/30 12:08 as默认打开上一次的状态，但是如果你是复制一个项目为另一个新项目，这样使用as打开这两个项目时，会发现，as打开的上一次状态都是一样的。 本文主要讲述了如何各自打开各自的上一次状态。 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/:1:0","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/"},{"categories":["原创","android studio"],"content":"二、开始 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/:2:0","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/"},{"categories":["原创","android studio"],"content":"2.1.配置打开上一次状态 File Settings… Appearance \u0026 Behavior System Settings Startup/Shutdown Reopen last project on startup ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/:2:1","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/"},{"categories":["原创","android studio"],"content":"2.2.修改各自上一次状态 打开AndroidStudio的project视图方式，找到workspace.xml然后删除。 然后关闭Android Studio后，重启Android Studio，这样就能把工作状态保存了。 这样即使是直接把项目复制成新的项目，然后再打开新的项目，布局也是自己上次打开的状态了。 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/:2:2","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/"},{"categories":["mysql","数据库"],"content":"mysql数据库乱码解决方案，修改mysql数据编码。","date":"2016-10-28","objectID":"https://daizelai.github.io/posts/mysql/character/","tags":["原创","mysql","数据库","数据库乱码"],"title":"mysql乱码","uri":"https://daizelai.github.io/posts/mysql/character/"},{"categories":["mysql","数据库"],"content":"一、查看mysql服务端情况 1.查看mysql默认的编码配置 mysql\u003e show variables like 'char%'; mysql\u003e SHOW VARIABLES LIKE 'character%'; +--------------------------+----------------------------+ | Variable_name | Value | +--------------------------+----------------------------+ | character_set_client | utf8 | | character_set_connection | utf8 | | character_set_database | latin1 | | character_set_filesystem | binary | | character_set_results | utf8 | | character_set_server | latin1 | | character_set_system | utf8 | | character_sets_dir | /usr/share/mysql/charsets/ | +--------------------------+----------------------------+ 8 rows in set (0.00 sec) 2.查看某(we7)数据库的编码格式 mysql\u003e show create database we7; +----------+--------------------------------------------------------------+ | Database | Create Database | +----------+--------------------------------------------------------------+ | we7 | CREATE DATABASE `we7` /*!40100 DEFAULT CHARACTER SET utf8 */ | +----------+--------------------------------------------------------------+ 1 row in set (0.01 sec) 默认创建数据库时指定编码，强烈建议使用utf8。 CREATE DATABASE `we7` CHARACTER SET 'utf8' COLLATE 'utf8_general_ci'; 3.查看某(ims_rule)表的编码格式 mysql\u003e show create table ims_rule; CREATE TABLE `ims_rule` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `uniacid` int(10) unsigned NOT NULL, `name` varchar(50) NOT NULL, `module` varchar(50) NOT NULL, `displayorder` int(10) unsigned NOT NULL, `status` tinyint(1) unsigned NOT NULL, PRIMARY KEY (`id`) ) ENGINE=MyISAM AUTO_INCREMENT=216 DEFAULT CHARSET=utf8 1 row in set (0.03 sec) 创建表时使用utf8编码 CREATE TABLE `ims_rule` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, ) ENGINE=MyISAM DEFAULT CHARSET=utf8; ","date":"2016-10-28","objectID":"https://daizelai.github.io/posts/mysql/character/:1:0","tags":["原创","mysql","数据库","数据库乱码"],"title":"mysql乱码","uri":"https://daizelai.github.io/posts/mysql/character/"},{"categories":["mysql","数据库"],"content":"二、修改mysql编码 1.设置mysql编码 SET NAMES utf8 SET NAMES gbk 相当于 SET character_set_client='utf8'; SET character_set_connection='utf8'; SET character_set_results='utf8'; 2.或者修改mysql配置文件 我这次是这样修改成功的，因为确定了是服务端的问题，修改后记得要重启mysql服务哦。 # vi /etc/my.inf [client] default-character-set=utf8 [mysql] default-character-set=utf8 [mysqld] default-character-set=utf8 3.修改数据库的编码 // 修改数据库的编码 ALTER DATABASE `we7` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; // 修改表的编码 ALTER TABLE `ims_rule` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; // 修改数据库为gbk ALTER DATABASE `db_name` DEFAULT CHARACTER SET gbk COLLATE gbk_chinese_ci; ","date":"2016-10-28","objectID":"https://daizelai.github.io/posts/mysql/character/:2:0","tags":["原创","mysql","数据库","数据库乱码"],"title":"mysql乱码","uri":"https://daizelai.github.io/posts/mysql/character/"},{"categories":["mysql","数据库"],"content":"三、代码端 记得在代码端也要使用相同的编码格式，这里需要使用utf8，否则还是乱码的。 ","date":"2016-10-28","objectID":"https://daizelai.github.io/posts/mysql/character/:3:0","tags":["原创","mysql","数据库","数据库乱码"],"title":"mysql乱码","uri":"https://daizelai.github.io/posts/mysql/character/"},{"categories":["lsof","linux"],"content":"linux之lsof的使用，可以根据端口查询进程。","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["lsof","linux"],"content":"一、安装lsof 先查看一下lsof命令是否存在。 [root@localhost lai]# lsof\r-bash: lsof: command not found\r[root@localhost lai]# whereis lsof\rlsof: 不存在的话，需要进行安装 [root@localhost lai]# yum -y install lsof\r[root@localhost lai]# whereis lsof\rlsof: /usr/sbin/lsof /usr/share/man/man8/lsof.8.gz\r[root@localhost lai]# lsof -i:80\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rhexo 2403 root 12u IPv4 19352 0t0 TCP *:http (LISTEN) 如果只是查看java进程的话，可以全用jps命令。jps是jdk提供的一个查看当前Java进程的小工具， 可以看做是JavaVirtual Machine Process Status Tool的缩写。 jps –q ：仅仅显示java进程号\rjps -mlv 10.60.0.83 :查看其他机器上的jvm进程，需要在待查看机器上启动jstatd ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:1:0","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["lsof","linux"],"content":"二、简单使用 ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:0","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["lsof","linux"],"content":"2.1.查找所有打开的文件 因为文件较多，这里使用head只显示前面几条内容 [root@localhost lai]# lsof | head\rCOMMAND PID TID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rsystemd 1 root cwd DIR 253,0 4096 128 /\rsystemd 1 root rtd DIR 253,0 4096 128 /\rsystemd 1 root txt REG 253,0 1494168 25320299 /usr/lib/systemd/systemd\rsystemd 1 root mem REG 253,0 20032 16818278 /usr/lib64/libuuid.so.1.3.0\rsystemd 1 root mem REG 253,0 252696 16993728 /usr/lib64/libblkid.so.1.1.0\rsystemd 1 root mem REG 253,0 90632 16850739 /usr/lib64/libz.so.1.2.7\rsystemd 1 root mem REG 253,0 19888 16850823 /usr/lib64/libattr.so.1.1.0\rsystemd 1 root mem REG 253,0 19520 17265237 /usr/lib64/libdl-2.17.so\rsystemd 1 root mem REG 253,0 153192 17265284 /usr/lib64/liblzma.so.5.0.99 FD列详解 cwd - Current working directory\rtxt - Text file\rmem - Memory Mapped file\rmmap - Memory Mapped device\rNumber - It represent the actual file descriptor. For example, 0u, 1w and 3r\rr 是读的意思，w 是写，u 代表读写 Type代表文件类型 REG - Regular file DIR - Directory\rCHR - Character special file\rFIFO - First in first out ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:1","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["lsof","linux"],"content":"2.2.列出所有侦听和已建立的网络连接 [root@localhost lai]# lsof -i\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rdhclient 645 root 6u IPv4 15146 0t0 UDP *:bootpc dhclient 645 root 20u IPv4 15102 0t0 UDP *:19897 dhclient 645 root 21u IPv6 15103 0t0 UDP *:24534 dhclient 646 root 6u IPv4 15157 0t0 UDP *:bootpc dhclient 646 root 20u IPv4 15099 0t0 UDP *:35689 dhclient 646 root 21u IPv6 15100 0t0 UDP *:19897 sshd 893 root 3u IPv4 16017 0t0 TCP *:ssh (LISTEN)\rsshd 893 root 4u IPv6 16026 0t0 TCP *:ssh (LISTEN)\rmysqld 2077 mysql 10u IPv6 17561 0t0 TCP *:mysql (LISTEN)\rmaster 2167 root 13u IPv4 17452 0t0 TCP localhost:smtp (LISTEN)\rmaster 2167 root 14u IPv6 17453 0t0 TCP localhost:smtp (LISTEN)\rsshd 2326 root 3u IPv4 18608 0t0 TCP localhost.localdomain:ssh-\u003e10.60.0.83:50275 (ESTABLISHED)\rhexo 2403 root 12u IPv4 19352 0t0 TCP *:http (LISTEN) ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:2","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["lsof","linux"],"content":"2.3.查找用户打开的文件 查看root用户打开的文件，这里只列出几条。 [root@localhost lai]# lsof -u root | head\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rsystemd 1 root cwd DIR 253,0 4096 128 /\rsystemd 1 root rtd DIR 253,0 4096 128 /\rsystemd 1 root txt REG 253,0 1494168 25320299 /usr/lib/systemd/systemd\rsystemd 1 root mem REG 253,0 20032 16818278 /usr/lib64/libuuid.so.1.3.0\rsystemd 1 root mem REG 253,0 252696 16993728 /usr/lib64/libblkid.so.1.1.0\rsystemd 1 root mem REG 253,0 90632 16850739 /usr/lib64/libz.so.1.2.7\rsystemd 1 root mem REG 253,0 19888 16850823 /usr/lib64/libattr.so.1.1.0\rsystemd 1 root mem REG 253,0 19520 17265237 /usr/lib64/libdl-2.17.so\rsystemd 1 root mem REG 253,0 153192 17265284 /usr/lib64/liblzma.so.5.0.99 ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:3","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["lsof","linux"],"content":"2.4.列出在某个端口运行的进程 我们来看一下80端口的进程是什么 [root@localhost lai]# lsof -i:80\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rhexo 2403 root 12u IPv4 19352 0t0 TCP *:http (LISTEN) ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:4","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["lsof","linux"],"content":"2.5.查看22-80端口之间所有的进程 [root@localhost lai]# lsof -i:22-80\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rdhclient 645 root 6u IPv4 15146 0t0 UDP *:bootpc dhclient 646 root 6u IPv4 15157 0t0 UDP *:bootpc sshd 893 root 3u IPv4 16017 0t0 TCP *:ssh (LISTEN)\rsshd 893 root 4u IPv6 16026 0t0 TCP *:ssh (LISTEN)\rmaster 2167 root 13u IPv4 17452 0t0 TCP localhost:smtp (LISTEN)\rmaster 2167 root 14u IPv6 17453 0t0 TCP localhost:smtp (LISTEN)\rsshd 2326 root 3u IPv4 18608 0t0 TCP localhost.localdomain:ssh-\u003e10.60.0.83:50275 (ESTABLISHED)\rhexo 2403 root 12u IPv4 19352 0t0 TCP *:http (LISTEN) ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:5","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["lsof","linux"],"content":"2.6.只列出使用 IPv4 的打开文件 貌似查出来的结果和上面2.4是一样的，呵呵！ [root@localhost lai]# lsof -i 4\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rdhclient 645 root 6u IPv4 15146 0t0 UDP *:bootpc dhclient 645 root 20u IPv4 15102 0t0 UDP *:19897 dhclient 646 root 6u IPv4 15157 0t0 UDP *:bootpc dhclient 646 root 20u IPv4 15099 0t0 UDP *:35689 sshd 893 root 3u IPv4 16017 0t0 TCP *:ssh (LISTEN)\rmaster 2167 root 13u IPv4 17452 0t0 TCP localhost:smtp (LISTEN)\rsshd 2326 root 3u IPv4 18608 0t0 TCP localhost.localdomain:ssh-\u003e10.60.0.83:50275 (ESTABLISHED)\rhexo 2403 root 12u IPv4 19352 0t0 TCP *:http (LISTEN) ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:6","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["lsof","linux"],"content":"2.7.只列出使用 IPv6 的打开文件 [root@localhost lai]# lsof -i 6\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rdhclient 645 root 21u IPv6 15103 0t0 UDP *:24534 dhclient 646 root 21u IPv6 15100 0t0 UDP *:19897 sshd 893 root 4u IPv6 16026 0t0 TCP *:ssh (LISTEN)\rmysqld 2077 mysql 10u IPv6 17561 0t0 TCP *:mysql (LISTEN)\rmaster 2167 root 14u IPv6 17453 0t0 TCP localhost:smtp (LISTEN) ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:7","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["lsof","linux"],"content":"2.8.根据进程pid列出打开的文件 [root@localhost lai]# ps -ef | grep python\rroot 892 1 0 08:56 ? 00:00:00 /usr/bin/python -Es /usr/sbin/tuned -l -P\rroot 2696 2347 0 09:56 pts/1 00:00:00 grep --color=auto python\r[root@localhost lai]# lsof -p 892 | head\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rtuned 892 root cwd DIR 253,0 4096 128 /\rtuned 892 root rtd DIR 253,0 4096 128 /\rtuned 892 root txt REG 253,0 7136 8664647 /usr/bin/python2.7\rtuned 892 root mem REG 253,0 68192 16850769 /usr/lib64/libbz2.so.1.0.6\rtuned 892 root mem REG 253,0 91496 17265291 /usr/lib64/libelf-0.163.so\rtuned 892 root mem REG 253,0 19888 16850823 /usr/lib64/libattr.so.1.1.0\rtuned 892 root mem REG 253,0 88720 16818313 /usr/lib64/libgcc_s-4.8.5-20150702.so.1\rtuned 892 root mem REG 253,0 297464 16850856 /usr/lib64/libdw-0.163.so\rtuned 892 root mem REG 253,0 20024 16850782 /usr/lib64/libcap.so.2.22 ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:8","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["lsof","linux"],"content":"2.9.根据进程名称列出打开的文件 [root@localhost lai]# lsof -c mysqld | head\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rmysqld_sa 1416 root cwd DIR 253,0 4096 2364161 /usr/local/mysql\rmysqld_sa 1416 root rtd DIR 253,0 4096 128 /\rmysqld_sa 1416 root txt REG 253,0 960392 9678252 /usr/bin/bash\rmysqld_sa 1416 root mem REG 253,0 61928 17265253 /usr/lib64/libnss_files-2.17.so\rmysqld_sa 1416 root mem REG 253,0 106065056 17282745 /usr/lib/locale/locale-archive\rmysqld_sa 1416 root mem REG 253,0 2112384 17265230 /usr/lib64/libc-2.17.so\rmysqld_sa 1416 root mem REG 253,0 19520 17265237 /usr/lib64/libdl-2.17.so\rmysqld_sa 1416 root mem REG 253,0 174520 16850722 /usr/lib64/libtinfo.so.5.9\rmysqld_sa 1416 root mem REG 253,0 164440 17557084 /usr/lib64/ld-2.17.so ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:9","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["lsof","linux"],"content":"2.10.只显示pid [root@localhost lai]# lsof -t -u mysql 2077 ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:10","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","windows","netstat"],"content":"windows下netstat使用手记，netstat的一些简单使用。","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":" windows下netstat命令的简单使用记录。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:0:0","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"一、windows下面查看所有端口，然后找到对应的端口和PID ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:1:0","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"1.1.查看netstat的帮助信息# D:\\server\\php5625\u003enetstat /? 显示协议统计和当前 TCP/IP 网络连接。 NETSTAT [-a] [-b] [-e] [-f] [-n] [-o] [-p proto] [-r] [-s] [-t] [interval] -a 显示所有连接和侦听端口。 -b 显示在创建每个连接或侦听端口时涉及的可执行程序。 在某些情况下，已知可执行程序承载多个独立的 组件，这些情况下，显示创建连接或侦听端口时涉 及的组件序列。此情况下，可执行程序的名称 位于底部[]中，它调用的组件位于顶部，直至达 到 TCP/IP。注意，此选项可能很耗时，并且在您没有 足够权限时可能失败。 -e 显示以太网统计。此选项可以与 -s 选项结合使用。 -f 显示外部地址的完全限定域名(FQDN)。 -n 以数字形式显示地址和端口号。 -o 显示拥有的与每个连接关联的进程 ID。 -p proto 显示 proto 指定的协议的连接；proto 可以是下列任 何一个: TCP、UDP、TCPv6 或 UDPv6。如果与 -s 选 项一起用来显示每个协议的统计，proto 可以是下列任 何一个: IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 UDPv6。 -r 显示路由表。 -s 显示每个协议的统计。默认情况下，显示 IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6 的统计；-p 选项可用于指定默认的子网。 -t 显示当前连接卸载状态。 interval 重新显示选定的统计，各个显示间暂停的间隔秒数。 按 CTRL+C 停止重新显示统计。如果省略，则 netstat 将打印当前的配置信息一次。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:1:1","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"1.2.使用netstat命令，通过参数ano来查看，如下所示。 D:\\server\\php5625\u003enetstat -ano 活动连接 协议 本地地址 外部地址 状态 PID TCP 0.0.0.0:80 0.0.0.0:0 LISTENING 1828 TCP 0.0.0.0:135 0.0.0.0:0 LISTENING 784 TCP 0.0.0.0:445 0.0.0.0:0 LISTENING 4 TCP 0.0.0.0:3306 0.0.0.0:0 LISTENING 2004 TCP 10.60.0.95:80 10.60.0.37:51285 TIME_WAIT 0 TCP 10.60.0.95:80 10.60.0.37:51291 TIME_WAIT 0 TCP 10.60.0.95:139 0.0.0.0:0 LISTENING 4 TCP 10.60.0.95:57064 10.60.0.251:22 ESTABLISHED 6728 TCP 10.60.0.95:57099 52.34.158.152:443 ESTABLISHED 6912 TCP 127.0.0.1:4300 0.0.0.0:0 LISTENING 6280 TCP 127.0.0.1:10000 0.0.0.0:0 LISTENING 4144 TCP 127.0.0.1:57143 127.0.0.1:12000 TIME_WAIT 0 TCP [::]:80 [::]:0 LISTENING 1828 TCP [::1]:57125 [::1]:3306 TIME_WAIT 0 TCP [::1]:57135 [::1]:3306 TIME_WAIT 0 TCP [::1]:57137 [::1]:3306 TIME_WAIT 0 UDP 0.0.0.0:12000 *:* 1928 UDP 0.0.0.0:49152 *:* 388 UDP 0.0.0.0:49158 *:* 2648 UDP 0.0.0.0:53701 *:* 3548 UDP 0.0.0.0:62334 *:* 6280 UDP 0.0.0.0:63011 *:* 6280 UDP 0.0.0.0:63012 *:* 6280 UDP 10.60.0.95:137 *:* 4 UDP 10.60.0.95:138 *:* 4 UDP [::]:12000 *:* 1928 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:1:2","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"二、windows下面查看端口占用情况 D:\\server\\php5625\u003enetstat -ano | findstr \"3306\" TCP 0.0.0.0:3306 0.0.0.0:0 LISTENING 2004 TCP [::]:3306 [::]:0 LISTENING 2004 TCP [::1]:57114 [::1]:3306 TIME_WAIT 0 TCP [::1]:57125 [::1]:3306 TIME_WAIT 0 最后一列2004为PID，可以看到3306端口被PID为2004占用。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:2:0","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"三、windows下查看该PID对应的进程名称 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:3:0","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"3.1.使用命令tasklist配全findstr使用 D:\\server\\php5625\u003etasklist | findstr \"2004\" mysqld.exe 2004 Services 0 46,056 K 通过查找，可以看到PID为2004对应的进程名字为mysqld.exe，也就是MySQL服务。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:3:1","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"3.2.通过任务管理器查看进程名称 打开任务管理器，在任务管理器中管理PID 在任务管理器中调出PID 通过上面查询到的PID，找出对应的应用程序名。 在任务管理器中查看进程名 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:3:2","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"四、netstat基础使用 netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:4:0","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"4.1.-a参数的使用 netstat -a ——本选项显示一个所有的有效连接信息列表，包括已建立的连接（ESTABLISHED ），也包括监听连接请求（LISTENING ）的那些连接，断开连接（CLOSE_WAIT ）或者处于联机等待状态的（TIME_WAIT ）等。 d:\\server\\php5625\u003enetstat -a 活动连接 Proto Local Address Foreign Address State 协议 本地地址 外部地址 状态 TCP 0.0.0.0:80 layne-PC:0 LISTENING TCP 0.0.0.0:135 layne-PC:0 LISTENING TCP 0.0.0.0:3306 layne-PC:0 LISTENING TCP 0.0.0.0:12000 layne-PC:0 LISTENING TCP 0.0.0.0:27017 layne-PC:0 LISTENING TCP 10.60.0.95:80 10.60.0.37:43128 TIME_WAIT TCP 10.60.0.95:80 10.60.0.37:47779 TIME_WAIT TCP 10.60.0.95:80 10.60.0.37:52219 FIN_WAIT_2 TCP 10.60.0.95:80 10.60.0.37:52220 FIN_WAIT_2 TCP 10.60.0.95:80 10.60.0.37:52232 TIME_WAIT TCP 10.60.0.95:80 10.60.0.37:52240 TIME_WAIT TCP 10.60.0.95:49257 mail:imaps ESTABLISHED TCP 10.60.0.95:49452 101.227.160.102:https ESTABLISHED TCP 10.60.0.95:50447 110.76.20.11:http CLOSE_WAIT TCP 10.60.0.95:50661 10.60.0.84:ssh ESTABLISHED TCP 10.60.0.95:50717 mail:imaps ESTABLISHED TCP 10.60.0.95:50718 mail:imaps ESTABLISHED TCP 10.60.0.95:51977 151.101.36.133:https ESTABLISHED TCP 10.60.0.95:51978 151.101.36.133:https ESTABLISHED TCP 10.60.0.95:51988 33:http LAST_ACK TCP 10.60.0.95:51995 115.29.172.248:http TIME_WAIT TCP 10.60.0.95:52003 115.29.172.248:http TIME_WAIT TCP 10.60.0.95:52007 ec2-54-149-28-204:https ESTABLISHED TCP 10.60.0.95:52013 115.29.172.248:http TIME_WAIT TCP 10.60.0.95:52026 122.246.3.142:http ESTABLISHED TCP 10.60.0.95:52027 122.246.3.142:http ESTABLISHED TCP 10.60.0.95:52028 122.246.3.142:http TIME_WAIT TCP 10.60.0.95:52037 122.228.72.161:http ESTABLISHED TCP 127.0.0.1:4300 layne-PC:0 LISTENING TCP 127.0.0.1:10000 layne-PC:0 LISTENING TCP 127.0.0.1:27382 layne-PC:0 LISTENING TCP 127.0.0.1:49156 test:49157 ESTABLISHED TCP 127.0.0.1:49157 test:49156 ESTABLISHED TCP 127.0.0.1:49160 layne-PC:0 LISTENING TCP 127.0.0.1:49337 test:49336 ESTABLISHED TCP 127.0.0.1:52035 test:12000 TIME_WAIT TCP 127.0.0.1:52036 test:12000 TIME_WAIT TCP [::]:80 layne-PC:0 LISTENING TCP [::]:135 layne-PC:0 LISTENING TCP [::]:445 layne-PC:0 LISTENING TCP [::]:3306 layne-PC:0 LISTENING TCP [::]:12000 layne-PC:0 LISTENING TCP [::1]:52073 layne-PC:3306 TIME_WAIT TCP [::1]:52077 layne-PC:3306 TIME_WAIT TCP [::1]:52087 layne-PC:3306 TIME_WAIT UDP 0.0.0.0:500 *:* UDP 0.0.0.0:12000 *:* UDP 10.60.0.95:137 *:* UDP 10.60.0.95:138 *:* UDP 127.0.0.1:49159 *:* UDP 127.0.0.1:49269 *:* UDP 127.0.0.1:50144 *:* UDP 127.0.0.1:57995 *:* UDP [::]:500 *:* UDP [::]:4500 *:* UDP [::]:5355 *:* UDP [::]:12000 *:* 参数说明： 协议（Proto ）：TCP ，指是传输层通讯协议 本地机器名（Local Address ）：Eagle ，计算机名 远程机器名（Foreign Address ）： 10.60.0.37 远程端口： 43128 状态：ESTABLISHED 状态列表: LISTEN ：在监听状态中。 ESTABLISHED ：已建立联机的联机情况。 TIME_WAIT ：该联机在目前已经是等待的状态。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:4:1","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"4.2.-n参数的使用 netstat -n ——显示所有已建立的有效连接。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:4:2","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"4.3.-e参数的使用 netstat -e ——本选项用于显示关于以太网的统计数据。它列出的项目包括传送的数据报的总字节数、错误数、删除数、数据报的数量和广播的数量。这些统计数据既有发送的数据报数量，也有接收的数据报数量。这个选项可以用来统计一些基本的网络流量。 d:\\server\\php5625\u003enetstat -e 接口统计 接收的 发送的 字节 287777080 23497644 单播数据包 224588 167300 非单播数据包 784988 876 丢弃 0 0 错误 0 0 未知协议 0 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:4:3","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"4.4.-s参数的使用 netstat -s ——本选项能够按照各个协议分别显示其统计数据。如果你的应用程序（如Web 浏览器）运行速度比较慢，或者不能显示Web 页之类的数据，那么你就可以用本选项来查看一下所显示的信息。你需要仔细查看统计数据的各行，找到出错的关键字，进而确定问题所在。 d:\\server\\php5625\u003enetstat -s IPv4 统计信息 接收的数据包 = 84163 接收的标头错误 = 0 接收的地址错误 = 10868 转发的数据报 = 0 接收的未知协议 = 3 丢弃的接收数据包 = 18813 传送的接收数据包 = 108598 输出请求 = 74737 路由丢弃 = 0 丢弃的输出数据包 = 0 输出数据包无路由 = 9 需要重新组合 = 12 重新组合成功 = 3 重新组合失败 = 0 数据报分段成功 = 0 数据报分段失败 = 0 分段已创建 = 0 IPv6 统计信息 接收的数据包 = 125795 接收的标头错误 = 0 接收的地址错误 = 120549 转发的数据报 = 0 接收的未知协议 = 0 丢弃的接收数据包 = 4678 传送的接收数据包 = 8920 输出请求 = 5144 路由丢弃 = 0 丢弃的输出数据包 = 0 输出数据包无路由 = 0 需要重新组合 = 0 重新组合成功 = 0 重新组合失败 = 0 数据报分段成功 = 0 数据报分段失败 = 0 分段已创建 = 0 ICMPv4 统计信息 已接收 已发送 消息 21 7 错误 0 0 目标不可达 19 6 超时 1 0 参数问题 0 0 源抑制 0 0 重定向 0 0 回显回复 0 1 回显 1 0 时间戳 0 0 时间戳回复 0 0 地址掩码 0 0 地址掩码回复 0 0 路由器请求 0 0 路由器播发 0 0 ICMPv6 统计信息 已接收 已发送 消息 568 1387 错误 0 0 目标不可达 0 0 数据包太大 0 0 超时 0 0 参数问题 0 0 回显 0 0 回显回复 0 0 MLD 查询 0 0 MLD 报告 0 0 MLD 已完成 0 0 路由器请求 0 6 路由器播发 0 0 邻居请求 551 830 邻居播发 17 551 重定向 0 0 路由器重新编号 0 0 IPv4 的 TCP 统计信息 主动开放 = 2617 被动开放 = 445 失败的连接尝试 = 189 重置连接 = 59 当前连接 = 39 接收的分段 = 86088 发送的分段 = 68032 重新传输的分段 = 2961 IPv6 的 TCP 统计信息 主动开放 = 54 被动开放 = 54 失败的连接尝试 = 0 重置连接 = 0 当前连接 = 0 接收的分段 = 3642 发送的分段 = 3642 重新传输的分段 = 0 IPv4 的 UDP 统计信息 接收的数据报 = 3898 无端口 = 413 接收错误 = 18383 发送的数据报 = 3733 IPv6 的 UDP 统计信息 接收的数据报 = 0 无端口 = 8 接收错误 = 4670 发送的数据报 = 94 d:\\server\\php5625\u003e ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:4:4","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"4.5.-r参数显示路由表信息 netstat -r ——本选项可以显示关于路由表的信息，类似于后面所讲使用route print命令时看到的信息。除了显示有效路由外，还显示当前有效的连接。 d:\\server\\php5625\u003enetstat -r =========================================================================== 接口列表 11...74 27 ea 3a af 04 ......Realtek PCIe GBE Family Controller 1...........................Software Loopback Interface 1 =========================================================================== IPv4 路由表 =========================================================================== 活动路由: 网络目标 网络掩码 网关 接口 跃点数 0.0.0.0 0.0.0.0 10.60.1.254 10.60.0.95 20 10.60.0.0 255.255.0.0 在链路上 10.60.0.95 276 10.60.0.95 255.255.255.255 在链路上 10.60.0.95 276 10.60.255.255 255.255.255.255 在链路上 10.60.0.95 276 127.0.0.0 255.0.0.0 在链路上 127.0.0.1 306 127.0.0.1 255.255.255.255 在链路上 127.0.0.1 306 127.255.255.255 255.255.255.255 在链路上 127.0.0.1 306 224.0.0.0 240.0.0.0 在链路上 127.0.0.1 306 224.0.0.0 240.0.0.0 在链路上 10.60.0.95 276 255.255.255.255 255.255.255.255 在链路上 127.0.0.1 306 255.255.255.255 255.255.255.255 在链路上 10.60.0.95 276 =========================================================================== 永久路由: 无 IPv6 路由表 =========================================================================== 活动路由: 如果跃点数网络目标 网关 1 306 ::1/128 在链路上 11 276 fe80::/64 在链路上 11 276 fe80::3877:4dea:3379:d681/128 在链路上 1 306 ff00::/8 在链路上 11 276 ff00::/8 在链路上 =========================================================================== 永久路由: 无 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:4:5","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["原创","windows","netstat"],"content":"4.6.显示正在进行的工作 d:\\server\\php5625\u003enetstat -v 活动连接 协议 本地地址 外部地址 状态 TCP 10.60.0.95:80 10.60.0.37:35676 TIME_WAIT TCP 10.60.0.95:80 10.60.0.37:35681 TIME_WAIT TCP 10.60.0.95:49257 mail:imaps ESTABLISHED TCP 10.60.0.95:49452 101.227.160.102:https ESTABLISHED TCP 10.60.0.95:50447 110.76.20.11:http CLOSE_WAIT TCP 10.60.0.95:50661 10.60.0.84:ssh ESTABLISHED TCP 10.60.0.95:50717 mail:imaps ESTABLISHED TCP 10.60.0.95:50718 mail:imaps ESTABLISHED TCP 10.60.0.95:50719 mail:imaps ESTABLISHED TCP 10.60.0.95:52074 221.228.75.133:http CLOSE_WAIT TCP 10.60.0.95:52329 203.208.51.66:http TIME_WAIT ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/winddows/netstat/:4:6","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/winddows/netstat/"},{"categories":["mysql","procedure"],"content":"mysql存储过程的简单使用，记录一下，方便下次使用忘记了。","date":"2016-10-09","objectID":"https://daizelai.github.io/posts/mysql/procedure/","tags":["原创","mysql","数据库","procedure"],"title":"mysql之存储过程","uri":"https://daizelai.github.io/posts/mysql/procedure/"},{"categories":["mysql","procedure"],"content":"查看存储过程 mysql\u003e show procedure status; ","date":"2016-10-09","objectID":"https://daizelai.github.io/posts/mysql/procedure/:1:0","tags":["原创","mysql","数据库","procedure"],"title":"mysql之存储过程","uri":"https://daizelai.github.io/posts/mysql/procedure/"},{"categories":["mysql","procedure"],"content":"查看存储过程内容 查看某一个存储过程的内容 mysql\u003e show create procedure updateHotspot_pro; ","date":"2016-10-09","objectID":"https://daizelai.github.io/posts/mysql/procedure/:2:0","tags":["原创","mysql","数据库","procedure"],"title":"mysql之存储过程","uri":"https://daizelai.github.io/posts/mysql/procedure/"},{"categories":["sftp","linux"],"content":"Linux系统下sftp的简单使用","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/linux/sftp/","tags":["原创","sftp","linux"],"title":"Linux之sftp使用","uri":"https://daizelai.github.io/posts/linux/sftp/"},{"categories":["sftp","linux"],"content":"一、下载文件 将从远程主机的 /var/www/layne/ 目录下将 index.php 下载到本地 /home/layne/ 目录下。 sftp\u003e get /var/www/layne/index.php /home/layne/ ","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/linux/sftp/:1:0","tags":["原创","sftp","linux"],"title":"Linux之sftp使用","uri":"https://daizelai.github.io/posts/linux/sftp/"},{"categories":["sftp","linux"],"content":"二、上传文件 把本地 /home/layne/downloads/ 目录下的 test.pdf文件上传至远程主机 /var/www/layne/ 目录下 sftp\u003e put /home/layne/downloads/test.pdf /var/www/layne/ ","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/linux/sftp/:2:0","tags":["原创","sftp","linux"],"title":"Linux之sftp使用","uri":"https://daizelai.github.io/posts/linux/sftp/"},{"categories":["sftp","linux"],"content":"三、示例 sftp\u003e put -r /home/fuyatao/downloads/Linuxgl.pdf /var/www/html/ sftp\u003e lcd d:/php/webroot/Edu/ sftp\u003e pwd sftp\u003e put pic.png ./ ","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/linux/sftp/:3:0","tags":["原创","sftp","linux"],"title":"Linux之sftp使用","uri":"https://daizelai.github.io/posts/linux/sftp/"},{"categories":["mysql","数据库","mysqldump"],"content":"我是一个MySql数据库导入导出的笔记","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqldump/","tags":["原创","mysql","数据库","mysqldump"],"title":"mysql数据库导入导出","uri":"https://daizelai.github.io/posts/mysql/mysqldump/"},{"categories":["mysql","数据库","mysqldump"],"content":"一、数据库导入导出 ","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqldump/:1:0","tags":["原创","mysql","数据库","mysqldump"],"title":"mysql数据库导入导出","uri":"https://daizelai.github.io/posts/mysql/mysqldump/"},{"categories":["mysql","数据库","mysqldump"],"content":"1.导出数据库 # mysqldump -u root -p 数据库名\u003e文件名.sql ","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqldump/:1:1","tags":["原创","mysql","数据库","mysqldump"],"title":"mysql数据库导入导出","uri":"https://daizelai.github.io/posts/mysql/mysqldump/"},{"categories":["mysql","数据库","mysqldump"],"content":"2.导入数据库 # mysql -u root -p;use 数据库名;source 文件名.sql; ","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqldump/:1:2","tags":["原创","mysql","数据库","mysqldump"],"title":"mysql数据库导入导出","uri":"https://daizelai.github.io/posts/mysql/mysqldump/"},{"categories":["mysql","数据库"],"content":"mysql创建数据库时指定utf-8字符集，同时还可以修改mysql数据库的字符编码，详情请往内查看。","date":"2016-09-07","objectID":"https://daizelai.github.io/posts/mysql/mysql/","tags":["原创","mysql","数据库","数据库编码"],"title":"mysql创建utf8字符集数据库","uri":"https://daizelai.github.io/posts/mysql/mysql/"},{"categories":["mysql","数据库"],"content":"一、MySQL新建数据库语法 CREATE DATABASE 的语法： CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name [create_specification [, create_specification] ...] create_specification: [DEFAULT] CHARACTER SET charset_name | [DEFAULT] COLLATE collation_name ","date":"2016-09-07","objectID":"https://daizelai.github.io/posts/mysql/mysql/:0:1","tags":["原创","mysql","数据库","数据库编码"],"title":"mysql创建utf8字符集数据库","uri":"https://daizelai.github.io/posts/mysql/mysql/"},{"categories":["mysql","数据库"],"content":"二、新建数据使用示例 CREATE DATABASE db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; ","date":"2016-09-07","objectID":"https://daizelai.github.io/posts/mysql/mysql/:0:2","tags":["原创","mysql","数据库","数据库编码"],"title":"mysql创建utf8字符集数据库","uri":"https://daizelai.github.io/posts/mysql/mysql/"},{"categories":["mysql","数据库"],"content":"三、更改数据库的字符编码 ALTER DATABASE db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ","date":"2016-09-07","objectID":"https://daizelai.github.io/posts/mysql/mysql/:0:3","tags":["原创","mysql","数据库","数据库编码"],"title":"mysql创建utf8字符集数据库","uri":"https://daizelai.github.io/posts/mysql/mysql/"},{"categories":["mysql","数据库乱码"],"content":"mysql导入数据库后乱码的问题的解决","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/mysqlchar/","tags":["原创","mysql","数据库乱码"],"title":"mysql导入数据库后乱码的问题","uri":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/mysqlchar/"},{"categories":["mysql","数据库乱码"],"content":" Mysql导入数据库后乱码问题 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/mysqlchar/:0:0","tags":["原创","mysql","数据库乱码"],"title":"mysql导入数据库后乱码的问题","uri":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/mysqlchar/"},{"categories":["mysql","数据库乱码"],"content":"一、Web乱码 在容器中install好les项目后，打开Web却发现菜单是乱码 数据乱码 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/mysqlchar/:1:0","tags":["原创","mysql","数据库乱码"],"title":"mysql导入数据库后乱码的问题","uri":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/mysqlchar/"},{"categories":["mysql","数据库乱码"],"content":"二、修改Mysql配置 1）、修改mysql配置 找到数据库的配置文件，增加**[client]配置编码utf8**，[mysqld]中同时增加init_connect=‘SET NAMES utf8’，修改如下： [root@les /]# vim /etc/my.cnf [client] default-character-set=utf8 [mysqld] character_set_server=utf8 init_connect='SET NAMES utf8' datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock user=mysql # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 [mysqld_safe] log-error=/var/log/mysqld.log pid-file=/var/run/mysqld/mysqld.pid 2）、重启服务 /etc/init.d/mysqld restart /etc/init.d/httpd restart ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/mysqlchar/:2:0","tags":["原创","mysql","数据库乱码"],"title":"mysql导入数据库后乱码的问题","uri":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/mysqlchar/"},{"categories":["mysql","数据库乱码"],"content":"三、解决乱码 1.这个时候刷新Web发现还是乱码，那就是数据源有问题了，说明导入到数据库里的数据就是乱码，打开数据库一看果然如此，接着往下走。 2.卸载掉les项目，重新安装。 ./gbc100_v1.1.bin uninstall lebds_UI /var/www/html lebds ./gbc100_v1.1.bin install lebds_UI /var/www/html lebds 3.打开Web页面，发现问题已解决。 数据乱码 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/mysqlchar/:3:0","tags":["原创","mysql","数据库乱码"],"title":"mysql导入数据库后乱码的问题","uri":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/mysqlchar/"},{"categories":["mysql","数据库"],"content":"mysql服务突然没有了，mysql的服务安装。","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/","tags":["原创","mysql","数据库"],"title":"MySql服务突然没有了","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/"},{"categories":["mysql","数据库"],"content":"一、打开Web界面发现如下错误 看下图的意思是sql连接的错误，后面会单独连接MySql试试看。 MySql连接不上了 ","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/:0:1","tags":["原创","mysql","数据库"],"title":"MySql服务突然没有了","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/"},{"categories":["mysql","数据库"],"content":"二、使用命令连接不上了，如下图： 1.截图如下： MySql连接不上了 2.代码如下： D:\\server\\mysql5714\\bin\u003emysql -h127.0.0.1 -uroot -p Enter password: ****** ERROR 2003 (HY000): Can't connect to MySQL server on '127.0.0.1' (10061) D:\\server\\mysql5714\\bin\u003enet start mysql 服务名无效。 请键入 NET HELPMSG 2185 以获得更多的帮助。 D:\\server\\mysql5714\\bin\u003enet mysql start 此命令的语法是: NET [ ACCOUNTS | COMPUTER | CONFIG | CONTINUE | FILE | GROUP | HELP | HELPMSG | LOCALGROUP | PAUSE | SESSION | SHARE | START | STATISTICS | STOP | TIME | USE | USER | VIEW ] ","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/:0:2","tags":["原创","mysql","数据库"],"title":"MySql服务突然没有了","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/"},{"categories":["mysql","数据库"],"content":"三、计算机服务中去看，也没有MySql服务 服务中看不到MySql ","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/:0:3","tags":["原创","mysql","数据库"],"title":"MySql服务突然没有了","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/"},{"categories":["mysql","数据库"],"content":"四、解决办法 1.重新安装MySql服务： D:\\server\\mysql5714\\bin\u003emysqld.exe -install Service successfully installed. D:\\server\\mysql5714\\bin\u003enet start mysql MySQL 服务正在启动 .. MySQL 服务已经启动成功。 2.再次查看一切正常 一切正常 注意： MySql5.1之前的版本： mysqld-nt.exe -install MySql5.1及后续版本： mysqld.exe -install 会出现 install/remove of the service denied! 错误—》原因，权限不够 解决方法：再次打开cmd.exe，不过这次要右击“Run as administrator”。 ","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/:0:4","tags":["原创","mysql","数据库"],"title":"MySql服务突然没有了","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/"},{"categories":["linux","scp"],"content":"在Linux系统中scp命令的使用，可以远程复制文件，当然也可以远程复制目录，一起来看看吧！","date":"2016-08-10","objectID":"https://daizelai.github.io/posts/linux/room/","tags":["原创","linux","scp"],"title":"Linux之scp复制远程文件","uri":"https://daizelai.github.io/posts/linux/room/"},{"categories":["linux","scp"],"content":"一、语法 1.linux 的 scp 命令 可以 在 linux 之间复制 文件 和 目录； 2.scp 可以在 2个 linux 主机间复制文件； 3.命令基本格式： scp [可选参数] file_source file_target ","date":"2016-08-10","objectID":"https://daizelai.github.io/posts/linux/room/:0:1","tags":["原创","linux","scp"],"title":"Linux之scp复制远程文件","uri":"https://daizelai.github.io/posts/linux/room/"},{"categories":["linux","scp"],"content":"二、从 本地 复制到 远程 复制文件： # scp /home/layne/music/1.mp3 root@test.login-wifi.com:/home/root/others/music # scp /home/layne/music/1.mp3 root@test.login-wifi.com:/home/root/others/music/001.mp3 # scp /home/layne/music/1.mp3 test.login-wifi.com:/home/root/others/music # scp /home/layne/music/1.mp3 test.login-wifi.com:/home/root/others/music/001.mp3 复制目录： # scp -r /home/layne/music/ root@test.login-wifi.com:/home/root/others/ # scp -r /home/layne/music/ test.login-wifi.com:/home/root/others/ 混合复制： [root@master pkg]# scp -r public gbc_create_bin.sh svnExportBy* root@test.login-wifi.com:/home/kevin/manage/Public/shell/pkg The authenticity of host 'test.login-wifi.com (115.29.9.167)' can't be established. RSA key fingerprint is 0f:7e:6d:b8:1c:2b:22:6a:28:3b:2a:f1:25:6c:63:cf. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'test.login-wifi.com' (RSA) to the list of known hosts. gbc1000_app_all.sh 100% 2997 2.9KB/s 00:00 gbc1000_pack_all.sh 100% 1599 1.6KB/s 00:00 gbc_create_bin.sh 100% 805 0.8KB/s 00:00 svnExportByPatch.sh 100% 2994 2.9KB/s 00:00 svnExportByTags.sh 100% 2017 2.0KB/s 00:00 [root@master pkg]# pwd /var/www/html/manage/Public/shell/pkg [root@master pkg]# ","date":"2016-08-10","objectID":"https://daizelai.github.io/posts/linux/room/:0:2","tags":["原创","linux","scp"],"title":"Linux之scp复制远程文件","uri":"https://daizelai.github.io/posts/linux/room/"},{"categories":["linux","scp"],"content":"三、从 远程 复制到 本地 格式 scp 本地用户名 @IP 地址 : 文件名 1 远程用户名 @IP 地址 : 文件名 2 [ 本地用户名 @IP 地址 :] 可以不输入 , 可能需要输入远程用户名所对应的密码 . 可能有用的几个参数 : -v 和大多数linux命令中的-v意思一样,用来显示进度.可以用来查看连接,认证,或是配置错误 . -C 使能压缩选项 . -P 选择端口 . 注意 -p 已经被 rcp 使用 . -4 强行使用 IPV4 地址 . -6 强行使用 IPV6 地址 . # scp root@test.login-wifi.com:/home/root/others/music /home/layne/music/1.mp3 # scp -r test.login-wifi.com:/home/root/others/ /home/layne/music/ ","date":"2016-08-10","objectID":"https://daizelai.github.io/posts/linux/room/:0:3","tags":["原创","linux","scp"],"title":"Linux之scp复制远程文件","uri":"https://daizelai.github.io/posts/linux/room/"},{"categories":["linux","scp"],"content":"四、从远程主机复制文件到本地机（亲测可用） # scp root@www.login-wifi.com:/htdocs/mem.zip /home/layne/ // 注意复制目录需要添加参数-r # scp -r root@www.login-wifi.com:/htdocs/dir /home/layne/ ","date":"2016-08-10","objectID":"https://daizelai.github.io/posts/linux/room/:0:4","tags":["原创","linux","scp"],"title":"Linux之scp复制远程文件","uri":"https://daizelai.github.io/posts/linux/room/"},{"categories":["mysql","数据库"],"content":"mysql密码操作，忘记密码，重置密码等。","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["mysql","数据库"],"content":"一、mysql命令行重置密码 ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:1:0","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["mysql","数据库"],"content":"1.1.首先需要连接进入mysql mysql\u003e select user(); +---------------+ | user() | +---------------+ | root@localhost | +---------------+ 1 row in set (0.00 sec) ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:1:1","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["mysql","数据库"],"content":"1.2.重置新的密码 mysql\u003e set password for root@'localhost'=password('123456'); Query OK, 0 rows affected (0.00 sec) 让它生效 mysql\u003e flush privileges; Query OK, 0 rows affected (0.00 sec) ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:1:2","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["mysql","数据库"],"content":"二、设置mysql数据库root帐号密码 mysqladmin -u root password '新密码' ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:2:0","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["mysql","数据库"],"content":"三、 为root账户设置密码 mysql_secure_installation 回车，根据提示输入Y 输入2次密码，回车 根据提示一路输入Y 最后出现：Thanks for using MySQL! MySql密码设置完成，重新启动 MySQL： /etc/init.d/mysqld restart #重启 /etc/init.d/mysqld stop #停止 /etc/init.d/mysqld start #启动 ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:3:0","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["mysql","数据库"],"content":"四、mysql忘记密码的重置方法 ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:0","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["mysql","数据库"],"content":"4.1.编辑mysql主配置文件 my.cnf # vim /etc/my.cnf 在[mysqld]字段下的位置添加参数 skip-grant :wq //保存退出 ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:1","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["mysql","数据库"],"content":"4.2.重启数据库服务 # service mysqld restart ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:2","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["mysql","数据库"],"content":"4.3.这样就可以进入数据库不用授权了 # mysql -uroot ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:3","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["mysql","数据库"],"content":"4.4.修改相应database的用户密码 \u003e use mysql; \u003e update user set password=password('your password') where user='root'; ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:4","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["mysql","数据库"],"content":"4.5.修改/etc/my.cnf 去掉 skip-grant , 重启mysql服务 # /etc/my.cnf # service mysqld restart ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:5","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["mysql","数据库"],"content":"4.6.番外 ps：同理也可以更改其他的 如wordpress、discuz库的密码： 1，使用mysql -u -p密码，进入mysql; 2，use wordpress； 3，update wp_users set user_pass=MD5(‘新密码’) where wp_users.user_login=’用户’; 4，flush privileges; 5，退出mysql 并重启mysqld服务 ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:6","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["linux","zip"],"content":"Linux之zip、unzip文件的使用手记。","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/","tags":["原创","linux","zip","unzip"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip"],"content":"一、zip/unzip命令说明 ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:1:0","tags":["原创","linux","zip","unzip"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip"],"content":"1.1.功能说明 将一般的文件或者目录进行压缩或者解压，默认生成以“.zip”为后缀的压缩包。zip命令类似于Windows中的winzip压缩程序。其格式如下： zip [选项] 压缩文件名 需要压缩的文档列表 unzip [选项] 压缩文件名 ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:1:1","tags":["原创","linux","zip","unzip"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip"],"content":"1.2.zip选项含义 zip选项含义 -r 递归压缩，将指定目录下的所有文件以及子目录全部压缩 -d 从压缩文件内删除指定的文件 -i “文件列表” 只压缩文件列表中的文件 -x “文件列表” 压缩时排除文件列表中指定的文件 -u 更新文件到压缩文件中 -m 将文件加入压缩文件压缩后，删除原始文件，即把文件移到压缩文件中 -F 尝试修复损坏的压缩文件 -T 检查压缩文件内的每个文件是否正确无误 - 压缩级别 压缩级别是一个1～9的数字 ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:1:2","tags":["原创","linux","zip","unzip"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip"],"content":"1.3.unzip选项含义 unzip选项含义 -x \"文件列表\" 解压文件，但不包含文件列表中指定的文件 -t 测试压缩文件有无损坏，并不解压 -v 查看压缩文件的详细信息，具体包括压缩文件中包含的文件大小、文件名和压缩比等，并不解压 -n 解压时不覆盖已经存在的文件 -o 解压时覆盖已经存在的文件，并且不要求用户确认 -d 目录名 把压缩文件解压到指定目录下 ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:1:3","tags":["原创","linux","zip","unzip"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip"],"content":"二、示例 ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:2:0","tags":["原创","linux","zip","unzip"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip"],"content":"2.1.将lai目录下所有的文件和目录压缩，压缩级别为最高，压缩的文件保存到/root/lai.zip。 [root@localhost lai]# pwd /root/lai [root@localhost lai]# ll 总用量 1024 -rwxr--r--. 1 root root 0 10月 18 11:35 index.php drwxr-xr-x. 2 root root 22 10月 18 11:36 lai_test drwxr-xr-x. 2 root root 33 10月 18 11:37 lai_test2 -rwxr--r--. 1 root root 112563 10月 18 11:35 memcache-3.0.8.zip -rwxr--r--. 1 root root 931437 10月 18 11:35 mhash-0.9.9.9.tar.gz -rwxr--r--. 1 root root 0 10月 18 11:35 test.txt [root@localhost ~]# cd /root [root@localhost ~]# zip -9r /root/lai.zip /root/lai adding: root/lai/ (stored 0%) adding: root/lai/mhash-0.9.9.9.tar.gz (deflated 1%) adding: root/lai/memcache-3.0.8.zip (deflated 13%) adding: root/lai/index.php (stored 0%) adding: root/lai/test.txt (stored 0%) adding: root/lai/lai_test/ (stored 0%) adding: root/lai/lai_test/test1.log (deflated 39%) adding: root/lai/lai_test2/ (stored 0%) adding: root/lai/lai_test2/my.cnf (deflated 44%) adding: root/lai/lai_test2/crontab (deflated 41%) 通过上面这种指定压缩绝对路径压缩出来的文件，也携带有目录结构的，也就是说解压出来第一级是root，下面才是lai目录。 直接压缩当前目录下的lai目录，解压后也就这一层目录。 [root@localhost ~]# zip -9r /root/lai.zip lai adding: lai/ (stored 0%) adding: lai/mhash-0.9.9.9.tar.gz (deflated 1%) adding: lai/memcache-3.0.8.zip (deflated 13%) adding: lai/index.php (stored 0%) adding: lai/test.txt (stored 0%) adding: lai/lai_test/ (stored 0%) adding: lai/lai_test/test1.log (deflated 39%) adding: lai/lai_test2/ (stored 0%) adding: lai/lai_test2/my.cnf (deflated 44%) adding: lai/lai_test2/crontab (deflated 41%) ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:2:1","tags":["原创","linux","zip","unzip"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip"],"content":"2.2.将lai目录下所有的文件和子目录压缩，除了“*.txt”的文件，压缩的文件保存到/root/lai.zip。 [root@localhost ~]# zip -r /root/lai.zip /root/lai -x \"*.txt\" adding: root/lai/ (stored 0%) adding: root/lai/mhash-0.9.9.9.tar.gz (deflated 1%) adding: root/lai/memcache-3.0.8.zip (stored 0%) adding: root/lai/index.php (stored 0%) adding: root/lai/lai_test/ (stored 0%) adding: root/lai/lai_test/test1.log (deflated 39%) adding: root/lai/lai_test2/ (stored 0%) adding: root/lai/lai_test2/my.cnf (deflated 44%) adding: root/lai/lai_test2/crontab (deflated 41%) ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:2:2","tags":["原创","linux","zip","unzip"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip"],"content":"2.3.将lai.zip压缩文件中的 不知道为什么，这里我虽然这样操作了，但把zip解压后，文件还是存在，现在放在这里吧。 [root@localhost ~]# cd test/ [root@localhost test]# zip /root/lai.zip -d /root/lai/memcache-3.0.8.zip deleting: root/lai/memcache-3.0.8.zip ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:2:3","tags":["原创","linux","zip","unzip"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip"],"content":"2.4.把修改后的index.php文件更新到/root/lai.zip压缩文件。 [root@localhost test]# cat lai/index.php \u003c?php phpinfo(); echo \"ok\"; [root@localhost test]# zip -u lai.zip lai/index.php updating: lai/index.php (stored 0%) 如果/lai目录下很多文件进行了修改或者增加了很多文件，就需要把/lai目录下的全部信息更新到/root/lai.zip文件。可以使用以下命令： [root@localhost test]# zip –u lai.zip /lai/* 或者使用 [root@localhost test]# zip –ru lai.zip /lai 其实“/lai/*”就代表了/lai目录下的所有文件以及子目录，而这刚好是zip命令“-r”选项完成的功能。 ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:2:4","tags":["原创","linux","zip","unzip"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip"],"content":"2.5.根据要求解压缩文件 将/root/lai.zip压缩文件除了lai/index.php文件，全部解压到/root/test目录下，并且在解压过程中如果出现相同的文件就直接进行覆盖，不需要用户确认。可以使用以下命令： [root@localhost test]# unzip -o /root/test/lai.zip -x lai/index.php -d /root/test Archive: /root/test/lai.zip creating: /root/test/lai/ inflating: /root/test/lai/mhash-0.9.9.9.tar.gz extracting: /root/test/lai/memcache-3.0.8.zip creating: /root/test/lai/lai_test/ inflating: /root/test/lai/lai_test/test1.log inflating: /root/test/lai/lai_test/qq.txt creating: /root/test/lai/lai_test2/ inflating: /root/test/lai/lai_test2/my.cnf inflating: /root/test/lai/lai_test2/crontab extracting: /root/test/lai/test2.txt extracting: /root/test/lai/test.txt [root@localhost test]# ll lai 总用量 1032 drwxr-xr-x. 2 root root 35 10月 18 13:47 lai_test drwxr-xr-x. 2 root root 33 10月 18 11:37 lai_test2 -rwxr--r--. 1 root root 112563 10月 18 11:35 memcache-3.0.8.zip -rwxr--r--. 1 root root 931437 10月 18 11:35 mhash-0.9.9.9.tar.gz -rw-r--r--. 1 root root 9 10月 18 13:47 test2.txt -rwxr--r--. 1 root root 16 10月 18 13:47 test.txt ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:2:5","tags":["原创","linux","zip","unzip"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":null,"content":"title: “Search Results” sitemap: priority : 0.1 layout: “search” ","date":"0001-01-01","objectID":"https://daizelai.github.io/search/:1:0","tags":null,"title":"","uri":"https://daizelai.github.io/search/"}]