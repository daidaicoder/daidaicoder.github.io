[{"categories":["原创","android","日志框架"],"content":"Android中XLog框架的使用","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"20231130_1631武汉19号线使用新日志框架 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:0:0","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"一、描述 怀疑武汉19号线最近出现的固定台APP异常退出的内存溢出，回到桌面是因为大量写数据到日志文件导致的，项目中使用的写日志到文件，是我自己写的工具类，性能堪忧。 本文主要是把日志工具类替换为XLog日志框架，此框架之前也在此项目中使用过，现在正式启用它看看。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:1:0","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"二、删除无用依赖 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:2:0","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"依赖删除 删除不使用的日志依赖和一个glide依赖。 by daizelai on 2023/11/30 16:37 路径：E:\\develop\\WH19-MetroSystem\\app\\build.gradle // 751其它依赖 implementation project(':binder') annotationProcessor project(':binder-compile') implementation project(':eventlib') implementation 'org.apache.mina:mina-core:2.0.19' implementation 'org.slf4j:slf4j-api:1.7.25' - // 图片 - implementation 'com.github.bumptech.glide:glide:3.7.0' - // log4j日志 - implementation 'log4j:log4j:1.2.17' - implementation 'de.mindpipe.android:android-logging-log4j:1.0.3' - implementation 'com.orhanobut:logger:2.2.0' ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:2:1","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"删除文件 删除以下文件： E:\\develop\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\log\\Log4j.java E:\\develop\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\log\\Log4jConfig.java E:\\develop\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\log\\Logger4.java ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:2:2","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"二、XLog ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:3:0","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"2.1.添加依赖 by daizelai on 2023/11/30 16:47 路径：E:\\develop\\WH19-MetroSystem\\app\\build.gradle + implementation 'com.elvishew:xlog:1.11.0' } CONFIGURE SUCCESSFUL in 0s\rDownload https://jcenter.bintray.com/com/elvishew/xlog/1.11.0/xlog-1.11.0.pom\rDownload https://jcenter.bintray.com/com/elvishew/xlog-libcat/1.0.0/xlog-libcat-1.0.0.pom\rDownload https://jcenter.bintray.com/org/aspectj/aspectjrt/1.9.5/aspectjrt-1.9.5.pom\rDownload https://jcenter.bintray.com/com/elvishew/xlog/1.11.0/xlog-1.11.0.aar\rDownload https://jcenter.bintray.com/org/aspectj/aspectjrt/1.9.5/aspectjrt-1.9.5.jar\rDownload https://jcenter.bintray.com/com/elvishew/xlog-libcat/1.0.0/xlog-libcat-1.0.0.aar\rDownload https://jcenter.bintray.com/org/aspectj/aspectjrt/1.9.5/aspectjrt-1.9.5-sources.jar\rDownload https://jcenter.bintray.com/com/elvishew/xlog/1.11.0/xlog-1.11.0-sources.jar\rDownload https://jcenter.bintray.com/com/elvishew/xlog-libcat/1.0.0/xlog-libcat-1.0.0-sources.jar\rDownload https://dl.google.com/dl/android/maven2/androidx/room/room-runtime/maven-metadata.xml\rDownload https://dl.google.com/dl/android/maven2/androidx/test/monitor/maven-metadata.xml\rDownload https://dl.google.com/dl/android/maven2/androidx/test/services/storage/maven-metadata.xml ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:3:1","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"2.2.自定义xlog文件名类 新建xlog使用到的自定义文件名类。 路径：D:\\code\\android\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\log\\GbcomDateFilePathGenerator.java package com.gbcom.subwaysystem.log; -import android.util.Log; import com.elvishew.xlog.printer.file.naming.FileNameGenerator; - -import java.io.File; -import java.text.SimpleDateFormat; -import java.util.Date; -import java.util.Locale; -import java.util.TimeZone; /** * @author daizelai * @date 2023/12/01 19:16 */ public class GbcomDateFilePathGenerator implements FileNameGenerator { - -//// private String lastFileName = \"\"; -//// ThreadLocal\u003cSimpleDateFormat\u003e mLocalDateFormat = new ThreadLocal\u003cSimpleDateFormat\u003e() { -//// -//// @Override -//// protected SimpleDateFormat initialValue() { -//// return new SimpleDateFormat(\"yyyy-MM-dd\", Locale.US); -//// } -//// }; - - //private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.getDefault()); @Override public boolean isFileNameChangeable() { return true; } @Override public String generateFileName(int logLevel, long timestamp) { -//// Date date = new Date(timestamp); -//// //String dir = dateFormat.format(date); -//// -//// SimpleDateFormat sdf = mLocalDateFormat.get(); -//// sdf.setTimeZone(TimeZone.getDefault()); -//// String fileName = sdf.format(new Date(timestamp)); -//// -//// String dir = sdf.format(date); -//// lastFileName = dir + File.separator + fileName + \".log\"; -//// -//// -//// return lastFileName; return \"train.log\"; } } ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:3:2","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"2.3.自定义xlog备份类 新建xlog使用到的自定义备份类。 路径：D:\\code\\android\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\log\\GbcomFileSizeBackupStrategy.java package com.gbcom.subwaysystem.log; import android.os.HandlerThread; import android.util.Log; import com.elvishew.xlog.printer.file.backup.FileSizeBackupStrategy2; import com.gbcom.subwaysystem.bean.LFileList; import com.gbcom.subwaysystem.constant.MainConstant; import com.gbcom.subwaysystem.listeners.LOnDbFinishedListener; import com.gbcom.subwaysystem.repository.FileListRepository; import com.gbcom.subwaysystem.utils.CommonUtils; import com.gbcom.subwaysystem.utils.MyLogger; import com.gbcom.subwaysystem.utils.ZipUtils; import java.io.File; import java.text.SimpleDateFormat; -import java.util.Calendar; import java.util.Date; import java.util.Locale; import java.util.TimeZone; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; /** * @author daizelai * @date 2023/12/04 17:55 */ public class GbcomFileSizeBackupStrategy extends FileSizeBackupStrategy2 { private static final String TAG = GbcomFileSizeBackupStrategy.class.getSimpleName(); /** * 日志文件的扩展名 */ private String logFileExt = \".log\"; /** * 达到指定文件时的文件名 */ private String backupFileName = \"\"; private ScheduledExecutorService executorService; ThreadLocal\u003cSimpleDateFormat\u003e mLocalDateFormat = new ThreadLocal\u003cSimpleDateFormat\u003e() { @Override protected SimpleDateFormat initialValue() { return new SimpleDateFormat(\"yyyy-MM-dd-HHmmss\", Locale.US); } }; ThreadLocal\u003cSimpleDateFormat\u003e mLocalDirDateFormat = new ThreadLocal\u003cSimpleDateFormat\u003e() { @Override protected SimpleDateFormat initialValue() { return new SimpleDateFormat(\"yyyy-MM-dd\", Locale.US); } }; /** * Constructor. * * @param maxSize the max size the file can reach * @param maxBackupIndex the max backup index, or {@link #NO_LIMIT}, see {@link #getMaxBackupIndex()} */ public GbcomFileSizeBackupStrategy(long maxSize, int maxBackupIndex) { super(maxSize, maxBackupIndex); this.executorService = Executors.newSingleThreadScheduledExecutor(); } @Override public boolean shouldBackup(File file) { boolean shouldBackup = super.shouldBackup(file); if (shouldBackup) { // 备份文件名的自定义生成逻辑，例如根据文件的创建时间生成文件名 backupFileName = generateBackupFileName(file); // 延迟备份操作到后台线程执行，延迟 1 秒 if (null != executorService){ executorService.schedule(() -\u003e performBackup(file, backupFileName), 1, TimeUnit.SECONDS); } else { Log.d(TAG, \"shouldBackup: executorService is null\"); } } return shouldBackup; } -// -// /** -// * 每天凌晨的时候需要备份 -// * -// * @param file -// * @return -// */ -// private boolean checkLastBackupTime(File file) { -// // 每天执行一次备份 -// Calendar today = Calendar.getInstance(); -// today.set(Calendar.HOUR_OF_DAY, 0); -// today.set(Calendar.MINUTE, 0); -// today.set(Calendar.SECOND, 0); -// //today.set(Calendar.MILLISECOND, 0); -// -// Calendar lastBackup = Calendar.getInstance(); -// lastBackup.setTimeInMillis(file.lastModified()); -// Log.d(\"TAG\", \"checkLastBackupTime: istime=\" + today.after(lastBackup)+\", filefilefilefile=\"+file.getAbsolutePath()); -// -// return today.after(lastBackup); -// } /** * 生成备份日志文件的文件名 * @param file * @return */ private String generateBackupFileName(File file) { - // 自定义备份文件名的逻辑，例如根据文件的创建时间生成文件名 long lastModified = file.lastModified(); SimpleDateFormat sdf = mLocalDateFormat.get(); sdf.setTimeZone(TimeZone.getDefault()); String formattedDate = sdf.format(new Date(lastModified)); return formattedDate + logFileExt; } /** * 备份日志后需要对日志文件进行压缩 * @param file * @param backupFileName */ private void performBackup(File file, String backupFileName) { SimpleDateFormat sdf = mLocalDirDateFormat.get(); sdf.setTimeZone(TimeZone.getDefault()); String logSaveDir = sdf.format(new Date(file.lastModified())); long fileSize = file.length(); String saveFileName = file.getParent() + File.separator + backupFileName; - // 2023-12-03 23:28:16.191 20755-20835/com.gbcom.subwaysystem D/TAG: id=1488, performBackup: len=216406,getAbsolut","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:3:3","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"2.4.创建xlog需要的自定义日志格式类 路径：D:\\code\\android\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\log\\GbcomFlattener.java package com.gbcom.subwaysystem.log; import android.os.Build; import android.util.Log; import com.elvishew.xlog.flattener.Flattener; import com.elvishew.xlog.flattener.Flattener2; import java.text.SimpleDateFormat; import java.util.Calendar; import java.util.Date; /** * 日志输出格式 * * @author daizelai * @date 2023/12/04 18:08 */ public class GbcomFlattener implements Flattener, Flattener2 { @Override public CharSequence flatten(int logLevel, String tag, String message) { return flatten(System.currentTimeMillis(), logLevel, tag, message); } @Override public CharSequence flatten(long timeMillis, int logLevel, String tag, String message) { return getCurrDateTime() + \" | \" + getLevelName(logLevel) + \" | \" + tag + \" | \" + message; } private String getCurrDateTime() { if (Build.VERSION.SDK_INT \u003e= 24) { return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(new Date()); } else { Calendar calendar = Calendar.getInstance(); return String.format(\"%04d-%02d-%02d %02d:%02d:%02d.%03d\", calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH), calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND), calendar.get(Calendar.MILLISECOND)); } } private String getLevelName(int logLevel) { switch (logLevel) { case Log.VERBOSE: return \"VERBOSE\"; case Log.DEBUG: return \" DEBUG \"; case Log.INFO: return \" INFO \"; case Log.WARN: return \" WARN \"; case Log.ERROR: return \" ERROR \"; default: return \"UNKNOWN\"; } } } ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:3:4","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"2.5.xlog初始化 在Application中初始化xlog。 路径：D:\\code\\android\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\application\\SystemApplication.java package com.gbcom.subwaysystem.application; import android.app.Application; import android.content.Context; import android.util.Log; import androidx.multidex.MultiDex; +import com.elvishew.xlog.LogConfiguration; +import com.elvishew.xlog.LogLevel; +import com.elvishew.xlog.XLog; +import com.elvishew.xlog.printer.AndroidPrinter; +import com.elvishew.xlog.printer.Printer; +import com.elvishew.xlog.printer.file.FilePrinter; import com.gbcom.subwaysystem.crash.CrashHandler; import com.gbcom.subwaysystem.log.GbcomDateFilePathGenerator; import com.gbcom.subwaysystem.log.GbcomFileSizeBackupStrategy; import com.gbcom.subwaysystem.log.GbcomFlattener; import com.gbcom.subwaysystem.utils.MyLogger; import com.tdtech.providers.econtacts.EContactsProviderApplication; import lte.trunk.tapp.sdk.TAppFramework; import lte.trunk.terminal.contacts.ContactsApplication; import lte.trunk.tms.api.TMSCore; public class SystemApplication extends Application { public static final String TAG = SystemApplication.class.getSimpleName(); private static Context mContext; public static Context getmContext() { return mContext; } public static Application getApplication() { return getApplication(); } @Override protected void attachBaseContext(Context base) { super.attachBaseContext(base); MultiDex.install(base); } @Override public void onCreate() { super.onCreate(); mContext = getApplicationContext(); // 异常处理 CrashHandler.getInstance().init(getApplicationContext()); initLog(); try { TMSCore.initInstance(this); //只做初始化，但是不启动SDK内部的service。待动态申请权限后，再启动后台的service TAppFramework.initApplication(this, false); EContactsProviderApplication.getInstance().init(this); ContactsApplication.getInstance().init(this); MyLogger.record(TAG + \", app onCreate()\"); } catch (Exception e) { MyLogger.record(TAG + \", init SDK error, e=\" + e.getMessage()); } } private void initLog() { String logSaveDir = FileUtils.getLogPath(); -// XLog.init(LogLevel.ALL); - // flattener设置日志文件内容输出格式，默认DefaultFlattener，默认的格式是时间戳|日志级别|tag FilePrinter filePrinter = new FilePrinter // 打印(保存)日志到文件的打印机 .Builder(logSaveDir)// 指定日志文件的目录路径 - //.Builder(new File(\"/custom/metro/gbcom_log\", \"log\").getPath())// 指定日志文件的目录路径 - //.fileNameGenerator(new DateFileNameGenerator()) //自定义文件名称 默认值:ChangelessFileNameGenerator(“日志”) .fileNameGenerator(new GbcomDateFilePathGenerator()) //自定义文件名称 默认值:ChangelessFileNameGenerator(“日志”) - //.backupStrategy(new FileSizeBackupStrategy2(2 * 1024 * 1024, 0)) //单个日志文件的大小默认:FileSizeBackupStrategy(1024 * 1024)【3 * 1024 * 1024】 .backupStrategy(new GbcomFileSizeBackupStrategy(MainConstant.APP_FILE_SAVE_LOG_SIZE, 0)) //单个日志文件的大小默认:FileSizeBackupStrategy(1024 * 1024)【3 * 1024 * 1024】 - //.cleanStrategy(new FileLastModifiedCleanStrategy(30L * 24L * 60L * 60L * 1000L)) //日志文件存活时间，单位毫秒【单位毫秒。当日志文件超过指定的时间，在下次执行打印的时候就会被清除！防止日志文件过多占用存储空间！这里要注意int类型数据溢出哦！建议用long类型的参数！】 - //.cleanStrategy(new NeverCleanStrategy ()) //日志文件存活时间，单位毫秒【单位毫秒。当日志文件超过指定的时间，在下次执行打印的时候就会被清除！防止日志文件过多占用存储空间！这里要注意int类型数据溢出哦！建议用long类型的参数！】 .flattener(new GbcomFlattener()) //自定义flattener，控制打印格式-DefaultFlattener() .build(); // 通过 android.util.Log 打印日志的打印器，必须调用它，否则没办法在控制台上打印出来 Printer androidPrinter = new AndroidPrinter(true); // 经过 android.util.Log 打印日志的打印器 - //Printer consolePrinter = new ConsolePrinter(); // 经过 System.out 打印日志到控制台的打印器 // 初始化，这一段的初始化方法全局只用执行一次就够了 LogConfiguration config = new LogConfiguration.Builder() - //.logLevel(BuildConfig.DEBUG ? LogLevel.ALL // 指定日志等级，低于该等级的日志将不会被打印，默以为 LogLevel.ALL - // : LogLevel.NONE) .logLevel(LogLevel.ALL) - .tag(\"Gbcom-log\") // 指定 TAG，默以为 \"X-LOG\" - .enableThreadInfo() // 答应打印线程信息，默许制止 - .enableStackTrace(2) // 答应打印深度为 2 的调用栈信息，默许制止 -// .enableBorder() // 答应打印日志边框，默许制止 -// .jsonFormatter(new MyJsonFormatter()) // 指定 JSON 格局化器，默以为 DefaultJsonFormatter -// .xmlFormatter(new MyXmlFormatter()) // 指定 XML 格局化器，默以为 DefaultXmlFormatter -// .throwableForma","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:3:5","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"2.6.获取日志保存目录 获取日志保存的位置。 路径：D:\\code\\android\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\utils\\FileUtils.java /** * 返回SC60文件的存储路径 * * @return * @author daizelai * @date 2021/12/09 18:14 */ public static String getMetroVoiceStoragePath() { String path = getMetroStoragePath() + File.separator + \"voice\" + File.separator + CommonUtils.getDate(); try { File file = new File(path); if (!file.exists()) { file.mkdirs(); } } catch (Exception e) { e.printStackTrace(); } return path; } + + /** + * 获取日志存储目录 + * + * @return + * @author daizelai + * @date 2023/12/04 19:18 + */ + public static String getLogPath() { + String path = \"\"; + try { + path = getMetroSonStoragePath(MainConstant.APP_FILE_SAVE_LOG_DIR + File.separator + MainConstant.APP_FILE_SAVE_LOG_BEHAVIOR_DIR); + if (path == null) { + path = getSDPath(MainConstant.APP_FILE_SAVE_LOG_BEHAVIOR_DIR); + } + } catch (Exception e) { + MyLogger.error(\"getLogPath - Exception=\" + e.getMessage()); + } + + return path; + } ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:3:6","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"2.7.配置常量 定义日志文件大小。 2023/12/04 22:19 路径：D:\\code\\android\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\constant\\MainConstant.java /** * 文件存储路径 * APP_FILE_SAVE_ROOT_DIR：文件保存的顶级目录名 * APP_FILE_SAVE_CONFIG_DIR：开局配置文件备份的存储路径 * APP_FILE_SAVE_BAK_DIR = \"backup\"：此目录表示train下面的备份目录，文件只要被扫描过了都放置在此目录 * APP_FILE_SAVE_PCM_DIR：音频文件保存的目录名 * APP_FILE_SAVE_PCAP_DIR：抓去的报文保存目录名 * APP_FILE_SAVE_LOG_DIR：apk异常日志保存目录名 * APP_FILE_SAVE_LOG_BEHAVIOR_DIR = \"behavior\"：用户行为日志保存目录 * APP_FILE_SAVE_LOG_SIZE: 默认生成的日志文件大小为2M(2 * 1024 * 1024) */ public static final String APP_FILE_SAVE_ROOT_DIR = \"train\"; public static final String APP_FILE_SAVE_CONFIG_DIR = \"config\"; public static final String APP_FILE_SAVE_BROADCAST_DIR = \"bro\"; public static final String APP_FILE_SAVE_BAK_DIR = \"backup\"; public static final String APP_FILE_SAVE_PCM_DIR = \"pcm\"; public static final String APP_FILE_SAVE_PCAP_DIR = \"pcap\"; public static final String APP_FILE_SAVE_LOG_DIR = \"log\"; public static final String APP_FILE_SAVE_LOG_RUN_DIR = \"run\"; public static final String APP_FILE_SAVE_LOG_BEHAVIOR_DIR = \"behavior\"; public static final String APP_FILE_SAVE_LOG_EXCEPTION_DIR = \"exception\"; public static final String APP_FILE_SAVE_CRASH_LOG_DIR = \"crashLog\"; public static final String APP_FILE_SAVE_ATTACH_DIR = \"attachment\"; public static final String APP_FILE_SAVE_TMP_DIR = \"tmp\"; public static final int APP_FILE_SAVE_LOG_SIZE = 20 * 1024 * 1024; ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:3:7","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"三、替换日志框架 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:4:0","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"3.1.当前日志工具类 今天2023/12/04 22:21之前的日志工具类源码，是自己写的一个源码。 路径：D:\\code\\android\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\utils\\MyLogger.java package com.gbcom.subwaysystem.utils; import android.util.Log; /** * 日志封装使用 * * @author daizelai * @date 2020/05/13 11:26 */ public class MyLogger { private static final String TAG = MyLogger.class.getSimpleName(); private final static boolean logFlag = true; /** * 日志文件 */ private static String userName = \"train\"; public MyLogger(String userName) { this.userName = userName; } /** * 获取方法名 * * @return */ private static String getFunctionName() { StackTraceElement[] sts = Thread.currentThread().getStackTrace(); if (sts == null) { return null; } for (StackTraceElement st : sts) { if (st.isNativeMethod()) { continue; } if (st.getClassName().equals(Thread.class.getName())) { continue; } if (st.getClassName().equals(MyLogger.class.getName())) { continue; } return \"[ \" + Thread.currentThread().getName() + \": \" + st.getFileName().replace(\".java\", \"\") + \":\" + st.getLineNumber() + \" ]\"; } return null; } public static void info(String str) { if (logFlag) { String name = getFunctionName(); try { if (name != null) { LogUtil.ii(name, str); } else { LogUtil.ii(TAG, \"info - \" + str); } } catch (Exception e) { e.printStackTrace(); Log.i(TAG, name + \" - Exception - \" + str); } } } public static void debug(String str) { if (logFlag) { String name = getFunctionName(); try { Log.d(TAG, \"debug: \" + str); } catch (Exception e) { e.printStackTrace(); Log.d(TAG, name + \" - Exception - \" + str); } } } /** * 用户行为日志 * * @param str */ public static void record(String str) { if (logFlag) { String name = getFunctionName(); try { if (name != null) { LogUtil.d(name, str); } else { LogUtil.d(\"record\", str); } } catch (Exception e) { e.printStackTrace(); Log.d(TAG, name + \" - \" + str); } } } /** * 信息太长,分段打印 * @param str */ public static void debugMax(String str) { if (logFlag) { String name = getFunctionName(); if (name != null) { //为String的length是字符数量不是字节数量所以为了防止中文字符过多，把4*1024的MAX字节打印长度改为2001字符数 int max_str_length = 2001 - name.length(); //大于4000时 while (str.length() \u003e max_str_length) { Log.d(name, str.substring(0, max_str_length)); str = str.substring(max_str_length); } //剩余部分 Log.d(name, str); } else { // 因为String的length是字符数量不是字节数量所以为了防止中文字符过多，把4*1024的MAX字节打印长度改为2001字符数 int max_str_length = 2001; //大于4000时 while (str.length() \u003e max_str_length) { Log.d(name, str.substring(0, max_str_length)); str = str.substring(max_str_length); } //剩余部分 Log.d(name, str); } } } /** * 记录错误日志，记录错误日志时，同时也会记录record日志 * * @param str */ public static void error(String str) { if (logFlag) { String name = getFunctionName(); if (name != null) { LogUtil.ee(name, str); } else { LogUtil.ee(TAG, \"error - \" + str); } } } } ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:4:1","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"3.2.替换后的日志工具类 候后的调用的日志工具类。by daizelai on 2023/12/05 13:33 路径：D:\\code\\android\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\utils\\MyLogger.java package com.gbcom.subwaysystem.utils; import android.util.Log; import com.elvishew.xlog.LogLevel; import com.elvishew.xlog.XLog; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.LinkedBlockingQueue; /** * 日志封装使用 * Log.v 的调试颜色为黑色的，任何消息都会输出，这里的v代表verbose啰嗦的意思，平时使用就是Log.v(\"\",\"\"); * Log.d的输出颜色是蓝色的，仅输出debug调试的意思，但他会输出上层的信息，过滤起来可以通过DDMS的Logcat标签来选择 * Log.i的输出为绿色，一般提示性的消息information，它不会输出Log.v和Log.d的信息，但会显示i、w和e的信息 * Log.w的意思为橙色，可以看作为warning警告，一般需要我们注意优化Android代码，同时选择它后还会输出Log.e的信息。 * Log.e为红色，可以想到error错误，这里仅显示红色的错误信息，这些错误就需要我们认真的分析，查看栈的信息了。 * * @author daizelai * @date 2020/05/13 11:26 */ public class MyLogger { private static final String TAG = MyLogger.class.getSimpleName(); private final static boolean logFlag = true; private static final ExecutorService logExecutor = Executors.newSingleThreadExecutor(); /** * 设置队列的最大容量 */ private static final int MAX_QUEUE_SIZE = 1000; private static final LinkedBlockingQueue\u003cString\u003e logQueue = new LinkedBlockingQueue\u003c\u003e(MAX_QUEUE_SIZE); /** * 获取方法名 * * @return */ private static String getFunctionName() { StackTraceElement[] sts = Thread.currentThread().getStackTrace(); if (sts == null) { return null; } for (StackTraceElement st : sts) { if (st.isNativeMethod()) { continue; } if (st.getClassName().equals(Thread.class.getName())) { continue; } if (st.getClassName().equals(MyLogger.class.getName())) { continue; } return \"[ \" + Thread.currentThread().getName() + \":\" + st.getFileName().replace(\".java\", \"\") + \":\" + st.getLineNumber() + \" ]\"; } return null; } public static void verbose(String str) { if (logFlag) { String name = getFunctionName(); try { if (name != null) { enqueueLog(LogLevel.VERBOSE, name, str); } else { enqueueLog(LogLevel.VERBOSE, \"\", str); } } catch (Exception e) { Log.v(TAG, \"verbose - \" + name + \" - Exception - \" + str); } } } public static void warn(String str) { if (logFlag) { String name = getFunctionName(); try { if (name != null) { enqueueLog(LogLevel.WARN, name, str); } else { enqueueLog(LogLevel.WARN, \"\", str); } } catch (Exception e) { Log.v(TAG, \"warn - \" + name + \" - Exception - \" + str); } } } public static void info(String str) { if (logFlag) { String name = getFunctionName(); try { if (name != null) { - //XLog.i(name + \", \" + str); - enqueueLog(LogLevel.INFO, \"\", name + \", \" + str); enqueueLog(LogLevel.INFO, name, str); } else { - //XLog.i(str); enqueueLog(LogLevel.INFO, \"\", str); } } catch (Exception e) { Log.i(TAG, \"info - \" + name + \" - Exception - \" + str); } } } public static void debug(String str) { if (logFlag) { String name = getFunctionName(); try { if (name != null) { - //XLog.d(name + \", \" + str); - enqueueLog(LogLevel.DEBUG, \"\", name + \", \" + str); enqueueLog(LogLevel.DEBUG, name, str); } else { -// XLog.d(str); enqueueLog(LogLevel.DEBUG, \"\", str); } } catch (Exception e) { Log.d(TAG, \"debug - \" + name + \" - Exception - \" + str); } } } /** * 用户行为日志 * * @param str */ public static void record(String str) { if (logFlag) { String name = getFunctionName(); try { if (name != null) { -// XLog.i(name + \", \" + str); - enqueueLog(LogLevel.INFO, \"\", name + \", \" + str); enqueueLog(LogLevel.INFO, name, str); } else { -// XLog.i(str); enqueueLog(LogLevel.INFO, \"\", str); } } catch (Exception e) { Log.d(TAG, \"record - \" + name + \" - \" + str); } } } /** * 记录错误日志，记录错误日志时，同时也会记录record日志 * * @param str */ public static void error(String str) { if (logFlag) { String name = getFunctionName(); try { if (name != null) { - //XLog.e(name + \", \" + str); - enqueueLog(LogLevel.ERROR, \"\", name + \", \" + str); enqueueLog(LogLevel.ERROR, name, str); } else { - //XLog.e(str); enqueueLog(LogLevel.ERROR, \"\", str); } } catch (Exception e) { Log.d(TAG, \"error - \" + name + \" - \" + str); } } } private static void enqueueLog(final int logLevel, final String tag, final String messag","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:4:2","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","android","日志框架"],"content":"四、日志文件效果 msm8953_64:/custom/metro/log/behavior # date\rTue Dec 5 13:30:22 CST 2023\rmsm8953_64:/custom/metro/log/behavior # ls -l\rtotal 3640\rdrwx------ 2 system system 4096 2023-12-02 07:15 2023-12-02\rdrwx------ 2 system system 4096 2023-12-05 11:40 2023-12-05\rdrwx------ 2 system system 4096 2023-12-05 13:22 tmp\r-rw------- 1 system system 1845644 2023-12-05 13:30 train.log\rmsm8953_64:/custom/metro/log/behavior # ls -l 2023\r2023-12-02/ 2023-12-05/\rmsm8953_64:/custom/metro/log/behavior # ls -l 2023-12-02\rtotal 1632\r-rw------- 1 system system 412805 2023-12-02 06:46 2023-12-02-064652.log.gz\r-rw------- 1 system system 420703 2023-12-02 07:16 2023-12-02-071558.log.gz\rmsm8953_64:/custom/metro/log/behavior # ls -lh 2023-12-02\rtotal 816K\r-rw------- 1 system system 403K 2023-12-02 06:46 2023-12-02-064652.log.gz\r-rw------- 1 system system 411K 2023-12-02 07:16 2023-12-02-071558.log.gz\rmsm8953_64:/custom/metro/log/behavior # tail train.log\r2023-12-05 13:30:38.227 | DEBUG | Gbcom-log | [ LMonitorPollingService_MonitorPollingThread:UDPDcRepository:136 ], udp start send getDSCfgInfoReq - mDsObj={\"MsgSeqID\":1701754238,\"MsgName\":\"GetDSCfgInfoReq\",\"MsgInfo\":{\"UserID\":\"\"}}\r2023-12-05 13:30:38.228 | INFO | Gbcom-log | [ LMonitorPollingService_MonitorPollingThread:MonitorPollingThread:84 ], MonitorPollingThread, System time check - getTime=1701754238, beatTime=0, difference=600000\r2023-12-05 13:30:38.230 | INFO | Gbcom-log | [ pool-7-thread-1:UdpDcService:244 ], UdpDcService, dis_server - data sent successfully - message=[B@9776277\r2023-12-05 13:30:38.232 | INFO | Gbcom-log | [ LMonitorPollingService_MonitorPollingThread:MonitorPollingThread:100 ], MonitorPollingThread, DBA server timeout check - failure, TRAIN_DBA_LAST_CONNECTED=0, time=101655103, timeout=60000\r2023-12-05 13:30:38.234 | DEBUG | Gbcom-log | [ LMonitorPollingService_MonitorPollingThread:UDPDbaRepository:332 ], TCPRepository, getNTPInfoReq()={\"MsgInfo\":{},\"MsgSeqID\":1701754238,\"MsgName\":\"GetNTPInfoReq\"}\r2023-12-05 13:30:38.236 | INFO | Gbcom-log | [ pool-6-thread-1:UdpDbaService:293 ], UdpDbaService, sendMessage() - dba_server - data sent run: message=={\"MsgInfo\":{},\"MsgSeqID\":1701754238,\"MsgName\":\"GetNTPInfoReq\"}\r2023-12-05 13:30:40.297 | INFO | Gbcom-log | [ RadioStatusScheduledTaskExecutor:UDPDbaRepository:311 ], getMasterStatusReq - jsonData={\"MsgInfo\":{},\"MsgSeqID\":1701754240,\"MsgName\":\"GetMasterStatusReq\"}\r2023-12-05 13:30:40.300 | INFO | Gbcom-log | [ pool-6-thread-2:UdpDbaService:293 ], UdpDbaService, sendMessage() - dba_server - data sent run: message=={\"MsgInfo\":{},\"MsgSeqID\":1701754240,\"MsgName\":\"GetRadioStatusReq\"}\r2023-12-05 13:30:40.306 | INFO | Gbcom-log | [ pool-6-thread-1:UdpDbaService:293 ], UdpDbaService, sendMessage() - dba_server - data sent run: message=={\"MsgInfo\":{},\"MsgSeqID\":1701754240,\"MsgName\":\"GetMasterStatusReq\"}\r2023-12-05 13:30:41.259 | INFO | Gbcom-log | [ LMonitorPollingService_MonitorPollingThread:MonitorPollingThread:158 ], MonitorPollingThread, PA server connection timeout - failure, isWork3=false, address=192.0.1.2\rmsm8953_64:/custom/metro/log/behavior # ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/:5:0","tags":["原创","android","app开发","日志框架"],"title":"Android中XLog框架的使用","uri":"https://daizelai.github.io/posts/android/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/20231130_1631%E6%AD%A6%E6%B1%8919%E5%8F%B7%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%96%B0%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"系统启动后修改usb网卡的mac地址","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"20231130_1115系统启动后修改usb网卡的mac地址 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:0:0","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"一、描述 由于无法通过工具直接修改usb网卡的mac地址，所以做了个变通的方法，通过在系统启动后来修改mac地址。 配置文件样本： system_config.ini ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:1:0","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"二、配置文件 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:2:0","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"2.1.配置文件内容 也是在配置文件中配置参数。如下所示： [system] self_mac=11:aa:bb:cc:dd 注意，配置时请使用合法的mac地址，非法的mac地址就不会生效。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:2:1","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"2.2.配置文件说明 配置文件中的[system]只是为了区分，最主要的配置项是self_mac。 其中，self_mac表示修改后的mac地址，请设置合法mac地址。 配置项中=号前后不需要空格。 当系统在启动时，检测到self_mac值时，将会修改eth0的mac地址。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:2:2","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"2.3.配置文件路径 配置文件存放在/custom/metro/system路径下。 msm8953_64:/custom/metro/system # pwd\r/custom/metro/system\rmsm8953_64:/custom/metro/system # ls -l\rtotal 8\r-rw-rw-rw- 1 root root 100 2023-11-29 19:17 system_config.ini\rmsm8953_64:/custom/metro/system # ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:2:3","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"三、基本逻辑 修改mac地址的基本逻辑如下： 端口eth0不在，不会设置mac地址。 无配置文件，不会设置mac地址。 有self_mac=但未设置值，不会设置mac地址。 配置了self_mac地址，但是mac不合法，不会设置mac地址。 正确的设置了合法的mac地址，会设置mac地址。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:3:0","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"四、操作说明 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:4:0","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"4.1.编辑配置文件 可以根据需要配置正确的配置项。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:4:1","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"4.2.替换配置文件 使用adb命令替换配置文件，如果终端系统刷机后，此默认是没有配置项的，需要人工去替换配置文件。 本配置文件一般会有产测的时候需要做这一步，后期可根据需要做好维护工作。 C:\\Users\\daizelai\u003eadb root\radbd is already running as root\rC:\\Users\\daizelai\u003eadb push E:\\SC60\\wuhan19_fx_20231030_1645\\os\\system_config.ini\radb.exe: push requires an argument\rC:\\Users\\daizelai\u003eadb push E:\\SC60\\wuhan19_fx_20231030_1645\\os\\system_config.ini /custom/metro/system/\rE:\\SC60\\wuhan19_fx_20231030_1645\\os\\system_config.ini: 1 file pushed, 0 skipped. 0.1 MB/s (95 bytes in 0.001s)\rC:\\Users\\daizelai\u003e ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:4:2","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"4.3.重启设备生效 导入配置后，需要重启设备生效。 msm8953_64:/custom/metro/system # reboot ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:4:3","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"五、检查结果 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:5:0","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"5.1.检查命令 检查是否修改成功，可以使用ifconfig命令检查。 # adb shell\r# ifconfig ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:5:1","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"5.2.查看默认mac地址 未导入配置文件时，查看到的mac地址。 C:\\Users\\daizelai\u003eadb connect 192.168.42.137:5566\rconnected to 192.168.42.137:5566\rC:\\Users\\daizelai\u003eadb devices\rList of devices attached\r192.168.42.137:5566 device\rC:\\Users\\daizelai\u003eadb shell\rmsm8953_64:/ # date\rSat Jan 10 18:04:02 CST 1970\rmsm8953_64:/ #\rmsm8953_64:/ # ifconfig\rrmnet_ipa0 Link encap:UNSPEC\rUP RUNNING MTU:2000 Metric:1\rRX packets:0 errors:0 dropped:0 overruns:0 frame:0\rTX packets:0 errors:0 dropped:0 overruns:0 carrier:0\rcollisions:0 txqueuelen:1000\rRX bytes:0 TX bytes:0\reth0 Link encap:Ethernet HWaddr 00:e0:99:8e:26:a1\rinet addr:192.168.42.137 Bcast:192.168.42.255 Mask:255.255.255.0\rinet6 addr: fe80::2e0:99ff:fe8e:26a1/64 Scope: Link\rUP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1\rRX packets:21088 errors:0 dropped:1859 overruns:0 frame:0\rTX packets:681 errors:0 dropped:0 overruns:0 carrier:0\rcollisions:0 txqueuelen:1000\rRX bytes:2159787 TX bytes:140030\rdummy0 Link encap:Ethernet HWaddr 9e:10:4c:e9:e4:1f\rinet6 addr: fe80::9c10:4cff:fee9:e41f/64 Scope: Link\rUP BROADCAST RUNNING NOARP MTU:1500 Metric:1\rRX packets:0 errors:0 dropped:0 overruns:0 frame:0\rTX packets:3 errors:0 dropped:0 overruns:0 carrier:0\rcollisions:0 txqueuelen:0\rRX bytes:0 TX bytes:210\rlo Link encap:Local Loopback\rinet addr:127.0.0.1 Mask:255.0.0.0\rinet6 addr: ::1/128 Scope: Host\rUP LOOPBACK RUNNING MTU:65536 Metric:1\rRX packets:132 errors:0 dropped:0 overruns:0 frame:0\rTX packets:132 errors:0 dropped:0 overruns:0 carrier:0\rcollisions:0 txqueuelen:0\rRX bytes:12158 TX bytes:12158\rmsm8953_64:/ # ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:5:2","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"5.3.导入配置文件 导入配置文件到设备。 C:\\Users\\daizelai\u003eadb push E:\\SC60\\wuhan19_fx_20231030_1645\\os\\system_config.ini /custom/metro/system\rE:\\SC60\\wuhan19_fx_20231030_1645\\os\\system_config.ini: 1 file pushed, 0 skipped. 0.0 MB/s (100 bytes in 0.006s)\rC:\\Users\\daizelai\u003eadb shell\rmsm8953_64:/ # date\rSat Jan 10 18:06:03 CST 1970\rmsm8953_64:/ #\rmsm8953_64:/ # cd /custom/metro/system\rmsm8953_64:/custom/metro/system # cat system_config.ini\r[system]\rself_mac=00:e0:99:8e:28:a8\r[screen]\rreset_code=0xb1,0x31,0xb5,0xbd,0x35\rperiod_time=8000\rmsm8953_64:/custom/metro/system # ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:5:3","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"5.4.重启生效 重启生效。 msm8953_64:/custom/metro/system # reboot ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:5:4","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"5.5.查看当前mac地址 查看当前mac地址： C:\\Users\\daizelai\u003eadb connect 192.168.42.137:5566\ralready connected to 192.168.42.137:5566\rC:\\Users\\daizelai\u003edate\r当前日期: 2023/11/29 周三\r输入新日期: (年月日)\rC:\\Users\\daizelai\u003etime\r当前时间: 19:19:52.84\r输入新时间:\rC:\\Users\\daizelai\u003eadb shell\rmsm8953_64:/ # ifconfig\rrmnet_ipa0 Link encap:UNSPEC\rUP RUNNING MTU:2000 Metric:1\rRX packets:0 errors:0 dropped:0 overruns:0 frame:0\rTX packets:0 errors:0 dropped:0 overruns:0 carrier:0\rcollisions:0 txqueuelen:1000\rRX bytes:0 TX bytes:0\reth0 Link encap:Ethernet HWaddr 00:e0:99:8e:28:a8\rinet addr:192.168.42.137 Bcast:192.168.42.255 Mask:255.255.255.0\rinet6 addr: fe80::2e0:99ff:fe8e:28a8/64 Scope: Link\rUP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1\rRX packets:6634 errors:0 dropped:429 overruns:0 frame:0\rTX packets:597 errors:0 dropped:0 overruns:0 carrier:0\rcollisions:0 txqueuelen:1000\rRX bytes:473425 TX bytes:68361\rdummy0 Link encap:Ethernet HWaddr 1e:a8:8a:35:d9:d0\rinet6 addr: fe80::1ca8:8aff:fe35:d9d0/64 Scope: Link\rUP BROADCAST RUNNING NOARP MTU:1500 Metric:1\rRX packets:0 errors:0 dropped:0 overruns:0 frame:0\rTX packets:3 errors:0 dropped:0 overruns:0 carrier:0\rcollisions:0 txqueuelen:0\rRX bytes:0 TX bytes:210\rlo Link encap:Local Loopback\rinet addr:127.0.0.1 Mask:255.0.0.0\rinet6 addr: ::1/128 Scope: Host\rUP LOOPBACK RUNNING MTU:65536 Metric:1\rRX packets:93 errors:0 dropped:0 overruns:0 frame:0\rTX packets:93 errors:0 dropped:0 overruns:0 carrier:0\rcollisions:0 txqueuelen:0\rRX bytes:8013 TX bytes:8013\rmsm8953_64:/ # 确认当前的eth0的mac地址就是配置文件中的mac地址，以前当前网络是正常上网的，表示修改成功。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:5:5","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"5.6.反复验证 还可多重启设备几次，看看mac地址是否一直保持配置文件中的同样的mac地址。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/:5:6","tags":["原创","android","msm8953_64","SC60"],"title":"系统启动后修改usb网卡的mac地址","uri":"https://daizelai.github.io/posts/sc60/20231130_1115%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%90%8E%E4%BF%AE%E6%94%B9usb%E7%BD%91%E5%8D%A1%E7%9A%84mac%E5%9C%B0%E5%9D%80/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"android屏幕重置,终端屏幕自动修复配置的使用","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"20231130_0900终端屏幕自动修复配置的使用 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:0:0","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"一、描述 本文记录了如何在终端上配置屏幕自动修复的方法，以及如何查看是否执行了修复操作。 版本路径： \\10.1.1.154\\00-网络u盘\\地铁集群二开项目\\版本\\SC60\\E220\\WH19\\TX\\20231130\\userdebug_emmc_20231130_1135.7z 配置文件样本： system_config.ini ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:1:0","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"二、配置文件 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:2:0","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"2.1.配置文件内容 配置文件内容如下所示： [system] self_mac=11:aa:bb:cc:dd [screen] reset_code=0xb1,0xb5,0x31,0xbd period_time=5000 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:2:1","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"2.2.配置文件说明 配置文件中的[screen]只是为了区分，最主要的配置项是reset_code和period_time。 其中reset_code表示检测码，period_time表示单次修复的间隔时间。 配置项中=号前后不需要空格。 配置文件中的period_time字段单位是毫秒，即如果是5秒，需要配置5000，如果1天需要配置86400000。 当系统检测到配置项中的某个reset_code时，会在达到period_time时间时修复一次，period_time项配置的时间不是绝对值，是一个大概区间值。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:2:2","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"2.3.配置文件路径 配置文件存放在/custom/metro/system路径下。 msm8953_64:/custom/metro/system # pwd\r/custom/metro/system\rmsm8953_64:/custom/metro/system # ls -l\rtotal 8\r-rw-rw-rw- 1 root root 100 2023-11-29 19:17 system_config.ini\rmsm8953_64:/custom/metro/system # ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:2:3","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"三、自动修复基本逻辑 基本逻辑如下： 无配置文件，默认修复时间为5秒检测一次，当遇到异常时，且是在默认的错误码[0xb1/0x31/0xb5/0xbd]中时会修复一次，没有检查到检测码，继续下一次。 有配置文件，以配置文件中配置的检测码为准。 有配置文件，以配置文件中的检查时间为准，但未配置或配置小于5秒，以5秒为间隔，配置超过或等于INT范围时，以一天86400秒为准。 下面是屏幕修复的主要流程： ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:3:0","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"四、操作说明 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:4:0","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"4.1.编辑配置文件 可以根据需要配置正确的配置项。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:4:1","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"4.2.替换配置文件 使用adb命令替换配置文件，如果终端系统刷机后，此默认是没有配置项的，需要人工去替换配置文件。 后期会做到上层应用中，通过服务器下发此配置项来覆盖人工操作。 下面是一次成功的替换配置文件的操作记录。 C:\\Users\\daizelai\u003eadb root\radbd is already running as root\rC:\\Users\\daizelai\u003eadb push E:\\SC60\\wuhan19_fx_20231030_1645\\os\\system_config.ini\radb.exe: push requires an argument\rC:\\Users\\daizelai\u003eadb push E:\\SC60\\wuhan19_fx_20231030_1645\\os\\system_config.ini /custom/metro/system/\rE:\\SC60\\wuhan19_fx_20231030_1645\\os\\system_config.ini: 1 file pushed, 0 skipped. 0.1 MB/s (95 bytes in 0.001s)\rC:\\Users\\daizelai\u003eadb shell\rmsm8953_64:/ # cd /custom/metro/system\rmsm8953_64:/custom/metro/system # cat system_config.ini\r[system]\rself_mac=00:e0:99:8e:28:a8\r[screen]\rreset_code=0xb1,0x31,0xb5,0xbd,0x35\rperiod_time=8000\rmsm8953_64:/custom/metro/system # ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:4:2","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"4.3.重启设备生效 导入配置后，需要重启设备生效。 msm8953_64:/custom/metro/system # reboot ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:4:3","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"五、屏幕异常复现方法 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:5:0","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"5.1.重启大法 可以通过对设备上下电或reboot重启来观察屏幕是否黑屏，现场大部分设备产生的屏幕问题都是在终端系统上电重启后出现的。 如果一次重启不能复现，可通过多次重启系统直到系统启动后出现黑屏。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:5:1","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"5.2.静电干扰大法 可通过使用静电枪对设备进行静电干扰，人为的让设备产生黑屏。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:5:2","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"5.3.重置大法 可以通过在上层APP中使用屏幕修复命令或者使用终端面板的RST按钮对设备进行修复，通过频繁的对设备进行修复，直到屏幕出现黑/白屏。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:5:3","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"六、检查结果 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:6:0","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"6.1.屏幕观测法 此种方法简单，无需要多余操作，直接看屏幕是否有修复刷新的操作即可，一般修复一次，屏幕会刷新闪一次。 ","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:6:1","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","msm8953_64","android","SC60"],"content":"6.2.日志观测法 可在设备的命令行中观察logcat日志，通过日志关键字进行观察修复操作。 搜索日志并以init_convert为关键字过滤日志，如下所示： # adb shell\r# logcat -b kernel | grep \"init_convert\" 仔细观察是可以看到是否执行了修复，比如搜索到了convert_reset end关键字表示执行了一次修复。 下面是一次查看结果的日志片段，通过convert_reset end关键字可以看到一共修复了11次，屏幕闪了11次，然后后面很长一段时间都没有修复。 127|msm8953_64:/ # logcat -b kernel | grep \"init_convert\"\r01-10 18:07:18.875 0 0 I : auto fix task, init_convert - convert_reset end, reg_e5:35.\r01-10 18:07:18.875 0 0 I : auto fix task, init_convert - last count:3, reg_e5:35.\r01-10 18:07:26.533 0 0 I : auto fix task, thread_func - while - init_convert - line:943 config_data:[system], code_buf:[system], config_time:8000.\r01-10 18:07:26.533 0 0 I : auto fix task, print_array - init_convert - Array contents: [b1, 31, b5, bd, 35].\r01-10 18:07:26.534 0 0 I : auto fix task, handle_config_file - init_convert - line:372, The array contains reg_val:35.\r01-10 18:07:26.534 0 0 I : auto fix task, init_convert - input_report_key KEY_A.\r01-10 18:07:26.534 0 0 I : auto fix task, init_convert - count:3\r01-10 18:07:27.220 0 0 I : auto fix task, init_convert - convert_reset end, reg_e5:35.\r01-10 18:07:27.220 0 0 I : auto fix task, init_convert - last count:4, reg_e5:35.\r01-10 18:07:34.881 0 0 I : auto fix task, thread_func - while - init_convert - line:943 config_data:[system], code_buf:[system], config_time:8000.\r01-10 18:07:34.881 0 0 I : auto fix task, print_array - init_convert - Array contents: [b1, 31, b5, bd, 35].\r01-10 18:07:34.881 0 0 I : auto fix task, handle_config_file - init_convert - line:372, The array contains reg_val:35.\r01-10 18:07:34.881 0 0 I : auto fix task, init_convert - input_report_key KEY_A.\r01-10 18:07:34.881 0 0 I : auto fix task, init_convert - count:4\r01-10 18:07:35.569 0 0 I : auto fix task, init_convert - convert_reset end, reg_e5:35.\r01-10 18:07:35.569 0 0 I : auto fix task, init_convert - last count:5, reg_e5:35.\r01-10 18:07:43.233 0 0 I : auto fix task, thread_func - while - init_convert - line:943 config_data:[system], code_buf:[system], config_time:8000.\r01-10 18:07:43.233 0 0 I : auto fix task, print_array - init_convert - Array contents: [b1, 31, b5, bd, 35].\r01-10 18:07:43.233 0 0 I : auto fix task, handle_config_file - init_convert - line:372, The array contains reg_val:35.\r01-10 18:07:43.233 0 0 I : auto fix task, init_convert - input_report_key KEY_A.\r01-10 18:07:43.233 0 0 I : auto fix task, init_convert - count:5\r01-10 18:07:43.941 0 0 I : auto fix task, init_convert - convert_reset end, reg_e5:35.\r01-10 18:07:43.941 0 0 I : auto fix task, init_convert - last count:6, reg_e5:35.\r01-10 18:07:51.603 0 0 I : auto fix task, thread_func - while - init_convert - line:943 config_data:[system], code_buf:[system], config_time:8000.\r01-10 18:07:51.603 0 0 I : auto fix task, print_array - init_convert - Array contents: [b1, 31, b5, bd, 35].\r01-10 18:07:51.603 0 0 I : auto fix task, handle_config_file - init_convert - line:372, The array contains reg_val:35.\r01-10 18:07:51.603 0 0 I : auto fix task, init_convert - input_report_key KEY_A.\r01-10 18:07:51.603 0 0 I : auto fix task, init_convert - count:6\r01-10 18:07:52.321 0 0 I : auto fix task, init_convert - convert_reset end, reg_e5:35.\r01-10 18:07:52.321 0 0 I : auto fix task, init_convert - last count:7, reg_e5:35.\r01-10 18:07:59.982 0 0 I : auto fix task, thread_func - while - init_convert - line:943 config_data:[system], code_buf:[system], config_time:8000.\r01-10 18:07:59.982 0 0 I : auto fix task, print_array - init_convert - Array contents: [b1, 31, b5, bd, 35].\r01-10 18:07:59.982 0 0 I : auto fix task, handle_config_file - init_convert - line:372, The array contains reg_val:35.\r01-10 18:07:59.982 0 0 I : auto fix task, init_convert - input_report_key KEY_A.\r01-10 18:07:59.982 0 0 I : auto fix task, init_convert - count:7\r01-10 18:08:00.680 0 0 I : auto fix task, init_convert - convert_reset end, reg_e5:35.\r01-10 18:08:00.680 0 0 I : auto fix task, init_convert - last count:8, reg_e5:35.\r01-10 18:08:08.333 0 0 I : auto fix task, thread_func - while","date":"2023-11-30","objectID":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/:6:2","tags":["原创","android","msm8953_64","SC60"],"title":"终端屏幕自动修复配置的使用","uri":"https://daizelai.github.io/posts/sc60/20231130_0900%E7%BB%88%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"在linux内核中添加驱动模块","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"20231122_1556内核中添加驱动模块 ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:0:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"一、描述 by daizelai on 2023/11/22 15:56 成功在内核中添加一个模块。 设备树目录在 arch/arm/boot/dts目录。 设备树插件目录在 arch/arm/boot/dts/overlays 目录 驱动目录在kernel/drivers下 在drivers中我们将在这个目录下添加新的驱动模块， 在char目录下新建hello目录，并在hello目录下新建 hello.c 以及Makefile文件 ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:1:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"二、创建模块 在肉松驱动目录/kernel/msm-3.18/drivers中创建一个模块hellotmp目录。 [android_SC20@localhost drivers]$ date\rWed Nov 22 15:58:54 CST 2023\r[android_SC20@localhost drivers]$ pwd\r/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers\r[android_SC20@localhost drivers]$ tree hellotmp/\rhellotmp/\r├── Android.mk\r├── hellotmp.c\r├── hellotmp.h\r├── Kconfig\r└── Makefile\r0 directories, 5 files\r[android_SC20@localhost drivers]$ ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:2:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"三、编译c文件 #include \u003clinux/module.h\u003e #include \u003clinux/init.h\u003e #include \u003clinux/kernel.h\u003e static int __init hello_init(void) { printk(KERN_EMERG \"[ KERN_EMERG ] Hello Module Init\\n\"); printk( \"[ default ] Hello Module Init\\n\"); return 0; } static void __exit hello_exit(void) { printk(\"[ default ] Hello Module Exit\\n\"); } module_init(hello_init); module_exit(hello_exit); MODULE_LICENSE(\"GPL2\"); MODULE_AUTHOR(\"uplooking \"); MODULE_DESCRIPTION(\"hello world module\"); MODULE_ALIAS(\"test_module\"); ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:3:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"四、编写Makefile文件 makefile文件内容如下 obj-$(CONFIG_HELLO_MODULE) := hello.o ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:4:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"五、修改上层Makefile 除了hello/Makefile文件之外还需要修改上一层Makefile的文件的内容， 不然编译的时候不会去编译新添加的模块了。 添加内容如下。 路径：/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/Makefile obj-y += gpioclk/ +obj-y += hello/ +obj-y += hellotmp/ ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:5:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"六、修改上层Kconfig文件 添加kconfig文件内容如下 source \"drivers/bif/Kconfig\"\r+// 方法一\r+source \"drivers/hellotmp/Kconfig\"\r+// 方法二\r+config HELLO\r+ tristate \"hello world\"\rendmenu ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:6:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"七、重新配置内核 /kernel$ make menuconfig 可以勾选hello world，然后编译的时候就会编译进去了。 不过，编译hellotmp时没有这么做。 ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:7:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"八、签名 ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:8:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"8.1.拷贝编译的产物 [android_SC20@localhost daizelai]$ date\rWed Nov 22 18:25:20 CST 2023\r[android_SC20@localhost daizelai]$ pwd\r/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/daizelai\r[android_SC20@localhost daizelai]$ cp ../out/target/product/msm8953_64/obj/kernel/msm-3.18/drivers/hellotmp/hellotmp.o hellotmp.o\r[android_SC20@localhost daizelai]$ [android_SC20@localhost daizelai]$ [android_SC20@localhost daizelai]$ ls -l\rtotal 116\r-rw-rw-r-- 1 android_SC20 android_SC20 116344 Nov 22 18:24 hellotmp.o\r[android_SC20@localhost daizelai]$ hexdump -C hellotmp.o | tail\r0001c5f0 00 00 00 00 00 00 00 00 01 00 00 00 02 00 00 00 |................|\r0001c600 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|\r0001c610 20 eb 00 00 00 00 00 00 f0 06 00 00 00 00 00 00 | ...............|\r0001c620 1f 00 00 00 41 00 00 00 08 00 00 00 00 00 00 00 |....A...........|\r0001c630 18 00 00 00 00 00 00 00 09 00 00 00 03 00 00 00 |................|\r0001c640 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|\r0001c650 10 f2 00 00 00 00 00 00 b9 02 00 00 00 00 00 00 |................|\r0001c660 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 |................|\r0001c670 00 00 00 00 00 00 00 00 |........|\r0001c678\r[android_SC20@localhost daizelai]$\r[android_SC20@localhost daizelai]$ perl ../kernel/msm-3.18/scripts/sign-file sha512 /home/android_SC20/daizelai/sign/signing_key.priv /home/android_SC20/daizelai/sign/signing_key.x509 hellotmp.o [android_SC20@localhost daizelai]$ hexdump -C hellotmp.o | tail\r0001c850 70 77 d9 69 fa 34 83 ff 2a 05 c8 67 c7 70 f1 84 |pw.i.4..*..g.p..|\r0001c860 0d de 99 5f ec b0 30 ad 4d 1e 89 fe 40 88 6d 86 |..._..0.M...@.m.|\r0001c870 a5 e0 d9 cd f2 e4 c3 10 8c 5d 1a 36 1b df b2 9a |.........].6....|\r0001c880 52 7a 25 b7 f6 2b f0 a3 14 83 55 63 4a c3 a2 36 |Rz%..+....UcJ..6|\r0001c890 e1 dd d0 75 c4 bb c8 0e 97 a8 2d 9c 95 9d 0c 50 |...u......-....P|\r0001c8a0 42 a8 05 46 73 b3 50 18 5e ca 92 12 01 06 01 1e |B..Fs.P.^.......|\r0001c8b0 14 00 00 00 00 00 02 02 7e 4d 6f 64 75 6c 65 20 |........~Module |\r0001c8c0 73 69 67 6e 61 74 75 72 65 20 61 70 70 65 6e 64 |signature append|\r0001c8d0 65 64 7e 0a |ed~.|\r0001c8d4\r[android_SC20@localhost daizelai]$ 其实搞错了，不是对o签名，必须生成ko文件，然后对ko文件进行签名。 [android_SC20@localhost sz14_android_7.1.2_qcom]$ date\rThu Nov 23 09:55:43 CST 2023\r[android_SC20@localhost sz14_android_7.1.2_qcom]$ pwd\r/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom\r[android_SC20@localhost sz14_android_7.1.2_qcom]$ ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:8:1","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"8.2.查看hexdump [android_SC20@localhost sz14_android_7.1.2_qcom]$ hexdump -C out/target/product/msm8953_64/obj/kernel/msm-3.18/drivers/hellotmp/hellotmp.ko | tail\r0002dee0 00 00 00 00 00 00 00 00 01 00 00 00 02 00 00 00 |................|\r0002def0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|\r0002df00 38 83 01 00 00 00 00 00 a0 08 00 00 00 00 00 00 |8...............|\r0002df10 20 00 00 00 50 00 00 00 08 00 00 00 00 00 00 00 | ...P...........|\r0002df20 18 00 00 00 00 00 00 00 09 00 00 00 03 00 00 00 |................|\r0002df30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|\r0002df40 d8 8b 01 00 00 00 00 00 2a 03 00 00 00 00 00 00 |........*.......|\r0002df50 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 |................|\r0002df60 00 00 00 00 00 00 00 00 |........|\r0002df68\r[android_SC20@localhost sz14_android_7.1.2_qcom]$ ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:8:2","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"8.3.签名 拷贝到指定目录。 [android_SC20@localhost sz14_android_7.1.2_qcom]$ ls -l daizelai/\rtotal 12\r-rwxr--r-- 1 android_SC20 android_SC20 3272 Nov 22 20:14 signing_key.priv\r-rwxr--r-- 1 android_SC20 android_SC20 1446 Nov 22 20:14 signing_key.x509\r-rwxr--r-- 1 android_SC20 android_SC20 372 Nov 22 20:14 x509.genkey\r[android_SC20@localhost sz14_android_7.1.2_qcom]$ cp out/target/product/msm8953_64/obj/kernel/msm-3.18/drivers/hellotmp/hellotmp.ko ./daizelai/\r[android_SC20@localhost sz14_android_7.1.2_qcom]$ ls -l daizelai/\rtotal 196\r-rw-rw-r-- 1 android_SC20 android_SC20 188264 Nov 23 09:53 hellotmp.ko\r-rwxr--r-- 1 android_SC20 android_SC20 3272 Nov 22 20:14 signing_key.priv\r-rwxr--r-- 1 android_SC20 android_SC20 1446 Nov 22 20:14 signing_key.x509\r-rwxr--r-- 1 android_SC20 android_SC20 372 Nov 22 20:14 x509.genkey\r[android_SC20@localhost sz14_android_7.1.2_qcom]$ 签名 [android_SC20@localhost sz14_android_7.1.2_qcom]$ perl kernel/msm-3.18/scripts/sign-file sha512 ./daizelai/signing_key.priv ./daizelai/signing_key.x509 ./daizelai/hellotmp.ko [android_SC20@localhost sz14_android_7.1.2_qcom]$ hexdump -C ./daizelai/hellotmp.ko | tail 0002e140 fc 4b 0d cb 74 3d 4e 03 30 ec ba 80 01 b2 56 12 |.K..t=N.0.....V.|\r0002e150 03 d4 2b 54 66 28 77 f2 de 01 9f 55 29 05 a4 60 |..+Tf(w....U)..`|\r0002e160 89 75 d6 f5 e7 e8 fa 9c 4f ce a0 2c e7 19 07 09 |.u......O..,....|\r0002e170 43 28 68 e0 d3 35 49 58 be 99 0b d3 3a 93 99 fc |C(h..5IX....:...|\r0002e180 01 66 54 5b dd f0 2c 57 3a b2 32 31 5d dc 16 8d |.fT[..,W:.21]...|\r0002e190 73 70 e9 fe d1 92 cb 79 89 d5 45 05 01 06 01 1e |sp.....y..E.....|\r0002e1a0 14 00 00 00 00 00 02 02 7e 4d 6f 64 75 6c 65 20 |........~Module |\r0002e1b0 73 69 67 6e 61 74 75 72 65 20 61 70 70 65 6e 64 |signature append|\r0002e1c0 65 64 7e 0a |ed~.|\r0002e1c4\r[android_SC20@localhost sz14_android_7.1.2_qcom]$ ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:8:3","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"8.4.终端TX350的使用 D:\\log\\uart\u003eadb push E:\\SC60\\wuhan19_fx_20231030_1645\\os\\hellotmp.ko /sdcard/\rE:\\SC60\\wuhan19_fx_20231030_1645\\os\\hellotmp.ko: 1 file pushed, 0 skipped. 3.8 MB/s (188868 bytes in 0.048s)\rD:\\log\\uart\u003eadb shell\rmsm8953_64:/ # cd sdcard\rmsm8953_64:/sdcard #\rmsm8953_64:/sdcard # date\rSun Jan 4 08:46:38 CST 1970\rmsm8953_64:/sdcard # ls -l *.ko\r-rw-rw---- 1 root sdcard_rw 188868 2023-11-23 09:54 hellotmp.ko\rmsm8953_64:/sdcard # pwd\r/sdcard\rmsm8953_64:/sdcard # lsmod\rModule Size Used by\rmsm8953_64:/sdcard # insmod hellotmp.ko\rmsm8953_64:/sdcard # lsmod\rModule Size Used by\rhellotmp 12629 0\rmsm8953_64:/sdcard # ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:8:4","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"九、问题 ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:9:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"9.1.Exec format error msm8953_64:/dev # insmod hellotmp.ko\rinsmod: failed to load hellotmp.ko: Exec format error\r1|msm8953_64:/dev # 这是因为编译ko时所在的boot.img和当前终端系统中的boot.img不是一样。 ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:9:1","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"十、驱动读写配置文件 ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:10:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"10.1.文件一 下面是一个未经过验证的文件。 #include \u003clinux/fs.h\u003e #include \u003clinux/kernel.h\u003e #include \u003clinux/module.h\u003e #define CONFIG_FILE_PATH \"/path/to/system_config.ini\" static void read_system_code(void) { struct file *file; char *buffer; loff_t pos = 0; // 打开配置文件 file = filp_open(CONFIG_FILE_PATH, O_RDONLY, 0); if (IS_ERR(file)) { pr_err(\"Error opening file %s\\n\", CONFIG_FILE_PATH); return; } // 为读取配置文件内容分配缓冲区 buffer = kmalloc(PAGE_SIZE, GFP_KERNEL); if (!buffer) { pr_err(\"Memory allocation failed\\n\"); filp_close(file, NULL); return; } // 读取配置文件内容 memset(buffer, 0, PAGE_SIZE); if (vfs_read(file, buffer, PAGE_SIZE, \u0026pos) \u003c 0) { pr_err(\"Error reading file\\n\"); kfree(buffer); filp_close(file, NULL); return; } // 关闭配置文件 filp_close(file, NULL); // 处理读取的数据，示例中简单打印 pr_info(\"Read from config file:\\n%s\\n\", buffer); // 在实际的内核驱动中，你需要解析buffer中的数据，提取system_code的值，并进行相应的处理 // 释放缓冲区 kfree(buffer); } static int __init my_init(void) { pr_info(\"Loading my module\\n\"); read_system_code(); return 0; } static void __exit my_exit(void) { pr_info(\"Unloading my module\\n\"); } module_init(my_init); module_exit(my_exit); MODULE_LICENSE(\"GPL\"); MODULE_AUTHOR(\"Your Name\"); ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:10:1","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"10.2.文件二 下面是一个ko驱动的文件，真实可以写也可以读的驱动文件。by daizelai on 2023/11/23 15:38 路径：kernel/msm-3.18/drivers/hellotmp/hellotmp.c #include \u003clinux/module.h\u003e #include \u003clinux/init.h\u003e #include \u003clinux/fs.h\u003e #include \u003clinux/uaccess.h\u003e static char buf[] = \"你好\"; static char buf1[10]; int __init hello_init(void) { struct file *fp; mm_segment_t fs; loff_t pos; printk(\"hello enter\\n\"); fp = filp_open(\"/custom/metro/system/system_config.ini\", O_RDWR | O_CREAT, 0644); if (IS_ERR(fp)) { printk(\"create file error\\n\"); return -1; } fs = get_fs(); set_fs(KERNEL_DS); pos = 0; vfs_write(fp, buf, sizeof(buf), \u0026pos); pos = 0; vfs_read(fp, buf1, sizeof(buf), \u0026pos); printk(\"read: %s\\n\", buf1); filp_close(fp, NULL); set_fs(fs); return 0; } void __exit hello_exit(void) { printk(\"hello exit\\n\"); } module_init(hello_init); module_exit(hello_exit); MODULE_LICENSE(\"GPL\"); ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:10:2","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"10.3.VFS的介绍 在VFS的支持下，用户态进程读写 任何类型的文件系统都可以使用read和write着两个系统调用，但是在linux内核中没有这样的系统调用我们如何操作文件呢？我们知道read和 write在进入内核态之后，实际执行的是sys_read和sys_write，但是查看内核源代码，发现这些操作文件的函数都没有导出(使用 EXPORT_SYMBOL导出)。 通过查看sys_open的源码我 们发现，其主要使用了do_filp_open()函数，该函数在fs/namei.c中，而在改文件中，filp_open函数也是调用了 do_filp_open函数，并且接口和sys_open函数极为相似，调用参数也和sys_open一样，并且使用EXPORT_SYMBOL导出 了，所以我们猜想该函数可以打开文件，功能和open一样。使用同样的查找方法，我们找出了一组在内核中操作文件的函数，如下： 功能 函数原型 打开文件 struct file *filp_open(const char *filename, int flags, int mode) 读取文件 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos) 写文件 ssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos) 关闭文件 int filp_close(struct file *filp, fl_owner_t id) 在vfs_read和vfs_write函数中，其参数buf指向的用户空间的内存地址，如果我们直接使用内核空间的指针，则会返回-EFALUT。所以我们需要使用 set_fs()和get_fs()宏来改变内核对内存地址检查的处理方式，所以在内核空间对文件的读写流程为： mm_segment_t fs = get_fs(); set_fs(KERNEL_FS); //vfs_write(); vfs_read(); set_fs(fs); ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:10:3","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"10.4.测试效果 查看读的效果，可以看到，读出来了你好。 130|msm8953_64:/ # date\rSun Jan 4 14:25:15 CST 1970\r130|msm8953_64:/ # logcat -b kernel -b main -b system\r......\r1-04 14:24:38.751 0 0 I : hello enter\r01-04 14:24:38.752 0 0 I read : 你好\r01-04 14:24:38.839 0 0 I : wuning thread for recover\r01-04 14:24:38.840 0 0 D mipi_convert 2-002c: reg: e0, READ8: 0\r01-04 14:24:38.840 0 0 D mipi_convert 2-002c: reg: e1, READ8: 0\r01-04 14:24:38.840 0 0 D mipi_convert 2-002c: reg: e5, READ8: b5\r01-04 14:24:38.840 0 0 I : daizelai add thread for data reg_val_e0: 0, reg_val_e1: 0, reg_val_e5: b5, max_int:2147483647, function_call_count:0\r01-04 14:24:37.772 831 831 I MSM-irqbalance: Decided to move IRQ5 from CPU2 [P:0] to CPU5 [P:1] (banned)\r01-04 14:24:37.774 831 831 I MSM-irqbalance: Decided to move IRQ5 from CPU3 [P:0] to CPU7 [P:1] (banned)\r01-04 14:24:37.776 831 831 I MSM-irqbalance: Decided to move IRQ5 from CPU0 [P:0] to CPU4 [P:1] (banned)\r01-04 14:24:37.777 831 831 I MSM-irqbalance: Decided to move IRQ5 from CPU1 [P:0] to CPU6 [P:1] (banned)\r^C\r130|msm8953_64:/ # logcat -b kernel -b main -b system 我们再看一下文件中的内容： msm8953_64:/sdcard # cat /custom/metro/system/system_config.ini\r你好orld.kernel file.msm8953_64:/sdcard # ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:10:4","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"十一、编译问题 ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:11:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"11.1.Operation not permitted 2023/11/23 14:57，编译的ko出现下面的问题，是因为ko的代码里，open一个/root/test.txt不存在文件，所有没有权限。 msm8953_64:/sdcard # lsmod hellotmp.ko\rModule Size Used by\rmsm8953_64:/sdcard # insmod hellotmp.ko\rinsmod: failed to load hellotmp.ko: Operation not permitted\r1|msm8953_64:/sdcard # date\rSun Jan 4 13:49:18 CST 1970\rmsm8953_64:/sdcard # ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:11:1","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"11.2.ISO C90 forbids mixed declarations 编译ko驱动源码的时候2023/11/23 17:46遇到以下错误。 /home/test/po/kernel/msm-3.18/drivers/hellotmp/hellotmp.c: In function 'hello_init':\r/home/test/po/kernel/msm-3.18/drivers/hellotmp/hellotmp.c:67:5: warning: ISO C90 forbids mixed declarations and code [-Wdeclaration-after-statement]\rerror, forbidden warning: hellotmp.c:67\rmake[3]: *** [drivers/hellotmp/hellotmp.o] Error 1\rmake[2]: *** [drivers/hellotmp] Error 2\rmake[2]: *** Waiting for unfinished jobs.... 这个警告是由于在 hello_init 函数中有变量声明和代码混合在一起，而 ISO C90 不允许这样的语法。为了解决这个问题，您可以将变量的声明移到函数的开头。 只要把函数中，声明的struct ConfigData myConfig;和u8 reg_e5 = 0;放到函数最前面，再编译就没有这个问题了。 ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:11:2","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"11.3.C99 or C11 mode 编译ko源码遇到以下错误。 /home/test/po/kernel/msm-3.18/drivers/hellotmp/hellotmp.c: In function 'contains_value':\r/home/test/po/kernel/msm-3.18/drivers/hellotmp/hellotmp.c:35:5: error: 'for' loop initial declarations are only allowed in C99 or C11 mode\rfor (size_t i = 0; i \u003c size; ++i) {\r^\r/home/test/po/kernel/msm-3.18/drivers/hellotmp/hellotmp.c:35:5: note: use option -std=c99, -std=gnu99, -std=c11 or -std=gnu11 to compile your code\rDTC arch/arm64/boot/dts/qcom/msmcobalt-rumi.dtb\rmake[3]: *** [drivers/hellotmp/hellotmp.o] Error 1\rmake[2]: *** [drivers/hellotmp] Error 2 解决办法 错误提示是因为在 C 语言的标准中（C89/90），不支持在 for 循环中声明变量。而在 C99 标准及之后的版本中，允许在 for 循环中声明变量。 为了解决这个问题，你可以在编译时添加 -std=c99 选项，告诉编译器使用 C99 标准。修改你的 Makefile 或编译命令，添加 -std=c99 选项，如下： gcc -std=c99 -o your_output_file your_source_file.c 确保在你的 Makefile 中也包含了 -std=c99 选项。 在 Makefile 中使用 -std=c99 选项通常通过修改 CFLAGS 变量来实现。在你的 Makefile 中找到 CFLAGS 变量的设置，然后添加 -std=c99。例如： CC = gcc CFLAGS = -Wall -std=c99 your_program: your_program.o $(CC) $(CFLAGS) -o your_program your_program.o your_program.o: your_program.c $(CC) $(CFLAGS) -c your_program.c clean: rm -f your_program your_program.o 如果不方便添加 -std=c99 选项，你还可以使用传统的 C 风格的 for 循环初始化方式。在旧的 C 标准（如 ANSI C89）中，for 循环的变量声明必须在代码块的开头。 #include \u003cstddef.h\u003e int contains_value(const int *arr, size_t size, int value) { size_t i; for (i = 0; i \u003c size; ++i) { if (arr[i] == value) { return 1; // 找到了 } } return 0; // 没找到 } 这种方式会在更早的 C 标准中起作用，但需要注意的是，这会将变量的作用域限制在 for 循环内。 ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:11:3","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"11.4.ISO C90 forbids mixed declarations 编译ko源码错误时遇到以下错误： /home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/hellotmp/hellotmp.c: In function 'parse_config':\r/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/hellotmp/hellotmp.c:286:1: warning: ISO C90 forbids mixed declarations and code [-Wdeclaration-after-statement]\rerror, forbidden warning: hellotmp.c:286\rmake[3]: *** [drivers/hellotmp/hellotmp.o] Error 1\rmake[2]: *** [drivers/hellotmp] Error 2\rmake[2]: *** Waiting for unfinished jobs.... 问题原因为代码中的white循环没有结束}大括号。 添加内容 130|msm8953_64:/custom/metro/system # cat system_config.ini\r[system]\rself_mac=11:aa:bb:cc:dd\rmsm8953_64:/custom/metro/system # echo \"[screen]\"\u003e\u003esystem_config.ini\rmsm8953_64:/custom/metro/system # echo \"GbcomCode1 = 0xb1\"\u003e\u003esystem_config.ini\rmsm8953_64:/custom/metro/system # echo \"GbcomCode2 = 0xb5\"\u003e\u003esystem_config.ini\rmsm8953_64:/custom/metro/system # echo \"GbcomCode3 = 0x31\"\u003e\u003esystem_config.ini\rmsm8953_64:/custom/metro/system # cat system_config.ini\r[system]\rself_mac=11:aa:bb:cc:dd\r[screen]\rCode1 = 0xb1\rCode2 = 0xb5\rCode3 = 0x31\rmsm8953_64:/custom/metro/system # ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:11:4","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"11.5.passing argument 1 of ‘strim’ 编译ko源码时遇到下面的问题。【此问题验证失败，后面再遇到可以这样尝试】 /home/test/po/kernel/msm-3.18/drivers/hellotmp/hellotmp.c: In function 'parse_config':\r/home/test/po/kernel/msm-3.18/drivers/hellotmp/hellotmp.c:207:22: warning: passing argument 1 of 'strim' discards 'const' qualifier from pointer target type\rerror, forbidden warning: hellotmp.c:207\rmake[3]: *** [drivers/hellotmp/hellotmp.o] Error 1\rmake[2]: *** [drivers/hellotmp] Error 2\rmake[2]: *** Waiting for unfinished jobs.... 代码是 const char *line, *key, *value;c const char *line, *key, *value; // 去除空格 line = strim(line); 错误提示表明在 hellotmp.c 文件的 parse_config 函数中，传递给 strim 函数的参数是 const 类型的，而 strim 函数期望的是非 const 类型。 strim 函数的原型通常是这样的：char *strim(char *s)。它用于删除字符串开头和结尾的空格符、制表符、换行符等。 在你的 parse_config 函数中，看起来你在调用 strim 时使用了 const char *line，但 strim 函数的参数类型是 char *，所以编译器发出了警告。 解决这个问题的方法是创建一个可修改的字符串拷贝，然后将其传递给 strim 函数。你可以使用 kstrdup 来创建可修改的字符串拷贝。 // 在头文件中包含 kstrdup 的声明 #include \u003clinux/slab.h\u003e // 在 parse_config 函数中使用 kstrdup char *line_copy = kstrdup(line, GFP_KERNEL); if (!line_copy) { // 处理内存分配失败的情况 return -ENOMEM; } // 使用 strim 处理可修改的字符串 strim(line_copy); // 现在你可以使用 line_copy 了 // 最后别忘了释放 line_copy 的内存 kfree(line_copy); ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:11:5","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"11.6.implicit declaration 编译ko驱动源码时遇到以下错误： /home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/hellotmp/hellotmp.c: In function 'handle_config_file':\r/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/hellotmp/hellotmp.c:97:13: error: implicit declaration of function 'print_array' [-Werror=implicit-function-declaration]\rprint_array(myConfig.code, myConfig.code_size);\r^\r/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/hellotmp/hellotmp.c:99:13: error: implicit declaration of function 'contains_value' [-Werror=implicit-function-declaration]\rif (contains_value(myConfig.code, myConfig.code_size, reg_e5)) {\r^\rcc1: some warnings being treated as errors\rmake[3]: *** [drivers/hellotmp/hellotmp.o] Error 1\rmake[2]: *** [drivers/hellotmp] Error 2\rmake[2]: *** Waiting for unfinished jobs.... 上面的错误表明编译器找不到 print_array 和 contains_value 函数的声明。这是因为这两个函数是在 hello_init 函数之后才定义的，而在 hello_init 函数之前被调用。 要解决这个问题，你可以在文件的开头添加这两个函数的声明： #include \u003clinux/module.h\u003e #include \u003clinux/kernel.h\u003e #include \u003clinux/init.h\u003e #include \u003clinux/fs.h\u003e #include \u003clinux/uaccess.h\u003e #include \u003clinux/string.h\u003e #include \u003clinux/slab.h\u003e #include \u003clinux/types.h\u003e #define CONFIG_FILE_PATH \"/custom/metro/system/system_config.ini\" static char bufCode[1024]; struct ConfigData { unsigned char mac[6]; unsigned int *code; // 使用指针来表示变长数组 size_t code_size; // 记录数组的大小 }; // 函数声明 void print_array(const unsigned int *array, size_t size); int contains_value(const unsigned int *array, size_t size, unsigned int value); int parse_config(const char *buffer, struct ConfigData *config); void handle_config_file(const char *file_path); // 读取文件的辅助函数 int read_file(const char *file_path, char *buffer, size_t buffer_size) { // ... } // 其他代码... ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:11:6","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"11.7.expects argument 2023/11/29 10:41，编译内核c文件遇到以下错误： /home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/video/mipi_convert.c: In function 'thread_func':\r/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/video/mipi_convert.c:902:9: warning: format '%d' expects argument of type 'int', but argument 2 has type 'ktime_t' [-Wformat=]\rerror, forbidden warning: mipi_convert.c:902\rmake[3]: *** [drivers/video/mipi_convert.o] Error 1\rmake[3]: *** Waiting for unfinished jobs.... 解决办法： 路径：/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/video/mipi_convert.c static int thread_func(void *data) { struct convert_platform_data *pdata = data; u8 reg_val_e0 = 0; u8 reg_val_e1 = 0; u8 reg_val_e5 = 0; //int count = 0; // u8 regE5; char *config_data; // 初始化设备字符串 char deviceString[100] = \"info: \"; ktime_t start_time = ktime_get_real(); + unsigned int elapsed_time = 0; struct ConfigData my_config = { .code = NULL, .time = 0 // 初始值 }; while (!kthread_should_stop()) { msleep(5000); // 获取已过去的时间 - unsigned int elapsed_time = get_elapsed_time(\u0026start_time); + elapsed_time = get_elapsed_time(\u0026start_time); ...... } ...... } ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:11:7","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"11.8.继续expects argument 编译遇到以下错误 /home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/video/mipi_convert.c:902:9: warning: format '%d' expects argument of type 'int', but argument 2 has type 'ktime_t' [-Wformat=] 修改如下： 路径：/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/video/mipi_convert.c static int thread_func(void *data) { struct convert_platform_data *pdata = data; u8 reg_val_e0 = 0; u8 reg_val_e1 = 0; u8 reg_val_e5 = 0; //int count = 0; // u8 regE5; char *config_data; // 初始化设备字符串 char deviceString[100] = \"info: \"; ktime_t start_time = ktime_get_real(); unsigned int elapsed_time = 0; struct ConfigData my_config = { .code = NULL, .time = 0 // 初始值 }; while (!kthread_should_stop()) { msleep(5000); // 获取已过去的时间 elapsed_time = get_elapsed_time(\u0026start_time); - printk(KERN_INFO \"auto fix task, start thread for recover start_time:%d, elapsed_time:%d\\n\", start_time, elapsed_time); + printk(KERN_INFO \"auto fix task, start thread for recover start_time:%lld, elapsed_time:%d\\n\", ktime_to_ns(start_time), elapsed_time); ...... } ..... } ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:11:8","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"11.9.继续expects argument 编译遇到以下错误。 /home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/video/mipi_convert.c: In function 'thread_func':\r/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/video/mipi_convert.c:902:9: warning: format '%lld' expects argument of type 'long long int', but argument 2 has type 'ktime_t' [-Wformat=]\rerror, forbidden warning: mipi_convert.c:902\rmake[3]: *** [drivers/video/mipi_convert.o] Error 1\rmake[3]: *** Waiting for unfinished jobs.... 这个警告表明在你的代码中有一个 printf 或者类似的函数，使用了 %lld 格式说明符，但是提供的实际参数类型是 ktime_t，而不是 long long int。 在内核中，ktime_t 类型的值通常以纳秒为单位，可以使用 ktime_to_ns 函数将其转换为 s64 类型（64位有符号整数），然后使用 %lld 来打印。 以下是一个示例，展示了如何在内核中正确使用 %lld 来打印 ktime_t： #include \u003clinux/kernel.h\u003e #include \u003clinux/ktime.h\u003e int main(void) { ktime_t my_ktime = ktime_get(); + s64 ns_value = ktime_to_ns(my_ktime); // 使用 %lld 来打印 64 位整数 - printk(\"ktime_t value: %lld\\n\", my_ktime); + printk(\"ktime_t value: %lld\\n\", ns_value); return 0; } ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:11:9","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"11.10.remove_whitespace 编译mipi_convert.c时遇到以下错误。 /home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/video/mipi_convert.c:250:13: warning: 'remove_whitespace' defined but not used [-Wunused-function]\rerror, forbidden warning: mipi_convert.c:250 原因为定义的remove_whitespace从来没有使用过。 ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:11:10","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"11.11.passing argument 1 of ‘strlen’ 编译遇到以下错误 In file included from /home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/video/mipi_convert.c:3:0:\r/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/video/mipi_convert.c: In function 'parse_config':\r/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/include/linux/kernel.h:21:18: warning: passing argument 1 of 'strlen' makes pointer from integer without a cast\rerror, forbidden warning: kernel.h:21\rmake[3]: *** [drivers/video/mipi_convert.o] Error 1\rmake[3]: *** Waiting for unfinished jobs.... 警告是因为你在parse_config函数中将一个整数值传递给strlen函数，而strlen函数期望接收一个以null结尾的字符串。为了解决这个问题，你可以将整数值转换为字符串，然后再使用strlen。 可以如下解决： else if (strcmp(key, \"period_time\") == 0) { unsigned int period_time_value; + char value_str[20]; // 根据值的预期长度调整大小 + // 将整数转换为字符串 + snprintf(value_str, sizeof(value_str), \"%u\", period_time_value); - size_t value_len = strlen(value); + size_t value_len = strlen(value_str); // 代码的其余部分保持不变... if (value_len \u003e 10) { printk(\"parse_config ------------时间值长度无效。使用默认值。\\n\"); // 使用默认值 config-\u003etime = 5000; // 默认值为毫秒 } else if (sscanf(value_str, \"%u\", \u0026period_time_value) == 1) { printk(\"parse_config ------------解析的时间值：%u\\n\", period_time_value); // 其他检查和调整... // 将时间值存储到结构体字段中 config-\u003etime = period_time_value; } else { printk(\"parse_config ------------时间值无效或缺失。使用默认值。\\n\"); // 使用默认值 config-\u003etime = 5000; // 默认值为毫秒 } } ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:11:11","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"十二、整个流程记录 下面这样的测试方法是可行的，来就是这么做的。 SC60模块编译，SC60编译模块，SC60中编译ko，ko测试方法： 编译 1.在台式机vscode中修改hellotmp.c代码。 路径：/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/hellotmp/hellotmp.c 2.在台式机中的CRT中“make bootimage -j 20” 3.在台式机中的CRT中“cp out/target/product/msm8953_64/obj/kernel/msm-3.18/drivers/hellotmp/hellotmp.ko ./daizelai/” 4.在台式机中的CRT中“perl kernel/msm-3.18/scripts/sign-file sha512 ./daizelai/signing_key.priv ./daizelai/signing_key.x509 ./daizelai/hellotmp.ko ” 测试 5.在笔记本电脑中开四个窗口。 6.在笔记中的第一个窗口是目录，用来打开编译机并找到刚刚编译的的ko 7.在笔记中的第二个窗口是目录，存放从编译机上拿下来的ko 8.在笔记本中的第三个窗口CMD命令行，先adb push文件ko到msm8953_64/custom/metro/system 方法：E:\\SC60\\wuhan19_fx_20231030_1645\\os\u003eadb push E:\\SC60\\wuhan19_fx_20231030_1645\\os\\hellotmp.ko /custom/metro/system/ 继续执行：adb shell “logcat -c \u0026\u0026 logcat -b kernel -b main -b system” 9.在笔记本中的第四个窗口CMD命令行。 msm8953_64:/custom/metro/system # rm -f hellotmp.ko\rmsm8953_64:/custom/metro/system # rmmod hellotmp\rmsm8953_64:/custom/metro/system # insmod hellotmp.ko 10.同时观察第三个串口CMD命令中的日志打印，看ko是否正常执行。 重点： 功能可用后，把代码合到mipi_convert.c文件中，这个文件修改后，需要编译内核，然后把编译出来的boot.img直接放到emmc镜像中去，直接刷机就可以了。 ","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:12:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","内核添加模块","驱动模块"],"content":"十三、完整版本的读写配置功能代码 本次配置文件中的内容如下： msm8953_64:/custom/metro/system # cat system_config.ini\r[system]\rself_mac=11:aa:bb:cc:dd\r[screen]\rGbcomCode1 = 0xb1\rGbcomCode2 = 0xb5\rGbcomCode3 = 0x31\r[code]\rcode=0xb1,0xb2\rmsm8953_64:/custom/metro/system # 本次2023/11/24 13:22的日志打印为： 01-05 12:10:47.811 0 0 I : hello enter\r01-05 12:10:47.811 0 0 I ++++++++++++++++++++++++++++++read: [system]\r01-05 12:10:47.811 0 0 I self_mac=11: aa:bb:cc:dd\r01-05 12:10:47.811 0 0 I : [screen]\r01-05 12:10:47.811 0 0 I : GbcomCode1 = 0xb1\r01-05 12:10:47.811 0 0 I : GbcomCode2 = 0xb5\r01-05 12:10:47.811 0 0 I : GbcomCode3 = 0x31\r01-05 12:10:47.811 0 0 I : [code]\r01-05 12:10:47.811 0 0 I : code=0xb1,0xb2\r01-05 12:10:47.811 0 0 I : Before parse_config\r01-05 12:10:47.811 0 0 I : parse_config aaaaa\r01-05 12:10:47.811 0 0 I : parse_config cccc\r01-05 12:10:47.811 0 0 I : parse_config ddddd =======key: [system]\r01-05 12:10:47.811 0 0 I : parse_config eeee ======value: (null)\r01-05 12:10:47.811 0 0 I : parse_config kkkk\r01-05 12:10:47.811 0 0 I : parse_config cccc\r01-05 12:10:47.811 0 0 I : parse_config ddddd =======key: self_mac\r01-05 12:10:47.811 0 0 I : parse_config eeee ======value: 11:aa:bb:cc:dd\r01-05 12:10:47.811 0 0 I : parse_config ffffffff\r01-05 12:10:47.811 0 0 I : parse_config kkkk\r01-05 12:10:47.811 0 0 I : parse_config cccc\r01-05 12:10:47.811 0 0 I : parse_config cccc\r01-05 12:10:47.811 0 0 I : parse_config ddddd =======key: [screen]\r01-05 12:10:47.811 0 0 I : parse_config eeee ======value: (null)\r01-05 12:10:47.811 0 0 I : parse_config kkkk\r01-05 12:10:47.811 0 0 I : parse_config cccc\r01-05 12:10:47.811 0 0 I : parse_config ddddd =======key: GbcomCode1\r01-05 12:10:47.811 0 0 I : parse_config eeee ======value: 0xb1\r01-05 12:10:47.811 0 0 I : parse_config ffffffff\r01-05 12:10:47.811 0 0 I : parse_config kkkk\r01-05 12:10:47.811 0 0 I : parse_config cccc\r01-05 12:10:47.811 0 0 I : parse_config ddddd =======key: GbcomCode2\r01-05 12:10:47.811 0 0 I : parse_config eeee ======value: 0xb5\r01-05 12:10:47.811 0 0 I : parse_config ffffffff\r01-05 12:10:47.811 0 0 I : parse_config kkkk\r01-05 12:10:47.811 0 0 I : parse_config cccc\r01-05 12:10:47.811 0 0 I : parse_config ddddd =======key: GbcomCode3\r01-05 12:10:47.811 0 0 I : parse_config eeee ======value: 0x31\r01-05 12:10:47.811 0 0 I : parse_config ffffffff\r01-05 12:10:47.811 0 0 I : parse_config kkkk\r01-05 12:10:47.811 0 0 I : parse_config cccc\r01-05 12:10:47.811 0 0 I : parse_config ddddd =======key: [code]\r01-05 12:10:47.811 0 0 I : parse_config eeee ======value: (null)\r01-05 12:10:47.811 0 0 I : parse_config kkkk\r01-05 12:10:47.811 0 0 I : parse_config cccc\r01-05 12:10:47.811 0 0 I : parse_config ddddd =======key: code\r01-05 12:10:47.811 0 0 I : parse_config eeee ======value: 0xb1,0xb2\r01-05 12:10:47.811 0 0 I : parse_config ffffffff\r01-05 12:10:47.811 0 0 I : parse_config hhhhhhhhh\r01-05 12:10:47.811 0 0 I : parse_config jjjjjjjjjjjjjjjjjjj ------------Parsed code[0]: b1\r01-05 12:10:47.811 0 0 I : parse_config jjjjjjjjjjjjjjjjjjj ------------Parsed code[1]: b2\r01-05 12:10:47.811 0 0 I : parse_config kkkk\r01-05 12:10:47.811 0 0 I : parse_config cccc\r01-05 12:10:47.811 0 0 I : parse_config mmmmmmm\r01-05 12:10:47.811 0 0 I : parse_config succeeded 下面是2023/11/24 17:01完全可用的一个版本。 #include \u003clinux/module.h\u003e #include \u003clinux/kernel.h\u003e #include \u003clinux/init.h\u003e #include \u003clinux/fs.h\u003e #include \u003clinux/uaccess.h\u003e #include \u003clinux/string.h\u003e #include \u003clinux/slab.h\u003e #include \u003clinux/types.h\u003e #define CONFIG_FILE_PATH \"/custom/metro/system/system_config.ini\" static char codeBuf[1024]; struct ConfigData { unsigned char mac[6]; unsigned int *code; // 使用指针来表示变长数组 size_t code_size; // 记录数组的大小 }; // 函数声明 void print_array(const unsigned int *array, size_t size); int contains_value(const unsigned int *array, size_t size, unsigned int value); int parse_config(const char *buffer, struct ConfigData *config); void handle_config_file(const char *file_path); // 读取文件的辅助函数 int read_file(const char *file_path, char *buffer, size_t buffer_size) { struct file *","date":"2023-11-22","objectID":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/:13:0","tags":["原创","android","内核添加模块","驱动模块"],"title":"内核中添加驱动模块","uri":"https://daizelai.github.io/posts/linux/20231122_1556%E5%86%85%E6%A0%B8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9D%97/"},{"categories":["原创","msm8953_64","user版本"],"content":"编译android系统user版本时默认开启adb模式, user版本默认开启adb模式","date":"2023-11-21","objectID":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/","tags":["原创","msm8953_64","user版本"],"title":"编译android系统user版本时默认开启adb模式","uri":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/"},{"categories":["原创","msm8953_64","user版本"],"content":"20231121_1910编译android系统user版本时默认开启adb模式 ","date":"2023-11-21","objectID":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/:0:0","tags":["原创","msm8953_64","user版本"],"title":"编译android系统user版本时默认开启adb模式","uri":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/"},{"categories":["原创","msm8953_64","user版本"],"content":"一、描述 默认编译user系统后，是不能直接adb和root的，但有时候为了方便又必须要这样做，怎么办呢？ 本文给出了msm8953_64+Android7.1环境下，如何解决这个问题。 ","date":"2023-11-21","objectID":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/:1:0","tags":["原创","msm8953_64","user版本"],"title":"编译android系统user版本时默认开启adb模式","uri":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/"},{"categories":["原创","msm8953_64","user版本"],"content":"二、user版本默认开启adb以及root权限 ","date":"2023-11-21","objectID":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/:2:0","tags":["原创","msm8953_64","user版本"],"title":"编译android系统user版本时默认开启adb模式","uri":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/"},{"categories":["原创","msm8953_64","user版本"],"content":"修改secure属性 diff --git a/build/core/main.mk b/build/core/main.mk index 76b368d21d..f9a55894ad 100644 --- a/build/core/main.mk +++ b/build/core/main.mk @@ -390,11 +390,11 @@ enable_target_debugging := true tags_to_install := ifneq (,$(user_variant)) # Target is secure in user builds. - ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=1 + ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=0 ADDITIONAL_DEFAULT_PROPERTIES += security.perf_harden=1 ifeq ($(user_variant),user) - ADDITIONAL_DEFAULT_PROPERTIES += ro.adb.secure=1 + ADDITIONAL_DEFAULT_PROPERTIES += ro.adb.secure=0 endif ifeq ($(user_variant),userdebug) @@ -402,7 +402,7 @@ ifneq (,$(user_variant)) tags_to_install += debug else # Disable debugging in plain user builds. - enable_target_debugging := + # enable_target_debugging := endif # Disallow mock locations by default for user builds @@ -753,7 +753,7 @@ ifdef FULL_BUILD #或者直接使用下面这个 #product_MODULES := $(filter-out $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_DEL_PACKAGES), $(product_MODULES)) #added end by daizelai - + # Resolve the :32 :64 module name modules_32 := $(patsubst %:32,%,$(filter %:32, $(product_MODULES))) modules_64 := $(patsubst %:64,%,$(filter %:64, $(product_MODULES))) ","date":"2023-11-21","objectID":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/:2:1","tags":["原创","msm8953_64","user版本"],"title":"编译android系统user版本时默认开启adb模式","uri":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/"},{"categories":["原创","msm8953_64","user版本"],"content":"修改adb模块的android.mk文件 允许adb root，添加adb认证过滤user。 diff --git a/system/core/adb/Android.mk b/system/core/adb/Android.mk index 94e2a5794d..60f81ac259 100644 --- a/system/core/adb/Android.mk +++ b/system/core/adb/Android.mk @@ -327,9 +327,9 @@ LOCAL_CFLAGS := \\ -D_GNU_SOURCE \\ -Wno-deprecated-declarations \\ -LOCAL_CFLAGS += -DALLOW_ADBD_NO_AUTH=$(if $(filter userdebug eng,$(TARGET_BUILD_VARIANT)),1,0) +LOCAL_CFLAGS += -DALLOW_ADBD_NO_AUTH=$(if $(filter userdebug user eng,$(TARGET_BUILD_VARIANT)),1,0) -#daizelai ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT))) +#daizelai ifneq (,$(filter userdebug user eng,$(TARGET_BUILD_VARIANT))) LOCAL_CFLAGS += -DALLOW_ADBD_DISABLE_VERITY=1 LOCAL_CFLAGS += -DALLOW_ADBD_ROOT=1 #daizelai endif ","date":"2023-11-21","objectID":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/:2:2","tags":["原创","msm8953_64","user版本"],"title":"编译android系统user版本时默认开启adb模式","uri":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/"},{"categories":["原创","msm8953_64","user版本"],"content":"修改sepolicy diff --git a/system/sepolicy/Android.mk b/system/sepolicy/Android.mk index 0bfa54d389..07d53dd9d2 100644 --- a/system/sepolicy/Android.mk +++ b/system/sepolicy/Android.mk @@ -94,7 +94,7 @@ $(sepolicy_policy.conf): $(call build_policy, $(sepolicy_build_files)) @mkdir -p $(dir $@) $(hide) m4 $(PRIVATE_ADDITIONAL_M4DEFS) \\ -D mls_num_sens=$(PRIVATE_MLS_SENS) -D mls_num_cats=$(PRIVATE_MLS_CATS) \\ - -D target_build_variant=$(TARGET_BUILD_VARIANT) \\ + -D target_build_variant=eng \\ -s $^ \u003e $@ $(hide) sed '/dontaudit/d' $@ \u003e $@.dontaudit @@ -108,7 +108,6 @@ $(LOCAL_BUILT_MODULE): $(sepolicy_policy.conf) $(HOST_OUT_EXECUTABLES)/checkpoli echo \"ERROR: permissive domains not allowed in user builds\" 1\u003e\u00262; \\ echo \"List of invalid domains:\" 1\u003e\u00262; \\ cat $@.permissivedomains 1\u003e\u00262; \\ - exit 1; \\ fi $(hide) mv $@.tmp $@ @@ -145,7 +144,6 @@ $(LOCAL_BUILT_MODULE): $(sepolicy_policy_recovery.conf) $(HOST_OUT_EXECUTABLES)/ echo \"ERROR: permissive domains not allowed in user builds\" 1\u003e\u00262; \\ echo \"List of invalid domains:\" 1\u003e\u00262; \\ cat $@.permissivedomains 1\u003e\u00262; \\ - exit 1; \\ fi $(hide) mv $@.tmp $@ ","date":"2023-11-21","objectID":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/:2:3","tags":["原创","msm8953_64","user版本"],"title":"编译android系统user版本时默认开启adb模式","uri":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/"},{"categories":["原创","msm8953_64","user版本"],"content":"user版本开启fastboot【一般不修改】【未次也未修改】 此项只是记录一下。 路径：bootable/bootloader/lk/app/aboot/aboot.c -3979 #ifndef DISABLE_FASTBOOT_CMDS +3979 //#ifndef DISABLE_FASTBOOT_CMDS 3980 /* Register the following commands only for non-user builds */ 3981 {\"flash:\", cmd_flash}, 3982 {\"erase:\", cmd_erase}, 3983 {\"boot\", cmd_boot}, 3984 {\"continue\", cmd_continue}, 3985 {\"reboot\", cmd_reboot}, 3986 {\"reboot-bootloader\", cmd_reboot_bootloader}, 3987 {\"oem unlock\", cmd_oem_unlock}, 3988 {\"oem unlock-go\", cmd_oem_unlock_go}, 3989 {\"oem lock\", cmd_oem_lock}, 3990 {\"flashing unlock\", cmd_oem_unlock}, 3991 {\"flashing lock\", cmd_oem_lock}, 3992 {\"flashing lock_critical\", cmd_flashing_lock_critical}, 3993 {\"flashing unlock_critical\", cmd_flashing_unlock_critical}, 3994 {\"flashing get_unlock_ability\", cmd_flashing_get_unlock_ability}, 3995 {\"oem device-info\", cmd_oem_devinfo}, 3996 {\"preflash\", cmd_preflash}, 3997 {\"oem enable-charger-screen\", cmd_oem_enable_charger_screen}, 3998 {\"oem disable-charger-screen\", cmd_oem_disable_charger_screen}, 3999 {\"oem off-mode-charge\", cmd_oem_off_mode_charger}, 4000 {\"oem select-display-panel\", cmd_oem_select_display_panel}, 4001 #if UNITTEST_FW_SUPPORT 4002 {\"oem run-tests\", cmd_oem_runtests}, 4003 #endif -4004 #endif +4004 //#endif ","date":"2023-11-21","objectID":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/:2:4","tags":["原创","msm8953_64","user版本"],"title":"编译android系统user版本时默认开启adb模式","uri":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/"},{"categories":["原创","msm8953_64","user版本"],"content":"内核编译宏配置文件 2023/11/22 14:39 user版本和userdebug版本所使用的内核配置文件是不同的，这个在AndroidBorad.mk中有说明。 路径：device/qcom/msm8953_64/AndroidBoard.mk 18 #---------------------------------------------------------------------- 19 # Compile Linux Kernel 20 #---------------------------------------------------------------------- 21 22 #joe add fastboot complie option 20180830 23 ifeq ($(KERNEL_DEFCONFIG),) 24 ifeq ($(TARGET_QUECTEL_BUILD_FASTBOOT),userfastboot) 25 KERNEL_DEFCONFIG := msmcortex-perf_fastboot_defconfig 26 endif 27 endif 28 #joe add fastboot complie option 20180830 29 30 ifeq ($(KERNEL_DEFCONFIG),) 31 ifeq ($(TARGET_BUILD_VARIANT),user) 32 KERNEL_DEFCONFIG := msmcortex-perf_defconfig // user 33 else 34 KERNEL_DEFCONFIG := msmcortex_defconfig // debug 35 endif 36 endif 37 38 39 ifeq ($(TARGET_KERNEL_SOURCE),) 40 TARGET_KERNEL_SOURCE := kernel 41 endif 42 include $(TARGET_KERNEL_SOURCE)/AndroidKernel.mk ","date":"2023-11-21","objectID":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/:2:5","tags":["原创","msm8953_64","user版本"],"title":"编译android系统user版本时默认开启adb模式","uri":"https://daizelai.github.io/posts/android/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/20231121_1910%E7%BC%96%E8%AF%91android%E7%B3%BB%E7%BB%9Fuser%E7%89%88%E6%9C%AC%E6%97%B6%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AFadb%E6%A8%A1%E5%BC%8F/"},{"categories":["原创原创","msm8953_64","android"],"content":"android系统开机启动脚本","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"20231114_2028添加系统启动脚本 ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:0:0","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"一、描述 ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:1:0","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"1.1.功能描述 动态修改网卡地址。 android系统启动时启动脚本。 android开机启动脚本。 android系统开机启动服务。 android开机时启动服务。 android开机时启动自定义服务。 android系统自启动服务。 android启动后修改mac地址。 android系统启动后修改mac地址。 msm8953_64启动后修改mac地址。 msm8953_64启动后修改网卡地址。 msm8953_64系统启动后修改mac地址。 ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:1:1","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"1.2.本次修改的最终patch modify_mac_when_android_starts.patch ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:1:2","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"二、开始 ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:2:0","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"2.1.新建一个shell脚本 新建shell脚本文件。by daizelai on 2023/11/15 09:45 路径：/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/device/qcom/common/rootdir/etc/init.gbcom.mac.script.sh #!/system/bin/sh # # update gbcom mac address. # # Sample command: /system/bin/sh /system/etc/init.gbcom.mac.script.sh # All the output files will be created under root privilege. Please use # \"adb root\" before pulling the generated files. /system/bin/ifconfig eth0 down /system/bin/ifconfig eth0 hw ether 00:e0:99:8e:38:0f /system/bin/ifconfig eth0 up ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:2:1","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"2.2.增加脚本初始化 配置脚本提交。by daizelai on 2023/11/15 09:20 路径：/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/device/qcom/common/base.mk INIT += fstab.qcom INIT += init.qcom.sensors.sh +INIT += init.gbcom.mac.script.sh ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:2:2","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"2.3.编译拷贝 配置。by daizelai on 2023/11/15 09:27 路径：/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/device/qcom/common/rootdir/Android.mk include $(CLEAR_VARS) LOCAL_MODULE := init.qcom.sensors.sh LOCAL_MODULE_TAGS := optional eng LOCAL_MODULE_CLASS := ETC LOCAL_SRC_FILES := etc/init.qcom.sensors.sh LOCAL_MODULE_PATH := $(TARGET_ROOT_OUT) include $(BUILD_PREBUILT) + +include $(CLEAR_VARS) +LOCAL_MODULE := init.gbcom.mac.script.sh +LOCAL_MODULE_TAGS := optional eng +LOCAL_MODULE_CLASS := ETC +LOCAL_SRC_FILES := etc/init.gbcom.mac.script.sh +include $(BUILD_PREBUILT) ifneq (,$(filter userdebug eng, $(TARGET_BUILD_VARIANT))) include $(CLEAR_VARS) LOCAL_MODULE := init.qcom.test.rc LOCAL_MODULE_TAGS := optional eng LOCAL_MODULE_CLASS := ETC LOCAL_SRC_FILES := etc/init.qcom.test.rc LOCAL_MODULE_PATH := $(TARGET_ROOT_OUT) include $(BUILD_PREBUILT) endif ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:2:3","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"2.4.系统启动时调用 系统启动后调用脚本。 路径：/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/device/qcom/common/rootdir/etc/init.qcom.rc on property:sys.boot_completed=1\rwrite /dev/kmsg \"Boot completed \"\r#Reset read ahead for dm-0 and dm-1 to 512kb\rwrite /sys/block/dm-0/queue/read_ahead_kb 512\rwrite /sys/block/dm-1/queue/read_ahead_kb 512\r#WDSP FW boot sysfs node used by STHAL\rchown media audio /sys/kernel/wdsp0/boot\r#CPE fw_name used by sound trigger HAL\rchown media audio /sys/kernel/wcd_cpe0/fw_name\r+ #update sh\r+ chmod 0777 /system/etc/init.gbcom.mac.script.sh\r+ start update_gbcom_mac\ron property:sys.boot_completed=1 \u0026\u0026property:gsm.version.baseband=*\rsetprop persist.radio.baseband.quec ${gsm.version.baseband}\r......\rservice iprenew_p2p /system/bin/dhcpcd -n\rclass late_start\rdisabled\roneshot\rservice iprenew_wigig0 /system/bin/dhcpcd -n\rclass late_start\rdisabled\roneshot\r+\r+service update_gbcom_mac /system/bin/sh /system/etc/init.gbcom.mac.script.sh\r+ class main\r+ user root\r+ group root shell system\r+ disabled\r+ oneshot\rservice ptt_socket_app /system/bin/ptt_socket_app -d\rclass main\ruser root\rgroup root\roneshot ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:2:4","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"2.5.配置shell脚本执行权限 脚本执行权限。 路径：/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/device/qcom/sepolicy/common/file_contexts ################################### # cache files # /cache/FTM_AP(/.*)? u:object_r:mmi_data_file:s0 #ethan add for wifi nv file /system/bin/WifiNvService u:object_r:mmi_exec:s0 + +################################### +# update gbcom mac +# +/system/bin/init.gbcom.mac.script\\.sh u:object_r:qti_init_shell_exec:s0 ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:2:5","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"2.6.配置shell脚本执行权限二 shell权限继续配置。 路径：/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/device/qcom/sepolicy/common/init_shell.te # Restricted domain for shell processes spawned by init.\r# Normally these are shell commands or scripts invoked via sh\r# from an init*.rc file. No service should ever run in this domain.\rtype qti_init_shell, domain, domain_deprecated;\r+type qti_init_shell_exec, exec_type,file_type;\rdomain_auto_trans(init, shell_exec, qti_init_shell)\r# For executing init shell scripts (init.qcom.early_boot.sh)\rallow qti_init_shell rootfs:file entrypoint;\r......\r#Allow /sys access to write zram disksize\rallow qti_init_shell sysfs_zram:dir r_dir_perms;\rallow qti_init_shell sysfs_zram:file w_file_perms;\r# To get GPU frequencies\rallow qti_init_shell sysfs_kgsl:file r_file_perms;\r+\r+# update gbcom mac\r+allow qti_init_shell sdcardfs:chr_file {read};\r+allow qti_init_shell mnt_user_file:dir search;\r+allow qti_init_shell mnt_user_file:lnk_file read;\r+allow qti_init_shell sdcardfs:dir search;\r+allow qti_init_shell storage_file:dir search;\r+allow qti_init_shell storage_file:lnk_file read;\r+allow qti_init_shell tmpfs:lnk_file read;\r+allow qti_init_shell sysfs:file {read write}; ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:2:6","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"三、编译拷贝文件到某路径 ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:3:0","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"3.1.方案一【之前拷贝其它文件已使用过，只要这一步就可以实现，适配拷贝一个APP用的配置文件】 关键字：预置文件，拷贝文件，默认文件，默认配置文件。 在msm8953_64 android7.1中，默认放入文件。 将该脚本从编译路径下拷贝到生成系统文件的指定路径下，此方法可以在刷机包中预放配置文件了。 路径：device/qcom/msm8953_64/msm8953_64.mk PRODUCT_COPY_FILES += \\ device/qcom/common/rootdir/etc/init.gbcom.mac.script.sh:system/etc/init.gbcom.mac.script.sh ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:3:1","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"3.2.方案二【本次采用】 路径：/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/device/qcom/common/rootdir/Android.mk include $(CLEAR_VARS) LOCAL_MODULE := init.qcom.sensors.sh LOCAL_MODULE_TAGS := optional eng LOCAL_MODULE_CLASS := ETC LOCAL_SRC_FILES := etc/init.qcom.sensors.sh LOCAL_MODULE_PATH := $(TARGET_ROOT_OUT) include $(BUILD_PREBUILT) + +include $(CLEAR_VARS) +LOCAL_MODULE := init.gbcom.mac.script.sh +LOCAL_MODULE_TAGS := optional eng +LOCAL_MODULE_CLASS := ETC +LOCAL_SRC_FILES := etc/init.gbcom.mac.script.sh #include $(BUILD_EXECUTABLE) 不要使用这个 +include $(BUILD_PREBUILT) ifneq (,$(filter userdebug eng, $(TARGET_BUILD_VARIANT))) include $(CLEAR_VARS) LOCAL_MODULE := init.qcom.test.rc LOCAL_MODULE_TAGS := optional eng LOCAL_MODULE_CLASS := ETC LOCAL_SRC_FILES := etc/init.qcom.test.rc LOCAL_MODULE_PATH := $(TARGET_ROOT_OUT) include $(BUILD_PREBUILT) endif 最开始使用#include $(BUILD_EXECUTABLE)这个，然后一编译make -j20就出错，然后看了下以前正常编译通过的out/target/product/msm8953_64/system/etc/qca6234-service.sh文件，然后对比了下/sz14_android_7.1.2_qcom/device/qcom/common/rootdir/Android.mk中qca6234-service.sh对比的配置，修改成一样的include $(BUILD_PREBUILT)，然后使用make -j20编译成功。 可以看到，下面编译出的产物中已经有init.gbcom.mac.script.sh文件了。 [android_SC20@localhost etc]$ date\rWed Nov 15 14:29:17 CST 2023\r[android_SC20@localhost etc]$ pwd\r/home/android_SC20/daizelai/androidsc60/wh19/sz14_android_7.1.2_qcom/out/target/product/msm8953_64/system/etc\r[android_SC20@localhost etc]$ ls -l\rtotal 1692\rdrwxrwxr-x 4 android_SC20 android_SC20 4096 Nov 15 14:15 acdbdata\r-rwxrwxr-x 1 android_SC20 android_SC20 1054 Nov 15 14:15 apdr.conf\r-rw-rw-r-- 1 android_SC20 android_SC20 2308 Nov 15 14:15 appops_policy.xml\rdrwxrwxr-x 2 android_SC20 android_SC20 4096 Nov 15 13:45 bluetooth\r-rwxrwxr-x 1 android_SC20 android_SC20 30438 Nov 15 14:15 cacert_location.pem\rdrwxrwxr-x 2 android_SC20 android_SC20 4096 Nov 15 14:15 camera\r-rwxrwxr-x 1 android_SC20 android_SC20 3252 Nov 15 14:15 capability.xml\r-rw-rw-r-- 1 android_SC20 android_SC20 989184 Nov 15 14:15 cdrom_install.iso\r-rw-rw-r-- 1 android_SC20 android_SC20 1045 Nov 15 14:15 clatd.conf\rdrwxrwxr-x 3 android_SC20 android_SC20 4096 Nov 15 14:15 cne\rdrwxrwxr-x 2 android_SC20 android_SC20 4096 Nov 15 14:15 data\rdrwxrwxr-x 3 android_SC20 android_SC20 4096 Nov 15 14:15 dpm\rdrwxrwxr-x 2 android_SC20 android_SC20 4096 Nov 15 14:15 drc\r-rwxrwxr-x 1 android_SC20 android_SC20 1362 Nov 15 14:15 ethertypes\rdrwxrwxr-x 4 android_SC20 android_SC20 4096 Nov 15 14:15 firmware\r-rwxrwxr-x 1 android_SC20 android_SC20 1826 Nov 15 13:50 flp.conf\r-rwxrwxr-x 1 android_SC20 android_SC20 14103 Nov 15 13:50 fonts.xml\r-rw-rw-r-- 1 android_SC20 android_SC20 312 Nov 15 13:50 fs_config_files\r-rwxrwxr-x 1 android_SC20 android_SC20 12225 Nov 15 14:15 ftm_test_config\r-rwxrwxr-x 1 android_SC20 android_SC20 27930 Nov 15 14:15 ftm_test_config_msm8953-sku3-tasha-snd-card\r-rwxrwxr-x 1 android_SC20 android_SC20 11604 Nov 15 14:15 ftm_test_config_mtp\r-rwxrwxr-x 1 android_SC20 android_SC20 32166 Nov 15 14:15 ftm_test_config_wcd9335\r-rw-rw-r-- 1 android_SC20 android_SC20 5046 Nov 15 14:15 gps.conf\r-rwxrwxr-x 1 android_SC20 android_SC20 1918 Nov 15 14:11 hcidump.sh\rdrwxrwxr-x 2 android_SC20 android_SC20 4096 Nov 15 14:15 hostapd\r-rw-rw-r-- 1 android_SC20 android_SC20 3222 Nov 15 14:15 hsic.control.bt.sh\rdrwxrwxr-x 2 android_SC20 android_SC20 4096 Nov 15 14:15 init\r-rwxrwxr-x 1 android_SC20 android_SC20 2767 Nov 15 14:15 init.ath3k.bt.sh\r-rwxrwxr-x 1 android_SC20 android_SC20 1773 Nov 15 14:15 init.crda.sh\r-rw-rw-r-- 1 android_SC20 android_SC20 1972 Nov 15 14:15 init.gbcom.mac.script.sh\r-rw-rw-r-- 1 android_SC20 android_SC20 4987 Nov 15 14:15 init.qcom.audio.sh\r-rw-rw-r-- 1 android_SC20 android_SC20 10269 Nov 15 14:15 init.qcom.bt.sh\r-rwxrwxr-x 1 android_SC20 android_SC20 3651 Nov 15 14:15 init.qcom.coex.sh\r-rwxrwxr-x 1 android_SC20 android_SC20 22317 Nov 15 14:15 init.qcom.debug.sh\r-rw-rw-r-- 1 android_SC20 android_SC20 1725 Nov 15 14:15 init.qcom.efs.sync.sh\r-rwxrwxr-x 1 android_SC20 android_SC20 2738 N","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:3:2","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"四、成功的修改了设备的mac地址 系统启动后成功修改了mac地址-串口日志 msm8953_64:/ $ ifconfig\rifconfig: socket 2 0: Permission denied\r1|msm8953_64:/ $ su\rmsm8953_64:/ # ifconfig\rrmnet_ipa0 Link encap:UNSPEC UP RUNNING MTU:2000 Metric:1\rRX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:0 TX bytes:0 dummy0 Link encap:Ethernet HWaddr ba:ce:7d:99:e4:98\rinet6 addr: fe80::b8ce:7dff:fe99:e498/64 Scope: Link\rUP BROADCAST RUNNING NOARP MTU:1500 Metric:1\rRX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:3 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:0 TX bytes:210 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope: Host\rUP LOOPBACK RUNNING MTU:65536 Metric:1\rRX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:0 TX bytes:0 msm8953_64:/ # [ 73.458947] init: Service 'bootanim' (pid 861) exited with status 0\r[ 73.603171] init: write_file: Unable to open '/sys/block/dm-1/queue/read_ahead_kb': No such file or directory\r[ 73.615727] init: Starting service 'update_gbcom_mac'...\r[ 73.622923] init: Starting service 'qcom-post-boot'...\r[ 73.629895] init: Starting service 'qti-testscripts'...\r[ 73.636499] init: cannot find '/system/bin/qrngp' (No such file or directory), disabling 'qrngp'\r[ 73.644807] init: write_file: Unable to open '/sys/class/leds/green/brightness': No such file or directory\r[ 73.672386] init: write_file: Unable to write to '/sys/class/gpio/export': Device or resource busy\r[ 73.683099] init: write_file: Unable to open '/sys/class/gpio/gpio44/direction': No such file or directory\r[ 73.710622] init: Starting service 'cs-post-boot'...\r[ 73.720813] init: Service 'qti-testscripts' (pid 2889) exited with status 0\r[ 73.730325] init: Starting service 'exec 4 (/system/bin/bootstat)'...\r[ 73.772386] init: Service 'cs-post-boot' (pid 2899) exited with status 0\r[ 73.780828] init: Service 'exec 4 (/system/bin/bootstat)' (pid 2901) exited with status 0\r[ 73.793682] init: Starting service 'exec 5 (/system/bin/bootstat)'...\r[ 73.804020] init: Service 'update_gbcom_mac' (pid 2881) exited with status 0\r[ 73.850487] init: Service 'exec 5 (/system/bin/bootstat)' (pid 2918) exited with status 0\r[ 73.860162] init: Starting service 'exec 6 (/system/bin/bootstat)'...\r[ 73.922070] init: Service 'exec 6 (/system/bin/bootstat)' (pid 2920) exited with status 0\r[ 73.931011] init: Starting service 'exec 7 (/system/bin/bootstat)'...\r[ 73.964790] init: Service 'exec 7 (/system/bin/bootstat)' (pid 2925) exited with status 0\r[ 74.374007] init: cannot find '/system/vendor/bin/gamed' (No such file or directory), disabling 'gamed'\r[ 74.396765] devbw soc:qcom,cpubw: dev_pm_opp_get_opp_count: device OPP not found (-19)\rmsm8953_64:/ # ifconfig\rrmnet_ipa0 Link encap:UNSPEC UP RUNNING MTU:2000 Metric:1\rRX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:0 TX bytes:0 eth0 Link encap:Ethernet HWaddr 00:e0:99:8e:38:0f\rUP BROADCAST MULTICAST MTU:1500 Metric:1\rRX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:0 TX bytes:0 dummy0 Link encap:Ethernet HWaddr ba:ce:7d:99:e4:98\rinet6 addr: fe80::b8ce:7dff:fe99:e498/64 Scope: Link\rUP BROADCAST RUNNING NOARP MTU:1500 Metric:1\rRX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:3 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:0 TX bytes:210 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope: Host\rUP LOOPBACK RUNNING MTU:65536 Metric:1\rRX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:0 TX bytes:0 msm8953_64:/ # date\rMon Feb 9 14:58:44 CST 1970\rmsm8953_64:/ # ifconfig\r","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:4:0","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创原创","msm8953_64","android"],"content":"五、查看脚本文件 查看设备板子中的脚本文件init.gbcom.mac.script.sh。 msm8953_64:/system/etc # pwd\r/system/etc\rmsm8953_64:/system/etc # date\rMon Feb 9 15:13:19 CST 1970\rmsm8953_64:/system/etc # ls -l *.sh\r-rw-r--r-- 1 root root 1918 2023-11-16 16:34 hcidump.sh\r-rw-r--r-- 1 root root 3222 2023-11-16 16:41 hsic.control.bt.sh\r-rw-r--r-- 1 root root 2767 2023-11-16 16:41 init.ath3k.bt.sh\r-rw-r--r-- 1 root root 1773 2023-11-16 16:41 init.crda.sh\r-rw-r--r-- 1 root root 417 2023-11-16 16:41 init.gbcom.mac.script.sh\r-rw-r--r-- 1 root root 4987 2023-11-16 16:41 init.qcom.audio.sh\r-rw-r--r-- 1 root root 10269 2023-11-16 16:41 init.qcom.bt.sh\r-rw-r--r-- 1 root root 3651 2023-11-16 16:41 init.qcom.coex.sh\r-rw-r--r-- 1 root root 22317 2023-11-16 16:41 init.qcom.debug.sh\r-rw-r--r-- 1 root root 1725 2023-11-16 16:41 init.qcom.efs.sync.sh\r-rw-r--r-- 1 root root 2738 2023-11-16 16:41 init.qcom.fm.sh\r-rw-r--r-- 1 root root 125621 2023-11-16 16:41 init.qcom.post_boot.sh\r-rw-r--r-- 1 root root 2767 2023-11-16 16:41 init.qcom.sdio.sh\r-rw-r--r-- 1 root root 1985 2023-11-16 16:41 init.qcom.testscripts.sh\r-rw-r--r-- 1 root root 4560 2023-11-16 16:41 init.qcom.uicc.sh\r-rw-r--r-- 1 root root 19064 2023-11-16 16:41 init.qcom.wifi.sh\r-rw-r--r-- 1 root root 2157 2023-11-16 16:41 init.qti.ims.sh\r-rw-r--r-- 1 root root 3740 2023-11-16 16:41 qca6234-service.sh\rmsm8953_64:/system/etc # ","date":"2023-11-16","objectID":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/:5:0","tags":["原创","android","msm8953_64"],"title":"android系统开机启动脚本","uri":"https://daizelai.github.io/posts/android/20231114_2028%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"},{"categories":["原创","android","浮动窗口"],"content":"android实现浮动窗口记录","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","浮动窗口"],"content":"20231108_1353Android实现浮动窗口记录 ","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/:0:0","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","浮动窗口"],"content":"一、描述 实现浮动窗口。 难点 1、悬浮窗的穿透点击 当悬浮窗悬浮的时候，理想状态，应该是悬浮窗里面的按钮和悬浮窗底层点击触摸事件不冲突。 2、需要注意，悬浮窗的可能会出现黑色背景，需要加params.format = PixelFormat.RGBA_8888; ","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/:1:0","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","浮动窗口"],"content":"二、步骤 思路： 1、写一个服务，因为悬浮窗长期存在，不依赖于界面，所有最好写在服务里面。 2、在服务需要获取到WindowManager这个类，用来加载一个悬浮窗的布局和一些列点击事件。 3、启动服务，悬浮窗就可以启动。 下表展示了整个实现浮动窗口的流程。 |步骤|描述| |:–—:|:—| |1|添加权限| |2|创建悬浮窗口的布局文件| |3|创建浮动窗口的Service| |4|在Service中实现浮动窗口的逻辑| |5|启动浮动窗口的Service| ","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/:2:0","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","浮动窗口"],"content":"三、添加权限 首先，我们需要在AndroidManifest.xml文件中添加一个悬浮窗口的权限。 \u003cuses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\" /\u003e ","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/:3:0","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","浮动窗口"],"content":"四、创建悬浮窗口的布局文件 在res/layout目录下创建一个布局文件，命名为floating_window_layout.xml，用于定义浮动窗口的布局。 \u003cRelativeLayout xmlns:android=\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"\u003e \u003c!-- 浮动窗口的内容 --\u003e \u003c/RelativeLayout\u003e ","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/:4:0","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","浮动窗口"],"content":"五、创建浮动窗口的Service 接下来，我们需要创建一个继承自Service的类，用于实现浮动窗口的逻辑。 public class FloatingWindowService extends Service { @Override public int onStartCommand(Intent intent, int flags, int startId) { return super.onStartCommand(intent, flags, startId); } @Override public void onDestroy() { super.onDestroy(); } @Nullable @Override public IBinder onBind(Intent intent) { return null; } } ","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/:5:0","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","浮动窗口"],"content":"六、在Service中实现浮动窗口的逻辑 在FloatingWindowService中，我们需要实现以下几个方法： ","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/:6:0","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","浮动窗口"],"content":"6.1 onCreate() 在这个方法中，我们可以进行一些初始化的操作。 { @Override public void onCreate() { super.onCreate(); // 初始化浮动窗口的布局 View floatingView = LayoutInflater.from(this).inflate(R.layout.floating_window_layout, null); // 添加浮动窗口的布局 WindowManager.LayoutParams params = new WindowManager.LayoutParams(); params.type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY; params.format = PixelFormat.RGBA_8888; params.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE; params.width = WindowManager.LayoutParams.WRAP_CONTENT; params.height = WindowManager.LayoutParams.WRAP_CONTENT; // 这里需要修改为适合自己应用的WindowManager WindowManager windowManager = (WindowManager) getSystemService(WINDOW_SERVICE); windowManager.addView(floatingView, params); // 实现浮动窗口的逻辑 // ... } /** * 初始化一个悬浮窗 */ private void initWindow() { // 获取WindowManager mSystemService = (WindowManager) getSystemService(WINDOW_SERVICE); // 创建布局参数 WindowManager.LayoutParams params = new WindowManager.LayoutParams(); //这里需要进行不同的设置 if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) { params.type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY; } else { params.type = WindowManager.LayoutParams.TYPE_PHONE; } //设置透明度 params.alpha = 1.0f; //设置内部视图对齐方式 params.gravity = Gravity.RIGHT | Gravity.BOTTOM; //窗口的右上角角坐标 params.x = 20; params.y = 20; //是指定窗口的像素格式为 RGBA_8888。 //使用 RGBA_8888 像素格式的窗口可以在保持高质量图像的同时实现透明度效果。 params.format = PixelFormat.RGBA_8888; //设置窗口的宽高,这里为自动 params.width = WindowManager.LayoutParams.WRAP_CONTENT; params.height = WindowManager.LayoutParams.WRAP_CONTENT; //这段非常重要，是后续是否穿透点击的关键 params.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE //表示悬浮窗口不需要获取焦点，这样用户点击悬浮窗口以外的区域，就不需要关闭悬浮窗口。 |WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;//表示悬浮窗口不会阻塞事件传递，即用户点击悬浮窗口以外的区域时，事件会传递给后面的窗口处理。 //这里的引入布局文件的方式，也可以动态添加控件 mView = View.inflate(getApplicationContext(), R.layout.item_back, null); Button btnBack = mView.findViewById(R.id.btn_back); mSystemService.addView(mView,params); } } ","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/:6:1","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","浮动窗口"],"content":"6.2 onStartCommand() 在这个方法中，我们可以处理一些启动Service的逻辑。 @Override public void onDestroy() { super.onDestroy(); // 释放浮动窗口的资源 // ... } ","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/:6:2","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","浮动窗口"],"content":"七、启动浮动窗口的Service 最后，我们需要在Activity中启动浮动窗口的Service。 路径：E:\\develop\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\activity\\TrainActivity.java + import com.gbcom.subwaysystem.service.FloatingWindowService; Intent intent = new Intent(MainActivity.this, FloatingWindowService.class); startService(intent); 注意，当服务销毁的时候，需要记得，把布局的view给removeView。 @Override public void onDestroy() { super.onDestroy(); if (mSystemService != null \u0026\u0026 mView != null){ mSystemService.removeView(mView); } } ","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/:7:0","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","浮动窗口"],"content":"八、注意 注意 1、需要注意在悬浮窗的点击中，需要效果是悬浮窗里面的按钮和悬浮窗底层点击触摸事件不冲突，关键代码是这儿 params.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE //表示悬浮窗口不需要获取焦点，这样用户点击悬浮窗口以外的区域，就不需要关闭悬浮窗口。 |WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;//表示悬浮窗口不会阻塞事件传递，即用户点击悬浮窗口以外的区域时，事件会传递给后面的窗口处理。 2、悬浮窗如果出现黑色背景，必须加这儿 //是指定窗口的像素格式为 RGBA_8888。 //使用 RGBA_8888 像素格式的窗口可以在保持高质量图像的同时实现透明度效果。 params.format = PixelFormat.RGBA_8888; 3、如果要隐藏当前的avtivity，只有悬浮窗，可以通过moveTaskToBack(true);设置 当activity的启动模式是singleInstance的时候，在当前的activity直接调用moveTaskToBack(true)，即可将activity 退到后台 参数说明： 参数为false——代表只有当前activity是task根，指应用启动的第一个activity时，才有效; 参数为true——则忽略这个限制，任何activity都可以有效。 设置avtivity启动模式在AndroidManifest里面 \u003cactivity android:name=\".MainActivity\" android:configChanges=\"orientation|keyboardHidden|screenSize\" android:exported=\"true\" android:launchMode=\"singleInstance\"\u003e \u003cintent-filter\u003e \u003caction android:name=\"android.intent.action.MAIN\" /\u003e \u003ccategory android:name=\"android.intent.category.LAUNCHER\" /\u003e \u003c/intent-filter\u003e \u003c/activity\u003e 4.完整代码 public class BackService extends Service { private View mView; private WindowManager mSystemService; @Override public int onStartCommand(Intent intent, int flags, int startId) { initWindow(); return super.onStartCommand(intent, flags, startId); } @Override public void onDestroy() { super.onDestroy(); if (mSystemService != null \u0026\u0026 mView != null){ mSystemService.removeView(mView); } } /** * 初始化一个悬浮窗 */ private void initWindow() { // 获取WindowManager mSystemService = (WindowManager) getSystemService(WINDOW_SERVICE); // 创建布局参数 WindowManager.LayoutParams params = new WindowManager.LayoutParams(); if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) { params.type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY; } else { params.type = WindowManager.LayoutParams.TYPE_PHONE; } //设置透明度 params.alpha = 1.0f; //设置内部视图对齐方式 params.gravity = Gravity.RIGHT | Gravity.BOTTOM; //窗口的左上角坐标 params.x = 20; params.y = 20; //是指定窗口的像素格式为 RGBA_8888。 //使用 RGBA_8888 像素格式的窗口可以在保持高质量图像的同时实现透明度效果。 params.format = PixelFormat.RGBA_8888; //设置窗口的宽高,这里为自动 params.width = WindowManager.LayoutParams.WRAP_CONTENT; params.height = WindowManager.LayoutParams.WRAP_CONTENT; params.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE //表示悬浮窗口不需要获取焦点，这样用户点击悬浮窗口以外的区域，就不需要关闭悬浮窗口。 |WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;//表示悬浮窗口不会阻塞事件传递，即用户点击悬浮窗口以外的区域时，事件会传递给后面的窗口处理。 mView = View.inflate(getApplicationContext(), R.layout.item_back, null); Button btnBack = mView.findViewById(R.id.btn_back); btnBack.setOnClickListener(view1 -\u003e { ToastUtils.showShort(\"点击了\");//此处是点击逻辑，可以自己完成 }); mSystemService.addView(mView,params); } @Nullable @Override public IBinder onBind(Intent intent) { return null; } } ","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/:8:0","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","浮动窗口"],"content":"九、总结 通过以上步骤，我们可以实现一个简单的Android浮动窗口功能。在实际开发中，我们可以根据自己的需求对浮动窗口进行更加复杂的定制和扩展。 ","date":"2023-11-08","objectID":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/:9:0","tags":["原创","android","app开发","浮动窗口"],"title":"android实现浮动窗口记录","uri":"https://daizelai.github.io/posts/android/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/20231108_1353android%E5%AE%9E%E7%8E%B0%E6%B5%AE%E5%8A%A8%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BD%95/"},{"categories":["原创","android","JSON解析"],"content":"android解析版JSON数据int超过取值范围问题解决","date":"2023-10-26","objectID":"https://daizelai.github.io/posts/android/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/","tags":["原创","android","app开发","JSON处理"],"title":"JSON数据int超过取值范围问题解决","uri":"https://daizelai.github.io/posts/android/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"},{"categories":["原创","android","JSON解析"],"content":"20231026_1759解决JSON数据时int变量接收超过int取值范围的异常问题 ","date":"2023-10-26","objectID":"https://daizelai.github.io/posts/android/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/:0:0","tags":["原创","android","app开发","JSON处理"],"title":"JSON数据int超过取值范围问题解决","uri":"https://daizelai.github.io/posts/android/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"},{"categories":["原创","android","JSON解析"],"content":"一、描述 在android或java中，与服务器进行接口交互的时候，如果本地变量是Int类型的，但是由于服务器的错误，传递了一个long型的数据过来，本地程序就是出现异常，如下所示： 10-26 12:26:37.517 9089 9089 D [ main: TrainActivity:3749 ]: TrainActivity, UdpDcReceiverBean - accept - udpReceiverBean=UdpDcReceiverBean{mIp='172.16.120.16', mPort=63001, mContent='{\"MsgName\":\"GetDSCfgInfoRsp\",\"MsgSeqID\":1698294397,\"MsgInfo\":{\"MaxSelfCheckNum\":20,\"AllowEmergencyCall\":\"false\",\"PTTAllow\":\"false\",\"BroadcastTimeout\":30,\"BroadcastVolume\":1,\"HangoffTime\":10,\"NTPServerAddr\":\"172.16.120.52\",\"NTPServerPort\":123,\"NTPSyncPeriod\":60,\"AutoFixScreenTime\":-1,\"AutoLockTimeout\":0,\"LockPwd\":\"MTIzNDU=\",\"TrainPos\":[{\"TrainPosID\":1,\"TrainPosName\":\"正线\"},{\"TrainPosID\":4294967295,\"TrainPosName\":\"停车场\"},{\"TrainPosID\":2,\"TrainPosName\":\"车辆段\"}],\"Station\":[{\"StationID\":1,\"StationName\":\"新月溪公园站\",\"TrainPosID\":1,\"TrainGroupID\":194007},{\"StationID\":2,\"StationName\":\"光谷五路站\",\"TrainPosID\":1,\"TrainGroupID\":194006},{\"StationID\":3,\"StationName\":\"花山河站\",\"TrainPosID\":1,\"TrainGroupID\":194005},{\"StationID\":4,\"StationName\":\"花山新城站\",\"TrainPosID\":1,\"TrainGroupID\":194004},{\"StationID\":5,\"StationName\":\"鼓架山站\",\"TrainPosID\":1,\"TrainGroupID\":194003},{\"StationID\":6,\"StationName\":\"武东站\",\"TrainPosID\":1,\"TrainGroupID\":194002},{\"StationID\":7,\"StationName\":\"武汉站西广场站\",\"TrainPosID\":1,\"TrainGroupID\":194001},{\"StationID\":8,\"StationName\":\"花山车辆段\",\"TrainPosID\":2,\"TrainGroupID\":1956780},{\"StationID\":9,\"StationName\":\"停车场\",\"TrainPosID\":3,\"TrainGroupID\":12345},{\"StationID\":101,\"StationName\":\"车辆段转换轨\",\"TrainPosID\":2,\"TrainGroupID\":0}],\"TrainType\":1,\"TrainName\":\"1917车\",\"MainLineGroupID\":1234,\"DepotGroupID\":1234,\"UplineTrainGroupID\":190316,\"DownlineTrainGroupID\":190317,\"AlllineTrainGroupID\":190318,\"TrainBrdGroup\":[{\"GroupID\":0},{\"GroupID\":0},{\"GroupID\":0}],\"PredefinedSMS\":[{\"SMSID\":1,\"SDSType\":9,\"SMSInfo\":\"前车故障，请慢行\"},{\"SMSID\":2,\"SDSType\":9,\"SMSInfo\":\"前车未离站，请慢行\"},{\"SMSID\":3,\"SDSType\":7,\"SMSInfo\":\"本车不载客\"},{\"SMSID\":4,\"SDSType\":9,\"SMSInfo\":\"前站不停车\"},{\"SMSID\":5,\"SDSType\":8,\"SMSInfo\":\"新增1\"}],\"AllowP2PCall\":\"true\",\"AllowDepotTrainCallMainLine\":\"false\"}}'}\r10-26 12:26:37.518 9089 9089 D [ main: TrainActivity:1527 ]: TrainActivity, ATS_LAST_RECEIVE_CONNECTED=14691834, gettime=156, ATS_RECEIVE_TIMEOUT=3000\r10-26 12:26:37.518 9089 9089 D TAG : isAllowP2PCall: isAllowP2PCall=false\r10-26 12:26:37.518 9089 9089 D TAG : isAllowP2PCall: isAllowP2PCall=false\r10-26 12:26:37.519 9089 11511 W System.err: com.alibaba.fastjson.JSONException: parseInt error, field : trainPosID\r10-26 12:26:37.519 9089 11511 W System.err: at com.alibaba.fastjson.serializer.IntegerCodec.deserialze(IntegerCodec.java:101)\r10-26 12:26:37.519 9089 11511 W System.err: at com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer.parseField(DefaultFieldDeserializer.java:85)\r10-26 12:26:37.519 9089 11511 W System.err: at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseField(JavaBeanDeserializer.java:1224)\r10-26 12:26:37.519 9089 11511 W System.err: at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:850)\r10-26 12:26:37.519 9089 11511 W System.err: at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:288)\r10-26 12:26:37.520 9089 11511 W System.err: at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:284)\r10-26 12:26:37.520 9089 11511 W System.err: at com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.parseArray(ArrayListTypeFieldDeserializer.java:177)\r10-26 12:26:37.520 9089 11511 W System.err: at com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.parseField(ArrayListTypeFieldDeserializer.java:65)\r10-26 12:26:37.520 9089 11511 W System.err: at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseField(JavaBeanDeserializer.java:1224)\r10-26 12:26:37.520 9089 11511 W System.err: at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:850)\r10-26 12:26:37.520 9089 11511 W System.e","date":"2023-10-26","objectID":"https://daizelai.github.io/posts/android/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/:1:0","tags":["原创","android","app开发","JSON处理"],"title":"JSON数据int超过取值范围问题解决","uri":"https://daizelai.github.io/posts/android/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"},{"categories":["原创","android","JSON解析"],"content":"二、解决方案 ","date":"2023-10-26","objectID":"https://daizelai.github.io/posts/android/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/:2:0","tags":["原创","android","app开发","JSON处理"],"title":"JSON数据int超过取值范围问题解决","uri":"https://daizelai.github.io/posts/android/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"},{"categories":["原创","android","JSON解析"],"content":"2.1.方案一 使用long类型代码int类型，但是此方案不是最好的，因为正常的时候确实没必要使用long，int就足够了。 public class TcpBean { @JSONField(name = \"MsgName\") private String msgName; @JSONField(name = \"MsgSeqID\") - private long msgSeqID; + private long msgSeqID; @JSONField(name = \"TcpName\") private String tcpName; @JSONField(name = \"TcpNumber\") private String tcpNumber; } ","date":"2023-10-26","objectID":"https://daizelai.github.io/posts/android/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/:2:1","tags":["原创","android","app开发","JSON处理"],"title":"JSON数据int超过取值范围问题解决","uri":"https://daizelai.github.io/posts/android/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"},{"categories":["原创","android","JSON解析"],"content":"2.2.方案二 如果不想使用long类型的话，还可以这样操作。 如果你希望保持MsgSeqID的数据类型为int，但同时又想避免溢出错误，你可以通过在接收数据之前检查MsgSeqID的值来处理。你可以将MsgSeqID的值与Integer.MAX_VALUE进行比较，如果大于等于Integer.MAX_VALUE，则将其设置为0。这样，你可以继续使用int数据类型来处理数据，同时处理大于Integer.MAX_VALUE的值。 错误的解决方案。 public class TcpBean { @JSONField(name = \"MsgName\") private String msgName; @JSONField(name = \"MsgSeqID\") private int msgSeqID; @JSONField(name = \"TcpName\") private String tcpName; @JSONField(name = \"TcpNumber\") private String tcpNumber; public void setMsgSeqID(long msgSeqID) { if (msgSeqID \u003c Integer.MAX_VALUE) { this.msgSeqID = (int) msgSeqID; } else { this.msgSeqID = 0; } } } 通过上面的setMsgSeqID方法，你可以在设置MsgSeqID的时候检查其值，如果大于等于Integer.MAX_VALUE，则将其设置为0。这样，在处理数据时，你仍然可以使用int数据类型，同时处理大于Integer.MAX_VALUE的值。 正确的解决方案 路径：E:\\develop\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\adapter\\IntOverflowDeserializer.java package com.gbcom.subwaysystem.adapter; import com.alibaba.fastjson.parser.DefaultJSONParser; import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer; import java.lang.reflect.Type; /** * 解决接收数据时int类型变量的数据实际长度为long类型的异常问题 * * @author daizelai * @date 2023/10/27 11:42 */ public class IntOverflowDeserializer implements ObjectDeserializer { @Override public \u003cT\u003e T deserialze(DefaultJSONParser parser, Type type, Object fieldName) { Object value = parser.parse(); if (value instanceof Long) { long longValue = (Long) value; if (longValue \u003e Integer.MAX_VALUE || longValue \u003c Integer.MIN_VALUE) { return (T) Integer.valueOf(0); } } return (T) value; } @Override public int getFastMatchToken() { return 0; } } 正确解析TrainPosID为4294967295，int接收正常。 # message = \"{\\\"MsgName\\\":\\\"GetDSCfgInfoRsp\\\",\\\"MsgSeqID\\\":1698293947,\\\"MsgInfo\\\":{\\\"MaxSelfCheckNum\\\":20,\\\"AllowEmergencyCall\\\":\\\"false\\\",\\\"PTTAllow\\\":\\\"false\\\",\\\"BroadcastTimeout\\\":30,\\\"BroadcastVolume\\\":1,\\\"HangoffTime\\\":10,\\\"NTPServerAddr\\\":\\\"172.16.120.52\\\",\\\"NTPServerPort\\\":123,\\\"NTPSyncPeriod\\\":60,\\\"AutoFixScreenTime\\\":-1,\\\"AutoLockTimeout\\\":0,\\\"LockPwd\\\":\\\"MTIzNDU=\\\",\\\"TrainPos\\\":[{\\\"TrainPosID\\\":1,\\\"TrainPosName\\\":\\\"正线\\\"},{\\\"TrainPosID\\\":4294967295,\\\"TrainPosName\\\":\\\"停车场\\\"},{\\\"TrainPosID\\\":2,\\\"TrainPosName\\\":\\\"车辆段\\\"}],\\\"Station\\\":[{\\\"StationID\\\":1,\\\"StationName\\\":\\\"新月溪公园站\\\",\\\"TrainPosID\\\":1,\\\"TrainGroupID\\\":194007},{\\\"StationID\\\":2,\\\"StationName\\\":\\\"光谷五路站\\\",\\\"TrainPosID\\\":1,\\\"TrainGroupID\\\":194006},{\\\"StationID\\\":3,\\\"StationName\\\":\\\"花山河站\\\",\\\"TrainPosID\\\":1,\\\"TrainGroupID\\\":194005},{\\\"StationID\\\":4,\\\"StationName\\\":\\\"花山新城站\\\",\\\"TrainPosID\\\":1,\\\"TrainGroupID\\\":194004},{\\\"StationID\\\":5,\\\"StationName\\\":\\\"鼓架山站\\\",\\\"TrainPosID\\\":1,\\\"TrainGroupID\\\":194003},{\\\"StationID\\\":6,\\\"StationName\\\":\\\"武东站\\\",\\\"TrainPosID\\\":1,\\\"TrainGroupID\\\":194002},{\\\"StationID\\\":7,\\\"StationName\\\":\\\"武汉站西广场站\\\",\\\"TrainPosID\\\":1,\\\"TrainGroupID\\\":194001},{\\\"StationID\\\":8,\\\"StationName\\\":\\\"花山车辆段\\\",\\\"TrainPosID\\\":2,\\\"TrainGroupID\\\":1956780},{\\\"StationID\\\":9,\\\"StationName\\\":\\\"停车场\\\",\\\"TrainPosID\\\":3,\\\"TrainGroupID\\\":12345},{\\\"StationID\\\":101,\\\"StationName\\\":\\\"车辆段转换轨\\\",\\\"TrainPosID\\\":2,\\\"TrainGroupID\\\":0}],\\\"TrainType\\\":1,\\\"TrainName\\\":\\\"1917车\\\",\\\"MainLineGroupID\\\":1234,\\\"DepotGroupID\\\":1234,\\\"UplineTrainGroupID\\\":190316,\\\"DownlineTrainGroupID\\\":190317,\\\"AlllineTrainGroupID\\\":190318,\\\"TrainBrdGroup\\\":[{\\\"GroupID\\\":0},{\\\"GroupID\\\":0},{\\\"GroupID\\\":0}],\\\"PredefinedSMS\\\":[{\\\"SMSID\\\":1,\\\"SDSType\\\":9,\\\"SMSInfo\\\":\\\"前车故障，请慢行\\\"},{\\\"SMSID\\\":2,\\\"SDSType\\\":9,\\\"SMSInfo\\\":\\\"前车未离站，请慢行\\\"},{\\\"SMSID\\\":3,\\\"SDSType\\\":7,\\\"SMSInfo\\\":\\\"本车不载客\\\"},{\\\"SMSID\\\":4,\\\"SDSType\\\":9,\\\"SMSInfo\\\":\\\"前站不停车\\\"},{\\\"SMSID\\\":5,\\\"SDSType\\\":8,\\\"SMSInfo\\\":\\\"新增1\\\"}],\\\"AllowP2PCall\\\":\\\"true\\\",\\\"AllowDepotTrainCallMainLine\\\":\\\"false\\\"}}\";\r2023-10-27 11:35:04.169 6296-7618 MyLogger com.gbcom.subwaysystem D debug: ParseDSCfgInfoRunnable, mDisBean=TcpDisBean{msgName='GetDSCfgInfoRsp', msgSeqID=1698293947, msgInfo=MsgInfo{allowEmergencyCall='false', pttAllow='false', trainType=1, trainName='1917车', broadcastTimeout=30, broadcastVolume=1, hangoffTime=10, defaultGroupID=0, depotGroupID=1234, stationInnerGroupID=0, trainGroupID=0, stationGroupID=0, main","date":"2023-10-26","objectID":"https://daizelai.github.io/posts/android/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/:2:2","tags":["原创","android","app开发","JSON处理"],"title":"JSON数据int超过取值范围问题解决","uri":"https://daizelai.github.io/posts/android/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/20231026_1759%E8%A7%A3%E5%86%B3json%E6%95%B0%E6%8D%AE%E6%97%B6int%E5%8F%98%E9%87%8F%E6%8E%A5%E6%94%B6%E8%B6%85%E8%BF%87int%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"},{"categories":["原创","android","音频配置","音频路由"],"content":"android音频配置文件详解","date":"2023-10-08","objectID":"https://daizelai.github.io/posts/android/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/","tags":["原创","android","音频配置","音频路由"],"title":"android音频配置文件详解","uri":"https://daizelai.github.io/posts/android/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"},{"categories":["原创","android","音频配置","音频路由"],"content":"20231008_1340Android音频配置文件详解 ","date":"2023-10-08","objectID":"https://daizelai.github.io/posts/android/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/:0:0","tags":["原创","android","音频配置","音频路由"],"title":"android音频配置文件详解","uri":"https://daizelai.github.io/posts/android/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"},{"categories":["原创","android","音频配置","音频路由"],"content":"描述 本文主要记录了一下音频配置文件的简单理解，会慢慢更新。 ","date":"2023-10-08","objectID":"https://daizelai.github.io/posts/android/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/:1:0","tags":["原创","android","音频配置","音频路由"],"title":"android音频配置文件详解","uri":"https://daizelai.github.io/posts/android/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"},{"categories":["原创","android","音频配置","音频路由"],"content":"Android7.1音频配置文件描述 \u003c?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u003e \u003c!-- Copyright (c) 2015-2016, The Linux Foundation. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of The Linux Foundation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. --\u003e \u003cmixer\u003e \u003c!-- These are the initial mixer settings --\u003e \u003cctl name=\"Voice Rx Device Mute\" id=\"0\" value=\"0\" /\u003e \u003cctl name=\"Voice Rx Device Mute\" id=\"1\" value=\"-1\" /\u003e \u003cctl name=\"Voice Rx Device Mute\" id=\"2\" value=\"20\" /\u003e \u003cctl name=\"Voice Tx Mute\" id=\"0\" value=\"0\" /\u003e \u003cctl name=\"Voice Tx Mute\" id=\"1\" value=\"-1\" /\u003e \u003cctl name=\"Voice Tx Mute\" id=\"2\" value=\"500\" /\u003e \u003cctl name=\"Voice Rx Gain\" id=\"0\" value=\"0\" /\u003e \u003cctl name=\"Voice Rx Gain\" id=\"1\" value=\"-1\" /\u003e \u003cctl name=\"Voice Rx Gain\" id=\"2\" value=\"20\" /\u003e \u003cctl name=\"Voip Tx Mute\" id=\"0\" value=\"0\" /\u003e \u003cctl name=\"Voip Tx Mute\" id=\"1\" value=\"500\" /\u003e \u003cctl name=\"Voip Rx Gain\" id=\"0\" value=\"0\" /\u003e \u003cctl name=\"Voip Rx Gain\" id=\"1\" value=\"20\" /\u003e \u003cctl name=\"Voip Mode Config\" value=\"12\" /\u003e \u003cctl name=\"Voip Rate Config\" value=\"0\" /\u003e \u003cctl name=\"Voip Evrc Min Max Rate Config\" id=\"0\" value=\"1\" /\u003e \u003cctl name=\"Voip Evrc Min Max Rate Config\" id=\"1\" value=\"4\" /\u003e \u003cctl name=\"Voip Dtx Mode\" value=\"0\" /\u003e \u003cctl name=\"TTY Mode\" value=\"OFF\" /\u003e \u003cctl name=\"HPHL Volume\" value=\"9\" /\u003e \u003cctl name=\"HPHR Volume\" value=\"9\" /\u003e \u003cctl name=\"RX HPH Mode\" value=\"NORMAL\" /\u003e \u003cctl name=\"COMP0 RX1\" value=\"0\" /\u003e \u003cctl name=\"COMP0 RX2\" value=\"0\" /\u003e \u003c!-- TX表示发送通路，通常表示本地到远端，即发送给对方的声音通路。 RX表示接收通路，通常表示远端到本地，即本地听到声音的通话。 RX1\\RX2\\RX3调整可限制扬声器功率，调小功率就小。 --\u003e \u003c!--下面两个RX1和RX2猜测可能是听筒音量--\u003e \u003cctl name=\"RX1 Digital Volume\" value=\"54\" /\u003e \u003cctl name=\"RX2 Digital Volume\" value=\"54\" /\u003e \u003c!--扬声器的音量，一般为84，最大100，但是一般只设置最大到89--\u003e \u003cctl name=\"RX3 Digital Volume\" value=\"54\" /\u003e \u003cctl name=\"IIR1 INP1 Volume\" value=\"84\" /\u003e \u003cctl name=\"IIR1 INP2 Volume\" value=\"84\" /\u003e \u003cctl name=\"IIR1 INP3 Volume\" value=\"84\" /\u003e \u003cctl name=\"IIR1 INP4 Volume\" value=\"84\" /\u003e \u003cctl name=\"ADC1 Volume\" value=\"4\" /\u003e \u003cctl name=\"ADC2 Volume\" value=\"4\" /\u003e \u003cctl name=\"ADC3 Volume\" value=\"4\" /\u003e \u003cctl name=\"DEC1 Volume\" value=\"84\" /\u003e \u003cctl name=\"DEC2 Volume\" value=\"84\" /\u003e \u003cctl name=\"DEC2 MUX\" value=\"ZERO\" /\u003e \u003cctl name=\"DEC1 MUX\" value=\"ZERO\" /\u003e \u003cctl name=\"ADC2 MUX\" value=\"ZERO\" /\u003e \u003cctl name=\"RDAC2 MUX\" value=\"ZERO\" /\u003e \u003cctl name=\"RX2 MIX2 INP2\" value=\"ZERO\" /\u003e \u003cctl name=\"RX2 MIX2 INP1\" value=\"ZERO\" /\u003e \u003cctl name=\"RX1 MIX2 INP2\" value=\"ZERO\" /\u003e \u003cctl name=\"RX1 MIX2 INP1\" value=\"ZERO\" /\u003e \u003cctl name=\"RX3 MIX1 INP2\" value=\"ZERO\" /\u003e \u003cctl name=\"RX3 MIX1 INP1\" value=\"ZERO\" /\u003e \u003cctl name=\"RX2 MIX1 INP2\" value=\"ZERO\" /\u003e \u003cctl name=\"RX2 MIX1 INP1\" value=\"ZERO\" /\u003e \u003cctl name=\"RX1 MIX1 INP2\" value=\"ZERO\" /\u003e \u003cctl name=\"RX1 MIX1 INP1\" value=\"ZERO\" /\u003e \u003cctl name=\"EAR_S\" value=\"ZERO\" /\u003e \u003cctl name=\"HPHL\" value=\"ZERO\" /\u003e \u003cctl name=\"HPHR\"","date":"2023-10-08","objectID":"https://daizelai.github.io/posts/android/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/:2:0","tags":["原创","android","音频配置","音频路由"],"title":"android音频配置文件详解","uri":"https://daizelai.github.io/posts/android/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/20231008_1340android%E9%9F%B3%E9%A2%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"},{"categories":["android","adb"],"content":"adb网络命令记录","date":"2023-09-03","objectID":"https://daizelai.github.io/posts/android/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/","tags":["android","adb","adb网络命令"],"title":"adb网络命令记录","uri":"https://daizelai.github.io/posts/android/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"},{"categories":["android","adb"],"content":"adb网络命令记录 ","date":"2023-09-03","objectID":"https://daizelai.github.io/posts/android/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/:0:0","tags":["android","adb","adb网络命令"],"title":"adb网络命令记录","uri":"https://daizelai.github.io/posts/android/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"},{"categories":["android","adb"],"content":"一、常用命令 在ADB Shell root用户下，添加IP地址为10.0.1.2，子网掩码为255.255.255.0，对应的指令如下： # eth0 为有线网络 wlan0 为无线网络\rip address add 10.0.1.2/24 dev eth0 手动添加路由规则到eth0网卡路由表： ip route add 10.0.1.0/24 dev eth0 proto kernel scope link src 10.0.1.2 table eth0 修改eth0路由表 # ip route add 192.168.43.0/24 dev wlan0 proto static scope link table eth0\r或者直接复制wlan0路由表的规则添加到eth0路由表:\r# ip route add 192.168.43.0/24 dev wlan0 proto kernel scope link src 192.168.43.3 table eth0 上面命令的意思是：向路由表eth0中添加一条192.168.43.0/24 dev wlan0路由规则.这样发送到192.168.43网段的数据就会通过wifi出去了。在设备中就可以ping通无线和有线两个网络了. 对应的删除指令，需将add改为del： ip address del 10.0.1.2/24 dev eth0 ip route del 10.0.1.0/24 dev eth0 proto kernel scope link src 10.0.1.2 table eth0 查看路由表： # ip route list table eth0 查看当前路由信息 # ip route\r192.168.43.0/24 dev wlan0 proto kernel scope link src 192.168.43.3\r192.168.88.0/24 dev eth0 proto kernel scope link src 192.168.88.29 想知道主机所有网络接口的情况 # ifconfig -a 想查看某个端口，比如查看eth0的状态 # ifconfig eth0 ifconfig可以用来配置网络接口的IP地址、掩码、网关、物理地址等；值得一说的是用ifconfig 为网卡指定IP地址，这只是用来调试网络用的，并不会更改系统关于网卡的配置文件。如果您想把网络接口的IP地址固定下来，目前有三个方法： 一、是通过各个 发行和版本专用的工具来修改IP地址； 二、是直接修改网络接口的配置文件； 三、是修改特定的文件，加入ifconfig指令来指定网卡的IP地址，比如在redhat或Fedora中，把ifconfig的语名写入/etc/rc.d/rc.local文件中； ifconfig 配置网络端口的方法： ifconfig 工具配置网络接口的方法是通过指令的参数来达到目的的，我们只说最常用的参数； ifconfig 网络端口 IP地址 hw MAC地址 netmask 掩码地址 broadcast 广播地址 [up/down] ＊ 实例一： 比如我们用ifconfig 来调试 eth0网卡的地址 [root@localhost ~]# ifconfig eth0 down\r[root@localhost ~]# ifconfig eth0 192.168.1.99 broadcast 192.168.1.255 netmask 255.255.255.0\r[root@localhost ~]# ifconfig eth0 up\r[root@localhost ~]# ifconfig eth0\reth0 Link encap:Ethernet HWaddr 00:11:00:00:11:11\rinet addr:192.168.1.99 Bcast:192.168.1.255 Mask:255.255.255.0\rUP BROADCAST MULTICAST MTU:1500 Metric:1\rRX packets:0 errors:0 dropped:0 overruns:0 frame:0\rTX packets:0 errors:0 dropped:0 overruns:0 carrier:0\rcollisions:0 txqueuelen:1000\rRX bytes:0 (0.0 b) TX bytes:0 (0.0 b)\rInterrupt:11 Base address:0x3400 注解： 上面的例子我们解说一下； 第一行：ifconfig eth0 down表示如果eth0是激活的，就把它DOWN掉。此命令等同于ifdown eth0； 第二行：用ifconfig来配置eth0的IP地址、广播地址和网络掩码； 第三行：用ifconfig eth0 up来激活eth0 ； 此命令等同于ifup eth0 第四行：用ifconfig eth0来查看eth0的状态； 直接在指令IP地址、网络掩码、广播地址的同时，激活网卡 [root@localhost ~]# ifconfig eth0 192.168.1.99 broadcast 192.168.1.255 netmask 255.255.255.0 up 设置网卡eth1的IP地址、网络掩码、广播地址，物理地址并且激活它； [root@localhost ~]# ifconfig eth1 192.168.1.252 hw ether 00:11:00:00:11:11 netmask 255.255.255.0 broadcast 192.168.1.255 up 或 [root@localhost ~]# ifconfig eth1 hw ether 00:11:00:00:11:22\r[root@localhost ~]# ifconfig eth1 192.168.1.252 netmask 255.255.255.0 broadcast 192.168.1.255 up其中 hw 后面所接的是网络接口类型， ether表示乙太网， 同时也支持 ax25 、ARCnet、netrom等，详情请查看 man ifconfig ； ","date":"2023-09-03","objectID":"https://daizelai.github.io/posts/android/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/:1:0","tags":["android","adb","adb网络命令"],"title":"adb网络命令记录","uri":"https://daizelai.github.io/posts/android/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"},{"categories":["android","adb"],"content":"二、用ifconfig 来配置虚拟网络接口 有时我们为了满足不同的需要还需要配置虚拟网络接口，比如我们用不 同的IP地址来架运行多个HTTPD服务器，就要用到虚拟地址；这样就省却了同一个IP地址，如果开设两个的HTTPD服务器时，要指定端口号。 虚拟网络接口指的是为一个网络接口指定多个IP地址，虚拟接口是这样的eth0:0、eth0:1、eth0:2… .. eth1N。当然您为eth1指定多个IP地址，也就是eth1:0、eth1:1、eth1:2… …以此类推； 其实用 ifconfig 为一个网卡配置多个IP地址，就用前面我们所说的ifconfig的用法，这个比较简单；看下面的例子； [root@localhost ~]# ifconfig eth1:0 192.168.1.251 hw ether 00:11:00:00:11:33 netmask 255.255.255.0 broadcast 192.168.1.255 up 或 [root@localhost ~]# ifconfig eth1 hw ether 00:11:00:00:11:33\r[root@localhost ~]# ifconfig eth1 192.168.1.251 netmask 255.255.255.0 broadcast 192.168.1.255 up 注意：指定时，要为每个虚拟网卡指定不同的物理地址； 在Redhat/Fedora或与Redhat/Fedora类似的系统，您可以把配置网络IP地址、广播地址、掩码地址、物理地址以及激活网络接口同时放在一个句子中，写入/etc /rc.d/rc.local中。比如下面的例子； ifconfig eth1:0 192.168.1.250 hw ether 00:11:00:00:11:44 netmask 255.255.255.0 broadcast 192.168.1.255 up\rifconfig eth1:1 192.168.1.249 hw ether 00:11:00:00:11:55 netmask 255.255.255.0 broadcast 192.168.1.255 up 解说： 上面是为eth1的网络接口，设置了两个虚拟接口；每个接口都有自己的物理地址、IP地址… … ","date":"2023-09-03","objectID":"https://daizelai.github.io/posts/android/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/:2:0","tags":["android","adb","adb网络命令"],"title":"adb网络命令记录","uri":"https://daizelai.github.io/posts/android/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"},{"categories":["android","adb"],"content":"三、用ifconfig 来激活和终止网络接口的连接 激活和终止网络接口的用ifconfig命令，后面接网络接口，然后加上down或up参数，就可以禁止或激活相应的网络接口了。当然也可以用专用工具ifup和ifdown工具； [root@localhost ~]# ifconfig eth0 down\r[root@localhost ~]# ifconfig eth0 up\r[root@localhost ~]# ifup eth0\r[root@localhost ~]# ifdown eth0 对于激活其它类型的网络接口也是如 此，比如 ppp0，wlan0等；不过只是对指定IP的网卡有效。 注意：对DHCP自动分配的IP，还得由各个发行版自带的网络 工具来激活；当然得安装dhcp客户端；这个您我们应该明白； 比如Redhat/Fedora [root@localhost ~]# /etc/init.d/network startSlackware 发行版； [root@localhost ~]# /etc/rc.d/rc.inet1 ","date":"2023-09-03","objectID":"https://daizelai.github.io/posts/android/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/:3:0","tags":["android","adb","adb网络命令"],"title":"adb网络命令记录","uri":"https://daizelai.github.io/posts/android/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/adb%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"搭建HTTP方式的nginx视频推流服务器","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"20230820_1102搭建HTTP方式的nginx视频推流服务器 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:0","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"一、描述 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:1:0","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"1.1.前言 搭建TCP/HTTP协议的nginx视频推流服务器，主要推RTMP和RTSP两种流。 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:1:1","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"1.2.实验环境 10:35，我的笔记本地址如果在7楼配置： IP:172.16.120.222\rMASK:255.255.255.0\rGateWay:172.16.120.1 我的笔记本地址如果在4楼配置： IP:192.168.19.7\rMASK:255.255.255.0\rGateWay:192.168.19.1 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:1:2","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"1.3.温馨提示 本文有点杂乱，其实你也可以直接看第六章【RTMP】、第九章【RTSP】和第十章【RTSP】就可以了。 另外，第十章的mediamtx其实也可以接收推的RTMP流哦。 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:1:3","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"二、nginx下载 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:2:0","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"2.1.软件下载 nginx下载地址：http://nginx-win.ecsds.eu/download/ nginx-rtmp-module下载地址：https://github.com/arut/nginx-rtmp-module/ ffmpeg官方地址：http://ffmpeg.org/download.html?aemtn=tg-on#repositories ffmpeg下载地址：https://github.com/BtbN/FFmpeg-Builds/releases 请下载【ffmpeg-master-latest-win64-gpl.zip】版本，里面带x264。 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:2:1","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"2.2.环境配置推荐 下面是推荐的环境配置： RTMP环境 nginx 1.7.11.3 Gryphon_dai.rar ffmpeg-git-full.7z RTSP环境 RTSP推流服务器环境 mediamtx_v1.0.0_windows_amd64.zip ffmpeg-git-full.7z ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:2:2","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"三、nginx安装 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:3:0","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"3.1.安装方法 Windows下载下来可以直接使用。 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:3:1","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"3.2.找不到MSVCR100.dll问题的解决 16：06，nginx.exe 由于找不到MSVCR100.dll，无法继续执行代码。重新安装程序可能会解决此问题。 使用DirectX修复工具进行修复，修复了好个182个丢失的文件。 浏览器访问：http://127.0.0.1/ Welcome to nginx! If you see this page, the nginx web server is successfully installed and working. Further configuration is required. For online documentation and support please refer to nginx.org. Commercial support is available at nginx.com. Windows documentation and support is available at nginx for Windows. Windows commercial support is available at ITProjectPartner. Thank you for using nginx. ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:3:2","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"四、环境配置 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:4:0","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"4.1.nginx服务器端环境 笔记本在7楼使用网络连接DIS的交换机上，配置了和DIS同一网段的地址。 C:\\Users\\daizelai\u003eipconfig\rWindows IP 配置\r以太网适配器 以太网:\r连接特定的 DNS 后缀 . . . . . . . :\r本地链接 IPv6 地址. . . . . . . . : fe80::3c84:252a:7ebe:9767%17\rIPv4 地址 . . . . . . . . . . . . : 172.16.120.222\r子网掩码 . . . . . . . . . . . . : 255.255.255.0\rIPv4 地址 . . . . . . . . . . . . : 192.168.19.7\r子网掩码 . . . . . . . . . . . . : 255.255.255.0\r默认网关. . . . . . . . . . . . . : 172.16.120.1\r无线局域网适配器 WLAN:\r媒体状态 . . . . . . . . . . . . : 媒体已断开连接\r连接特定的 DNS 后缀 . . . . . . . :\r无线局域网适配器 本地连接* 9:\r媒体状态 . . . . . . . . . . . . : 媒体已断开连接\r连接特定的 DNS 后缀 . . . . . . . :\r无线局域网适配器 本地连接* 10:\r媒体状态 . . . . . . . . . . . . : 媒体已断开连接\r连接特定的 DNS 后缀 . . . . . . . :\r以太网适配器 VMware Network Adapter VMnet1:\r连接特定的 DNS 后缀 . . . . . . . :\r本地链接 IPv6 地址. . . . . . . . : fe80::25d0:6d3b:2e4a:6fae%7\rIPv4 地址 . . . . . . . . . . . . : 192.168.80.1\r子网掩码 . . . . . . . . . . . . : 255.255.255.0\r默认网关. . . . . . . . . . . . . : 10.60.3.59\r以太网适配器 蓝牙网络连接:\r媒体状态 . . . . . . . . . . . . : 媒体已断开连接\r连接特定的 DNS 后缀 . . . . . . . :\rC:\\Users\\daizelai\u003e 并且ping DIS是可以拼通的。 C:\\Users\\daizelai\u003eping 172.16.120.52\r正在 Ping 172.16.120.52 具有 32 字节的数据:\r来自 172.16.120.52 的回复: 字节=32 时间=1ms TTL=64\r来自 172.16.120.52 的回复: 字节=32 时间=2ms TTL=64\r来自 172.16.120.52 的回复: 字节=32 时间=1ms TTL=64\r来自 172.16.120.52 的回复: 字节=32 时间=1ms TTL=64\r172.16.120.52 的 Ping 统计信息:\r数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，\r往返行程的估计时间(以毫秒为单位):\r最短 = 1ms，最长 = 2ms，平均 = 1ms\rC:\\Users\\daizelai\u003eping 172.16.120.8\r正在 Ping 172.16.120.8 具有 32 字节的数据:\r来自 172.16.120.8 的回复: 字节=32 时间=1ms TTL=64\r来自 172.16.120.8 的回复: 字节=32 时间=1ms TTL=64\r来自 172.16.120.8 的回复: 字节=32 时间=1ms TTL=64\r来自 172.16.120.8 的回复: 字节=32 时间=1ms TTL=64\r172.16.120.8 的 Ping 统计信息:\r数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，\r往返行程的估计时间(以毫秒为单位):\r最短 = 1ms，最长 = 1ms，平均 = 1ms\rC:\\Users\\daizelai\u003e ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:4:1","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"4.2.终端环境 下面是主机的通信板WAN口地址 C:\\Users\\daizelai\u003eping 10.178.14.8\r正在 Ping 10.178.14.8 具有 32 字节的数据:\r来自 10.178.14.8 的回复: 字节=32 时间=19ms TTL=55\r来自 10.178.14.8 的回复: 字节=32 时间=66ms TTL=55\r来自 10.178.14.8 的回复: 字节=32 时间=171ms TTL=55\r来自 10.178.14.8 的回复: 字节=32 时间=113ms TTL=55\r10.178.14.8 的 Ping 统计信息:\r数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，\r往返行程的估计时间(以毫秒为单位):\r最短 = 19ms，最长 = 171ms，平均 = 92ms\rC:\\Users\\daizelai\u003e ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:4:2","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"五、运行nginx 16:48，启动 第一个版本是 nginx_1.7.11.3_Gryphon.7z，这个版本运行起来是有问题的。 D:\\program\\nginx\\rtmpServer\\Gryphon\\nginx.exe -c D:\\program\\nginx\\rtmpServer\\Gryphon\\conf\\nginx.conf 后面又下载了 nginx 1.7.11.3 Gryphon_dai.rar，这个版本的是可以正常的。 c:\\\u003ecd D:\\program\\nginx\\rtmpServer\\Gryphon_dai\rD:\\program\\nginx\\rtmpServer\\Gryphon_dai\u003enginx.exe -c conf\\nginx-win-rtmp.conf\rD:\\program\\nginx\\rtmpServer\\Gryphon_dai\u003e ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:5:0","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"六、推流 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:6:0","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"6.1.RTMP推流 第一个不好的推流ffmpeg ffmpeg-n6.0-latest-win64-lgpl-shared-6.0.zip，也可以用的。 cd D:\\program\\nginx\\ffmpeg-n6.0-latest-win64-lgpl-shared-6.0\\bin\rffmpeg.exe -re -i D:\\program\\nginx\\86319e21c91550ffc57d617ce21ea593.mp4 -f flv rtmp://192.168.19.7:1935/live/test ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:6:1","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"6.2.拉流 使用ffplay.exe进行拉流。 C:\\Users\\daizelai\\Downloads\\ffplay.exe rtmp://192.168.19.7:1935/live/home ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:6:2","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"七、使用RTSP进行H264推流 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:7:0","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"7.1.错误的H264推流 注意上面的ffmpeg-n6.0-latest-win64-lgpl-shared-6.0.zip版本的ffmpeg推H264流格式流的话，会提示“未安装libx264”错误。 2023/08/15 10:20推流出错 D:\\program\\nginx\\ffmpeg-n6.0-latest-win64-lgpl-shared-6.0\\bin\u003effmpeg.exe -i D:\\program\\nginx\\86319e21c91550ffc57d617ce21ea593.mp4 -c:v libx264 -preset ultrafast -tune zerolatency -b:v 500k -f rtsp rtsp://192.168.43.52:8554/stream\rffmpeg version n6.0-34-g3d5edb89e7-20230813 Copyright (c) 2000-2023 the FFmpeg developers\rbuilt with gcc 13.1.0 (crosstool-NG 1.25.0.196_227d99d)\rconfiguration: --prefix=/ffbuild/prefix --pkg-config-flags=--static --pkg-config=pkg-config --cross-prefix=x86_64-w64-mingw32- --arch=x86_64 --target-os=mingw32 --enable-version3 --disable-debug --enable-shared --disable-static --disable-w32threads --enable-pthreads --enable-iconv --enable-libxml2 --enable-zlib --enable-libfreetype --enable-libfribidi --enable-gmp --enable-lzma --enable-fontconfig --enable-libvorbis --enable-opencl --disable-libpulse --enable-libvmaf --disable-libxcb --disable-xlib --enable-amf --enable-libaom --enable-libaribb24 --disable-avisynth --enable-chromaprint --enable-libdav1d --disable-libdavs2 --disable-libfdk-aac --enable-ffnvcodec --enable-cuda-llvm --disable-frei0r --enable-libgme --enable-libkvazaar --enable-libass --enable-libbluray --disable-libjxl --enable-libmp3lame --enable-libopus --enable-librist --enable-libssh --enable-libtheora --enable-libvpx --enable-libwebp --enable-lv2 --enable-libvpl --enable-openal --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenh264 --enable-libopenjpeg --enable-libopenmpt --enable-librav1e --disable-librubberband --enable-schannel --enable-sdl2 --enable-libsoxr --enable-libsrt --enable-libsvtav1 --enable-libtwolame --enable-libuavs3d --disable-libdrm --disable-vaapi --disable-libvidstab --enable-vulkan --enable-libshaderc --disable-libplacebo --disable-libx264 --disable-libx265 --disable-libxavs2 --disable-libxvid --enable-libzimg --enable-libzvbi --extra-cflags=-DLIBTWOLAME_STATIC --extra-cxxflags= --extra-ldflags=-pthread --extra-ldexeflags= --extra-libs=-lgomp --extra-version=20230813\rlibavutil 58. 2.100 / 58. 2.100\rlibavcodec 60. 3.100 / 60. 3.100\rlibavformat 60. 3.100 / 60. 3.100\rlibavdevice 60. 1.100 / 60. 1.100\rlibavfilter 9. 3.100 / 9. 3.100\rlibswscale 7. 1.100 / 7. 1.100\rlibswresample 4. 10.100 / 4. 10.100\rInput #0, mov,mp4,m4a,3gp,3g2,mj2, from 'D:\\program\\nginx\\86319e21c91550ffc57d617ce21ea593.mp4':\rMetadata:\rmajor_brand : isom\rminor_version : 512\rcompatible_brands: isomiso2avc1mp41\rencoder : Lavf58.20.100\rDuration: 00:01:08.30, start: 0.000000, bitrate: 1657 kb/s\rStream #0:0[0x1](und): Video: h264 (Main) (avc1 / 0x31637661), yuv420p(progressive), 1280x720, 1603 kb/s, 30 fps, 30 tbr, 15360 tbn (default)\rMetadata:\rhandler_name : VideoHandler\rvendor_id : [0][0][0][0]\rStream #0:1[0x2](und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, mono, fltp, 47 kb/s (default)\rMetadata:\rhandler_name : SoundHandler\rvendor_id : [0][0][0][0]\r[vost#0:0 @ 000001edf0670cc0] Unknown encoder 'libx264'\rD:\\program\\nginx\\ffmpeg-n6.0-latest-win64-lgpl-shared-6.0\\bin\u003e 因为未安装libx264库，导致在生成mp4视频的时候出错。 但是使用ffmpeg-master-latest-win64-gpl推流是可以的。 而使用ffmpeg-n6.0-latest-win64-lgpl-shared-6.0.zip进行下面两种推流都是提示错误的。 ffmpeg.exe -re -i D:\\program\\nginx\\86319e21c91550ffc57d617ce21ea593.mp4 -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/rtmplive/home\rffmpeg.exe -i D:\\program\\nginx\\86319e21c91550ffc57d617ce21ea593.mp4 -c:v libx264 -preset ultrafast -tune zerolatency -b:v 500k -f rtsp rtsp://192.168.43.52:8554/stream ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:7:1","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"八、RSTP推流 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:8:0","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"8.1.描述 使用mediamtx搭建RTSP流媒体服务器。 10:51, RTSP:https://github.com/bluenviron/mediamtx/releases，下载了mediamtx_v1.0.0_windows_amd64.zip文件 下载RTSP流流 mediamtx_v1.0.0_windows_amd64.zip ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:8:1","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"8.2.运行服务器 解压之后根据自己需要修改其yml配置文件。 执行启动命令： D:\\program\\nginx\\rtmpServer\\Gryphon_dai\u003eD:\\program\\nginx\\mediamtx_v1.0.0_windows_amd64\\mediamtx.exe\r2023/08/15 10:56:02 INF MediaMTX v1.0.0\r2023/08/15 10:56:02 WAR configuration file not found, using an empty configuration\r2023/08/15 10:56:02 INF [RTSP] listener opened on :8554 (TCP), :8000 (UDP/RTP), :8001 (UDP/RTCP)\r2023/08/15 10:56:02 INF [RTMP] listener opened on :1935\r2023/08/15 10:56:02 INF [HLS] listener opened on :8888\r2023/08/15 10:56:02 INF [WebRTC] listener opened on :8889 (HTTP)\r2023/08/15 10:56:02 INF [SRT] listener opened on :8890 (UDP) ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:8:2","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"8.3.可以推拉流不能VLC播放 下面的可以，但VLC不能播放： 监听目标端口： ffplay -rtsp_flags listen -i rtsp://localhost:8888/live.sdp 使用ffmpeg推流 ffmpeg.exe -re -r 30 -i D:\\program\\nginx\\2270605199.mp4 -codec copy -an -f rtsp -muxdelay 0 -rtsp_transport tcp rtsp://localhost:8888/live.sdp 监听目标端口： ffplay -rtsp_flags listen -i rtsp://127.0.0.1:8554/stream1 使用ffmpeg推流 ffmpeg.exe -re -stream_loop -1 -i D:\\program\\nginx\\2270605199.mp4 -vcodec h264 -codec copy -f rtsp -rtsp_transport tcp rtsp://127.0.0.1:8554/stream1\rffmpeg.exe -re -stream_loop -1 -i D:\\program\\nginx\\2270605199.mp4 -vcodec h264 -codec copy -f rtsp -rtsp_transport udp rtsp://127.0.0.1:8554/stream1 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:8:3","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"8.4.成功的RTSP推流方案 执行ffmpeg推流失败问题解决 D:\\program\\nginx\\ffmpeg-master-latest-win64-gpl\\bin\u003effmpeg.exe -re -stream_loop -1 -i D:\\program\\nginx\\2270605199.mp4 -vcodec h264 -codec copy -f rtsp -rtsp_transport udp rtsp://127.0.0.1:8554/stream1\rffmpeg version N-111765-gc704901324-20230814 Copyright (c) 2000-2023 the FFmpeg developers\rbuilt with gcc 13.1.0 (crosstool-NG 1.25.0.196_227d99d)\rconfiguration: --prefix=/ffbuild/prefix --pkg-config-flags=--static --pkg-config=pkg-config --cross-prefix=x86_64-w64-mingw32- --arch=x86_64 --target-os=mingw32 --enable-gpl --enable-version3 --disable-debug --disable-w32threads --enable-pthreads --enable-iconv --enable-libxml2 --enable-zlib --enable-libfreetype --enable-libfribidi --enable-gmp --enable-lzma --enable-fontconfig --enable-libvorbis --enable-opencl --disable-libpulse --enable-libvmaf --disable-libxcb --disable-xlib --enable-amf --enable-libaom --enable-libaribb24 --enable-avisynth --enable-chromaprint --enable-libdav1d --enable-libdavs2 --disable-libfdk-aac --enable-ffnvcodec --enable-cuda-llvm --enable-frei0r --enable-libgme --enable-libkvazaar --enable-libass --enable-libbluray --enable-libjxl --enable-libmp3lame --enable-libopus --enable-librist --enable-libssh --enable-libtheora --enable-libvpx --enable-libwebp --enable-lv2 --enable-libvpl --enable-openal --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenh264 --enable-libopenjpeg --enable-libopenmpt --enable-librav1e --enable-librubberband --enable-schannel --enable-sdl2 --enable-libsoxr --enable-libsrt --enable-libsvtav1 --enable-libtwolame --enable-libuavs3d --disable-libdrm --disable-vaapi --enable-libvidstab --enable-vulkan --enable-libshaderc --enable-libplacebo --enable-libx264 --enable-libx265 --enable-libxavs2 --enable-libxvid --enable-libzimg --enable-libzvbi --extra-cflags=-DLIBTWOLAME_STATIC --extra-cxxflags= --extra-ldflags=-pthread --extra-ldexeflags= --extra-libs=-lgomp --extra-version=20230814\rlibavutil 58. 16.101 / 58. 16.101\rlibavcodec 60. 23.100 / 60. 23.100\rlibavformat 60. 10.100 / 60. 10.100\rlibavdevice 60. 2.101 / 60. 2.101\rlibavfilter 9. 11.100 / 9. 11.100\rlibswscale 7. 3.100 / 7. 3.100\rlibswresample 4. 11.100 / 4. 11.100\rlibpostproc 57. 2.100 / 57. 2.100\rInput #0, mov,mp4,m4a,3gp,3g2,mj2, from 'D:\\program\\nginx\\2270605199.mp4':\rMetadata:\rmajor_brand : isom\rminor_version : 512\rcompatible_brands: isomiso2avc1mp41\rencoder : Lavf58.76.100\rcomment : zy-libx264,vid:2270605199\rDuration: 00:08:41.28, start: 0.000000, bitrate: 797 kb/s\rStream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 960x600 [SAR 1:1 DAR 8:5], 662 kb/s, 25 fps, 25 tbr, 90k tbn (default)\rMetadata:\rhandler_name : VideoHandler\rvendor_id : [0][0][0][0]\rencoder : Lavc58.134.100 libwz264\rStream #0:1[0x2](und): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 128 kb/s (default)\rMetadata:\rhandler_name : SoundHandler\rvendor_id : [0][0][0][0]\rMultiple -c, -codec, -acodec, -vcodec, -scodec or -dcodec options specified for stream 0, only the last option '-c copy' will be used.\r[out#0/rtsp @ 000001526f876c00] Could not write header (incorrect codec parameters ?): Server returned 400 Bad Request\rError opening output file rtsp://127.0.0.1:8554/stream1.\rError opening output files: Server returned 400 Bad Request\rD:\\program\\nginx\\ffmpeg-master-latest-win64-gpl\\bin\u003e 12:17，问题解决有两个方案，推荐两个方案： 8.4.1.方案一 不要加端口rtsp://127.0.0.1/stream1 ffmpeg.exe -re -stream_loop -1 -i D:\\program\\nginx\\2270605199.mp4 -vcodec h264 -codec copy -f rtsp -rtsp_transport udp rtsp://127.0.0.1/stream1 8.4.2.方案二 先使用ffplay监听指定端口，再使用ffmpeg推流。 a. D:\\program\\nginx\\ffmpeg-master-latest-win64-gpl\\bin\u003effplay -rtsp_flags listen -i rtsp://127.0.0.1:8554/stream1\rb. D:\\program\\nginx\\ffmpeg-master-latest-win64-gpl\\bin\u003effmpeg.exe -re -stream_loop -1 -i D:\\program\\nginx\\2270605199.mp4 -vcodec h264 -codec copy -f rtsp -rtsp_transport udp rtsp://127.0.0.1:8554/stream1 8.4.3.完整的ffmpeg 最好下载完整版的ffmpeg，执行ffmpeg的时候，就不会缺这个，少那个了。 12：58，下载https://www.gyan.dev/ff","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:8:4","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"8.5.其它命令 下面的命令有些未经过测试的，不保证运行成功。 录制电脑屏幕并推流到服务器。 ffmpeg -f gdigrab -i desktop -vcodec libx264 -preset:v ultrafast -tune:v zerolatency -f rtsp rtsp://192.168.80.49:8554/mystream 下面是TCP推流： ffmpeg -re -i input.mp4 -c copy -rtsp_transport tcp -f rtsp rtsp://127.0.0.1:8554/stream 下面是UDP推流： ffmpeg -re -i input.mp4 -c copy -f rtsp rtsp://127.0.0.1:8554/stream 拉流： ffplay rtsp://127.0.0.1:8554/stream ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:8:5","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"九、使用VLC搭建RSTP推流环境【简易的RTSP推流环境】 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:9:0","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"9.1.打开流菜单 使用VLC播放器的File菜单中的流菜单。 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:9:1","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"9.2.配置文件选项 在文件选项中，添加添加按钮，添加mp4视频文件进来，同时点击串流按钮。 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:9:2","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"9.3.配置流输出 点击串流按钮后，在弹出窗口中可以直接点击下一步，来目标输出页。 在新目标处选择RTSP，并且点击后面的添加按钮， 在此配置页中配置端口8554和路径/,可以添加个后缀如/mp4。 在转码选项页中，对配置文件选择Video - H.264 + MP3（MP4），然后点击下一步。 再点击流，则VLC开始推流了。 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:9:3","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"9.4.拉流播放 可以在局域网或可ping的网络中，使用VLC进行拉流播放，打开VLC，选择File菜单中的打开网络串流...，地址配置rtsp://推流电脑IP地址:8554/mp4。 提醒：默认使用rtsp这种试的话，使用的就是UDP协议的。 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:9:4","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"十、成功的一次RTSP推拉流【RTSP推流成功】 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:10:0","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"10.1.描述 在2023/08/20 13:01时测试实现推拉流测试。 下面是效果图： 推拉流效果图 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:10:1","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"10.2.运行服务器 D:\\program\\nginx\\mediamtx_v1.0.0_windows_amd64\u003edate\r当前日期: 2023/08/20 周日\r输入新日期: (年月日)\rD:\\program\\nginx\\mediamtx_v1.0.0_windows_amd64\u003etime\r当前时间: 13:03:30.70\r输入新时间:\rD:\\program\\nginx\\mediamtx_v1.0.0_windows_amd64\u003emediamtx.exe\r2023/08/20 13:03:32 INF MediaMTX v1.0.0\r2023/08/20 13:03:32 INF [RTSP] listener opened on :8554 (TCP), :8000 (UDP/RTP), :8001 (UDP/RTCP)\r2023/08/20 13:03:32 INF [RTMP] listener opened on :1935\r2023/08/20 13:03:32 INF [HLS] listener opened on :8888\r2023/08/20 13:03:32 INF [WebRTC] listener opened on :8889 (HTTP)\r2023/08/20 13:03:32 INF [SRT] listener opened on :8890 (UDP)\r2023/08/20 13:03:46 INF [RTSP] [conn [::1]:52661] opened\r2023/08/20 13:03:46 INF [RTSP] [session 44c149af] created by [::1]:52661\r# 使用ffmpeg推流日志\r2023/08/20 13:03:46 INF [RTSP] [session 44c149af] is publishing to path 'mystream', 2 tracks (H264, MPEG-4 Audio)\r# 使用ffplay拉流日志\r2023/08/20 13:03:52 INF [RTSP] [conn [::1]:52662] opened\r2023/08/20 13:03:52 INF [RTSP] [session c6349b1b] created by [::1]:52662\r2023/08/20 13:03:52 INF [RTSP] [session c6349b1b] is reading from path 'mystream', with UDP, 2 tracks (H264, MPEG-4 Audio)\r# 关闭了ffplay拉流弹出的播放器，停止拉流\r2023/08/20 13:03:58 INF [RTSP] [conn [::1]:52662] closed (EOF)\r# 下面的日志是按CTRL+C停止了本次mediamtx.exe服务的日志\r2023/08/20 13:04:03 INF shutting down gracefully\r2023/08/20 13:04:03 INF [SRT] listener is closing\r2023/08/20 13:04:03 INF [WebRTC] listener is closing\r2023/08/20 13:04:03 INF [HLS] listener is closing\r2023/08/20 13:04:03 INF [RTMP] listener is closing\r2023/08/20 13:04:03 INF [RTSP] listener is closing\r2023/08/20 13:04:03 INF [RTSP] [session c6349b1b] destroyed (terminated)\r2023/08/20 13:04:03 INF [RTSP] [conn [::1]:52661] closed (terminated)\r2023/08/20 13:04:03 INF [RTSP] [session 44c149af] destroyed (terminated)\r2023/08/20 13:04:03 INF waiting for external commands\rD:\\program\\nginx\\mediamtx_v1.0.0_windows_amd64\u003e ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:10:2","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"10.3.推流 使用完整版本的ffmpeg进行推流。 使用D:\\program\\nginx\\ffmpeg-2023-08-14-git-c704901324-full_build\\bin\u003effmpeg.exe -re -stream_loop -1 -i D:\\program\\nginx\\2270605199.mp4 -vcodec h264 -c copy -f rtsp -rtsp_transport udp rtsp://localhost:8554/mystream进行推流，未指定UDP，但是其实你看mediamtx.exe，它也是UDP协议的。 当然，使用D:\\program\\nginx\\ffmpeg-2023-08-14-git-c704901324-full_build\\bin\u003effmpeg.exe -re -stream_loop -1 -i D:\\program\\nginx\\2270605199.mp4 -vcodec h264 -c copy -f rtsp -rtsp_transport udp rtsp://localhost:8554/mystream推流也是可以的。 下成是是在Windows上执行推流命令的记录： D:\\program\\nginx\\ffmpeg-2023-08-14-git-c704901324-full_build\\bin\u003effmpeg.exe -re -stream_loop -1 -i D:\\program\\nginx\\2270605199.mp4 -c copy -f rtsp rtsp://localhost:8554/mystream\rffmpeg version 2023-08-14-git-c704901324-full_build-www.gyan.dev Copyright (c) 2000-2023 the FFmpeg developers\rbuilt with gcc 12.2.0 (Rev10, Built by MSYS2 project)\rconfiguration: --enable-gpl --enable-version3 --enable-static --disable-w32threads --disable-autodetect --enable-fontconfig --enable-iconv --enable-gnutls --enable-libxml2 --enable-gmp --enable-bzlib --enable-lzma --enable-libsnappy --enable-zlib --enable-librist --enable-libsrt --enable-libssh --enable-libzmq --enable-avisynth --enable-libbluray --enable-libcaca --enable-sdl2 --enable-libaribb24 --enable-libaribcaption --enable-libdav1d --enable-libdavs2 --enable-libuavs3d --enable-libzvbi --enable-librav1e --enable-libsvtav1 --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxavs2 --enable-libxvid --enable-libaom --enable-libjxl --enable-libopenjpeg --enable-libvpx --enable-mediafoundation --enable-libass --enable-frei0r --enable-libfreetype --enable-libfribidi --enable-libharfbuzz --enable-liblensfun --enable-libvidstab --enable-libvmaf --enable-libzimg --enable-amf --enable-cuda-llvm --enable-cuvid --enable-ffnvcodec --enable-nvdec --enable-nvenc --enable-d3d11va --enable-dxva2 --enable-libvpl --enable-libshaderc --enable-vulkan --enable-libplacebo --enable-opencl --enable-libcdio --enable-libgme --enable-libmodplug --enable-libopenmpt --enable-libopencore-amrwb --enable-libmp3lame --enable-libshine --enable-libtheora --enable-libtwolame --enable-libvo-amrwbenc --enable-libcodec2 --enable-libilbc --enable-libgsm --enable-libopencore-amrnb --enable-libopus --enable-libspeex --enable-libvorbis --enable-ladspa --enable-libbs2b --enable-libflite --enable-libmysofa --enable-librubberband --enable-libsoxr --enable-chromaprint\rlibavutil 58. 16.101 / 58. 16.101\rlibavcodec 60. 23.100 / 60. 23.100\rlibavformat 60. 10.100 / 60. 10.100\rlibavdevice 60. 2.101 / 60. 2.101\rlibavfilter 9. 11.100 / 9. 11.100\rlibswscale 7. 3.100 / 7. 3.100\rlibswresample 4. 11.100 / 4. 11.100\rlibpostproc 57. 2.100 / 57. 2.100\rInput #0, mov,mp4,m4a,3gp,3g2,mj2, from 'D:\\program\\nginx\\2270605199.mp4':\rMetadata:\rmajor_brand : isom\rminor_version : 512\rcompatible_brands: isomiso2avc1mp41\rencoder : Lavf58.76.100\rcomment : zy-libx264,vid:2270605199\rDuration: 00:08:41.28, start: 0.000000, bitrate: 797 kb/s\rStream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 960x600 [SAR 1:1 DAR 8:5], 662 kb/s, 25 fps, 25 tbr, 90k tbn (default)\rMetadata:\rhandler_name : VideoHandler\rvendor_id : [0][0][0][0]\rencoder : Lavc58.134.100 libwz264\rStream #0:1[0x2](und): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 128 kb/s (default)\rMetadata:\rhandler_name : SoundHandler\rvendor_id : [0][0][0][0]\rOutput #0, rtsp, to 'rtsp://localhost:8554/mystream':\rMetadata:\rmajor_brand : isom\rminor_version : 512\rcompatible_brands: isomiso2avc1mp41\rcomment : zy-libx264,vid:2270605199\rencoder : Lavf60.10.100\rStream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 960x600 [SAR 1:1 DAR 8:5], q=2-31, 662 kb/s, 25 fps, 25 tbr, 90k tbn (default)\rMetadata:\rhandler_name : VideoHandler\rvendor_id : [0][0][0][0]\rencoder : Lavc58.134.100 libwz264\rStream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 128 kb/s (default)\rMetadata:\rhandler_name : SoundHandler\rvend","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:10:3","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"10.4.ffplay拉流 下面是在Windows命令使用ffplay拉流： D:\\program\\nginx\\ffmpeg-2023-08-14-git-c704901324-full_build\\bin\u003effplay.exe rtsp://localhost:8554/mystream\rffplay version 2023-08-14-git-c704901324-full_build-www.gyan.dev Copyright (c) 2003-2023 the FFmpeg developers\rbuilt with gcc 12.2.0 (Rev10, Built by MSYS2 project)\rconfiguration: --enable-gpl --enable-version3 --enable-static --disable-w32threads --disable-autodetect --enable-fontconfig --enable-iconv --enable-gnutls --enable-libxml2 --enable-gmp --enable-bzlib --enable-lzma --enable-libsnappy --enable-zlib --enable-librist --enable-libsrt --enable-libssh --enable-libzmq --enable-avisynth --enable-libbluray --enable-libcaca --enable-sdl2 --enable-libaribb24 --enable-libaribcaption --enable-libdav1d --enable-libdavs2 --enable-libuavs3d --enable-libzvbi --enable-librav1e --enable-libsvtav1 --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxavs2 --enable-libxvid --enable-libaom --enable-libjxl --enable-libopenjpeg --enable-libvpx --enable-mediafoundation --enable-libass --enable-frei0r --enable-libfreetype --enable-libfribidi --enable-libharfbuzz --enable-liblensfun --enable-libvidstab --enable-libvmaf --enable-libzimg --enable-amf --enable-cuda-llvm --enable-cuvid --enable-ffnvcodec --enable-nvdec --enable-nvenc --enable-d3d11va --enable-dxva2 --enable-libvpl --enable-libshaderc --enable-vulkan --enable-libplacebo --enable-opencl --enable-libcdio --enable-libgme --enable-libmodplug --enable-libopenmpt --enable-libopencore-amrwb --enable-libmp3lame --enable-libshine --enable-libtheora --enable-libtwolame --enable-libvo-amrwbenc --enable-libcodec2 --enable-libilbc --enable-libgsm --enable-libopencore-amrnb --enable-libopus --enable-libspeex --enable-libvorbis --enable-ladspa --enable-libbs2b --enable-libflite --enable-libmysofa --enable-librubberband --enable-libsoxr --enable-chromaprint\rlibavutil 58. 16.101 / 58. 16.101\rlibavcodec 60. 23.100 / 60. 23.100\rlibavformat 60. 10.100 / 60. 10.100\rlibavdevice 60. 2.101 / 60. 2.101\rlibavfilter 9. 11.100 / 9. 11.100\rlibswscale 7. 3.100 / 7. 3.100\rlibswresample 4. 11.100 / 4. 11.100\rlibpostproc 57. 2.100 / 57. 2.100\r[h264 @ 000001ef96980440] co located POCs unavailable 0B f=0/0\rInput #0, rtsp, from 'rtsp://localhost:8554/mystream': 0B f=0/0\rMetadata:\rtitle : Stream\rDuration: N/A, start: 0.083856, bitrate: N/A\rStream #0:0: Video: h264 (High), yuv420p(progressive), 960x600 [SAR 1:1 DAR 8:5], 25 fps, 25 tbr, 90k tbn\rStream #0:1: Audio: aac (LC), 44100 Hz, stereo, fltp\r[h264 @ 000001ef969d3940] co located POCs unavailable\r[h264 @ 000001ef9d061580] co located POCs unavailable\r517.22 A-V: -0.027 fd= 41 aq= 24KB vq= 155KB sq= 0B f=0/0\rD:\\program\\nginx\\ffmpeg-2023-08-14-git-c704901324-full_build\\bin\u003e ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:10:4","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["原创","视频推流","nginx","rtmp","rtsp"],"content":"10.5.VLC拉流 在VLC中配置网络串流地址为rtsp://localhost:8554/mystream，就可以播放推的流了。 ","date":"2023-08-20","objectID":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/:10:5","tags":["原创","android","rtmp","rtsp"],"title":"搭建HTTP方式的nginx视频推流服务器","uri":"https://daizelai.github.io/posts/ffmpeg/20230820_1102%E6%90%AD%E5%BB%BAhttp%E6%96%B9%E5%BC%8F%E7%9A%84nginx%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["ko签名"],"content":"在SC60源码中编译ko文件 ","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:0:0","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["ko签名"],"content":"一、描述 ","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:1:0","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["ko签名"],"content":"1.1.前言 本文记录了如何在本地SC60源码环境中，不直接编译到kernel中，而是直接编译出来个ko文件，手动加载ko及排查问题。 ","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:1:1","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["ko签名"],"content":"1.2.uevent简介 在Linux内核中，可以使用kobject_uevent函数向用户空间发送事件。这个函数用于生成uevent，并通知用户空间应用程序有关设备和硬件相关事件的信息。 ","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:1:2","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["ko签名"],"content":"二、创建内核模块 创建一个简单的内核模块，使用kobject_uevent函数触发uevent。 路径：/mnt/android/sz14_android_7.1.2_qcom/kernel/msm-3.18/drivers/video/display_event.c #include \u003clinux/init.h\u003e #include \u003clinux/kernel.h\u003e #include \u003clinux/module.h\u003e #include \u003clinux/kobject.h\u003e static struct kobject *kobj; static int __init uevent_example_init(void) { // 创建一个内核对象（kobject） kobj = kobject_create_and_add(\"my_uevent_obj\", kernel_kobj); if (!kobj) return -ENOMEM; // 使用kobject_uevent函数发送uevent kobject_uevent(kobj, KOBJ_ADD); printk(KERN_INFO \"Uevent example module loaded\\n\"); return 0; } static void __exit uevent_example_exit(void) { // 使用kobject_uevent函数发送uevent，这里发送移除事件 kobject_uevent(kobj, KOBJ_REMOVE); kobject_put(kobj); // 释放内核对象（kobject） printk(KERN_INFO \"Uevent example module unloaded\\n\"); } module_init(uevent_example_init); module_exit(uevent_example_exit); MODULE_LICENSE(\"GPL\"); MODULE_DESCRIPTION(\"Uevent example\"); MODULE_AUTHOR(\"Zelai Dai\"); ","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:2:0","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["ko签名"],"content":"三、编译ko ","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:3:0","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["ko签名"],"content":"3.1.配置 这里需要配置一下，obj-m表示编译成ko文件，obj-y表示编译到内核boot.img文件中去，这里选择display_event选择obj-m += display_event.o。 #kyle sn65dsi84 obj-y += mipi_convert.o + obj-m += display_event.o ","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:3:1","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["ko签名"],"content":"3.2.编译 在源码根目录执行make bootimage -j 20命令即可。 [daizelai@localhost sz14_android_7.1.2_qcom]$ make -j12\r[100% 51056/51056] Install system fs image: out/target/product/msm8953_64/system.img\rout/target/product/msm8953_64/system.img+out/target/product/msm8953_64/obj/PACKAGING/recovery_patch_intermediates/recovery_from_boot.p maxsize=3288637440 blocksize=135168 total=1694576235 reserve=33251328\r#### make completed successfully (01:34:40 (hh:mm:ss)) ####\r[daizelai@localhost sz14_android_7.1.2_qcom]$ make bootimage -j 12\r============================================\rPLATFORM_VERSION_CODENAME=REL\rPLATFORM_VERSION=7.1.2\rTARGET_PRODUCT=msm8953_64\rTARGET_BUILD_VARIANT=userdebug\rTARGET_BUILD_TYPE=release\rTARGET_BUILD_APPS=\rTARGET_ARCH=arm64\rTARGET_ARCH_VARIANT=armv8-a\rTARGET_CPU_VARIANT=generic\rTARGET_2ND_ARCH=arm\rTARGET_2ND_ARCH_VARIANT=armv7-a-neon\rTARGET_2ND_CPU_VARIANT=cortex-a53\rHOST_ARCH=x86_64\rHOST_2ND_ARCH=x86\rHOST_OS=linux\rHOST_OS_EXTRA=Linux-3.10.0-693.el7.x86_64-x86_64-with-centos-7.4.1708-Core\rHOST_CROSS_OS=windows\rHOST_CROSS_ARCH=x86\rHOST_CROSS_2ND_ARCH=x86_64\rHOST_BUILD_TYPE=release\rBUILD_ID=N2G47H\rOUT_DIR=out\r============================================\rUnknown option: -C\rusage: git [--version] [--help] [-c name=value]\r[--exec-path[=\u003cpath\u003e]] [--html-path] [--man-path] [--info-path]\r[-p|--paginate|--no-pager] [--no-replace-objects] [--bare]\r[--git-dir=\u003cpath\u003e] [--work-tree=\u003cpath\u003e] [--namespace=\u003cname\u003e]\r\u003ccommand\u003e [\u003cargs\u003e]\rRunning kati to generate build-msm8953_64.ninja...\rwildcard(device/qcom/msm8953_64/cdrom_res/zero.bin) was changed, regenerating...\r============================================\rPLATFORM_VERSION_CODENAME=REL\rPLATFORM_VERSION=7.1.2\rTARGET_PRODUCT=msm8953_64\rTARGET_BUILD_VARIANT=userdebug\rTARGET_BUILD_TYPE=release\rTARGET_BUILD_APPS=\rTARGET_ARCH=arm64\rTARGET_ARCH_VARIANT=armv8-a\rTARGET_CPU_VARIANT=generic\rTARGET_2ND_ARCH=arm\rTARGET_2ND_ARCH_VARIANT=armv7-a-neon\rTARGET_2ND_CPU_VARIANT=cortex-a53\rHOST_ARCH=x86_64\rHOST_2ND_ARCH=x86\rHOST_OS=linux\rHOST_OS_EXTRA=Linux-3.10.0-693.el7.x86_64-x86_64-with-centos-7.4.1708-Core\rHOST_CROSS_OS=windows\rHOST_CROSS_ARCH=x86\rHOST_CROSS_2ND_ARCH=x86_64\rHOST_BUILD_TYPE=release\rBUILD_ID=N2G47H\rOUT_DIR=out\r============================================\rincluding ./abi/cpp/Android.mk ...\rincluding ./art/Android.mk ...\rincluding ./bionic/Android.mk ...\rincluding ./bootable/recovery/Android.mk ...\rincluding ./build/libs/host/Android.mk ...\rincluding ./build/target/board/Android.mk ...\rkernel/msm-3.18/AndroidKernel.mk:20: Forcing kernel header generation only for 'arm64'\rUsing appended DTB\r记录了620+0 的读入\r记录了620+0 的写出\r634880字节(635 kB)已复制，0.00174049 秒，365 MB/秒\rincluding ./build/target/product/security/Android.mk ...\rincluding ./build/tools/Android.mk ...\rincluding ./cts/Android.mk ...\rFindEmulator: find: `cts/apps/CtsVerifier/src/android': No such file or directory\rFindEmulator: find: `cts/hostsidetests/os/test-apps/HostLinkVerificationApp/src': No such file or directory\rFindEmulator: find: `cts/libs/commonutil/src': No such file or directory\rFindEmulator: cd: cts/tests/libcore/ojluni/resources: No such file or directory\rFindEmulator: find: `cts/libs/commonutil/src': No such file or directory\rincluding ./dalvik/Android.mk ...\rincluding ./developers/samples/android/security/FingerprintDialog/Application/src/main/Android.mk ...\rincluding ./development/apps/BluetoothDebug/Android.mk ...\rincluding ./development/apps/BuildWidget/Android.mk ...\rincluding ./development/apps/CustomLocale/Android.mk ...\rincluding ./development/apps/Development/Android.mk ...\rincluding ./development/apps/DevelopmentSettings/Android.mk ...\rincluding ./development/apps/Fallback/Android.mk ...\rincluding ./development/apps/GestureBuilder/Android.mk ...\rincluding ./development/apps/NinePatchLab/Android.mk ...\rincluding ./development/apps/OBJViewer/Android.mk ...\rincluding ./development/apps/SdkSetup/Android.mk ...\rincluding ./development/apps/SettingInjectorSample/Android.mk ...\rincluding ./development/apps/WidgetPreview/Android.mk .","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:3:2","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["ko签名"],"content":"3.2.产出文件 成功编译的ko文件 成功编译的ko文件 ","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:3:3","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["ko签名"],"content":"四、使用 ","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:4:0","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["ko签名"],"content":"4.1.无签名导致安装ko失败 C:\\Users\\daizelai\u003eadb devices\rList of devices attached\r? device\rC:\\Users\\daizelai\u003eadb push C:\\Users\\daizelai\\Desktop\\display_event.ko /sdcard/\r895 KB/s (143944 bytes in 0.156s)\rC:\\Users\\daizelai\u003eadb shell ls -l /sdcard/\rtotal 368\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Alarms\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 DCIM\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Download\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Movies\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Music\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Notifications\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Pictures\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Podcasts\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Ringtones\r-rw-rw---- 1 root sdcard_rw 143944 2023-07-28 16:21 display_event.ko\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 wlan_logs\rC:\\Users\\daizelai\u003eadb shell date\rFri Jul 28 16:24:28 CST 2023\rC:\\Users\\daizelai\u003eadb shell\rmsm8953_64:/ # cd /sdcard/\rcd /sdcard/\rmsm8953_64:/sdcard # ls -l\rls -l\rtotal 368\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Alarms\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 DCIM\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Download\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Movies\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Music\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Notifications\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Pictures\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Podcasts\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 Ringtones\r-rw-rw---- 1 root sdcard_rw 143944 2023-07-28 16:21 display_event.ko\rdrwxrwx--x 2 root sdcard_rw 4096 2023-07-27 18:00 wlan_logs\rmsm8953_64:/sdcard # insmod display_event.ko\rinsmod display_event.ko\rinsmod: failed to load display_event.ko: Required key not available\r1|msm8953_64:/sdcard # 在SC60源码目录执行： [daizelai@localhost video]$ pwd\r/mnt/android/sz14_android_7.1.2_qcom/out/target/product/msm8953_64/obj/kernel/msm-3.18/drivers/video\r[daizelai@localhost video]$ date\r2023年 07月 28日 星期五 16:30:05 CST\r[daizelai@localhost video]$ hexdump -C display_event.ko | tail\r000231c0 00 00 00 00 00 00 00 00 01 00 00 00 02 00 00 00 |................|\r000231d0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|\r000231e0 e8 25 01 00 00 00 00 00 f8 04 00 00 00 00 00 00 |.%..............|\r000231f0 1e 00 00 00 2d 00 00 00 08 00 00 00 00 00 00 00 |....-...........|\r00023200 18 00 00 00 00 00 00 00 09 00 00 00 03 00 00 00 |................|\r00023210 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|\r00023220 e0 2a 01 00 00 00 00 00 50 01 00 00 00 00 00 00 |.*......P.......|\r00023230 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 |................|\r00023240 00 00 00 00 00 00 00 00 |........|\r00023248\r[daizelai@localhost video]$ ","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:4:1","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["ko签名"],"content":"4.2.对ko进行签名 刚刚编译ko文件是通过编译整个内核编译的，然后本次2023/07/28 18:02是把内核boot.img以及其它所有img制作成完整的刷机包，并且刷机到SC60设备上去了。下面通过本次编译的out目录下的签名文件对ko文件进行签名，然后是没有问题的。 [daizelai@localhost sz14_android_7.1.2_qcom]$ hexdump -C out/target/product/msm8953_64/obj/KERNEL_OBJ/drivers/video/display_event.ko | tail\r000231c0 00 00 00 00 00 00 00 00 01 00 00 00 02 00 00 00 |................|\r000231d0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|\r000231e0 e8 25 01 00 00 00 00 00 f8 04 00 00 00 00 00 00 |.%..............|\r000231f0 1e 00 00 00 2d 00 00 00 08 00 00 00 00 00 00 00 |....-...........|\r00023200 18 00 00 00 00 00 00 00 09 00 00 00 03 00 00 00 |................|\r00023210 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|\r00023220 e0 2a 01 00 00 00 00 00 50 01 00 00 00 00 00 00 |.*......P.......|\r00023230 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 |................|\r00023240 00 00 00 00 00 00 00 00 |........|\r00023248\r[daizelai@localhost sz14_android_7.1.2_qcom]$ perl kernel/msm-3.18/scripts/sign-file sha512 out/target/product/msm8953_64/obj/kernel/msm-3.18/signing_key.priv out/target/product/msm8953_64/obj/kernel/msm-3.18/signing_key.x509 display_event.ko\r[daizelai@localhost sz14_android_7.1.2_qcom]$ hexdump -C display_event.ko | tail\r00023420 56 55 d5 6b d0 66 0d 2c 6a 35 54 26 84 49 85 eb |VU.k.f.,j5T\u0026.I..|\r00023430 f4 f9 01 e6 09 48 03 b7 08 0f b9 16 ed 93 f3 78 |.....H.........x|\r00023440 ab ea 36 b9 ca 0a a9 1c 44 a1 60 cd 1e 8a 15 ee |..6.....D.`.....|\r00023450 9a 2a ab 96 db 2d 1c bc 35 89 0f 8b b2 f6 d6 b2 |.*...-..5.......|\r00023460 96 e5 60 c0 12 f5 af d5 30 6b d9 08 61 75 0a 66 |..`.....0k..au.f|\r00023470 6c 0d 36 bd 2a 23 0b 25 24 07 90 4d 01 06 01 1e |l.6.*#.%$..M....|\r00023480 14 00 00 00 00 00 02 02 7e 4d 6f 64 75 6c 65 20 |........~Module |\r00023490 73 69 67 6e 61 74 75 72 65 20 61 70 70 65 6e 64 |signature append|\r000234a0 65 64 7e 0a |ed~.|\r000234a4\r[daizelai@localhost sz14_android_7.1.2_qcom]$ ","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:4:2","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["ko签名"],"content":"4.3.使用签名后的ko 安装 在2023/07/28 18:04成功把ko安装到了SC60设备上面去了。 D:\\SC60\\20230728_1642_SC60_Android_7.1.2_Unpacking_Tool_20201012\u003eadb push C:\\Users\\daizelai\\Desktop\\display_event.ko /sdcard/\r938 KB/s (144548 bytes in 0.150s)\rD:\\SC60\\20230728_1642_SC60_Android_7.1.2_Unpacking_Tool_20201012\u003eadb shell\rmsm8953_64:/ # cd /sdcard/\rcd /sdcard/\rmsm8953_64:/sdcard # ls -l\rls -l\rtotal 368\rdrwxrwx--x 2 root sdcard_rw 4096 1970-01-10 14:11 Alarms\rdrwxrwx--x 2 root sdcard_rw 4096 1970-01-10 14:11 DCIM\rdrwxrwx--x 2 root sdcard_rw 4096 1970-01-10 14:11 Download\rdrwxrwx--x 2 root sdcard_rw 4096 1970-01-10 14:11 Movies\rdrwxrwx--x 2 root sdcard_rw 4096 1970-01-10 14:11 Music\rdrwxrwx--x 2 root sdcard_rw 4096 1970-01-10 14:11 Notifications\rdrwxrwx--x 2 root sdcard_rw 4096 1970-01-10 14:11 Pictures\rdrwxrwx--x 2 root sdcard_rw 4096 1970-01-10 14:11 Podcasts\rdrwxrwx--x 2 root sdcard_rw 4096 1970-01-10 14:11 Ringtones\r-rw-rw---- 1 root sdcard_rw 144548 2023-07-28 17:56 display_event.ko\rdrwxrwx--x 2 root sdcard_rw 4096 1970-01-10 14:11 wlan_logs\rmsm8953_64:/sdcard # insmod display_event.ko\rinsmod display_event.ko\rmsm8953_64:/sdcard # date\rdate\rSat Jan 10 14:21:09 CST 1970\r127|msm8953_64:/sdcard # lsmod\rlsmod\rModule Size Used by\rdisplay_event 12598 0\rmsm8953_64:/sdcard # 查看 msm8953_64:/sdcard # lsmod\rlsmod\rModule Size Used by\rdisplay_event 12598 0\rmsm8953_64:/sdcard # 卸载ko msm8953_64:/sdcard # rmmod display_event\rrmmod display_event\rmsm8953_64:/sdcard # ","date":"2023-07-28","objectID":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/:4:3","tags":["原创","内核模块编译","ko编译","内核编译ko","SC60编译ko","SC60使用ko","ko签名"],"title":"在SC60源码中编译ko文件","uri":"https://daizelai.github.io/posts/android/drivers/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/%E5%9C%A8sc60%E6%BA%90%E7%A0%81%E4%B8%AD%E7%BC%96%E8%AF%91ko%E6%96%87%E4%BB%B6/"},{"categories":["原创","vscode","git"],"content":"本地命令行删除分支","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/room/","tags":["原创","vscode","git","git提交"],"title":"本地命令行删除分支","uri":"https://daizelai.github.io/posts/git/room/"},{"categories":["原创","vscode","git"],"content":"一、删除本地仓库中的分支 git branch -d \u003cbranch-name\u003e 删除多个本地分支 git branch -d \u003cbranch1\u003e \u003cbranch2\u003e \u003cbranch3\u003e ... ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/room/:1:0","tags":["原创","vscode","git","git提交"],"title":"本地命令行删除分支","uri":"https://daizelai.github.io/posts/git/room/"},{"categories":["原创","vscode","git"],"content":"二、强制删除分支 如果要强制删除分支，即使它的更改尚未合并到其他分支中，可以使用以下命令： git branch -D \u003cbranch-name\u003e 强制删除多个分支 git branch -D \u003cbranch1\u003e \u003cbranch2\u003e \u003cbranch3\u003e ... 请确保在删除分支之前，已经将其上的任何重要更改合并到其他分支中或以其他方式进行了备份。 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/room/:2:0","tags":["原创","vscode","git","git提交"],"title":"本地命令行删除分支","uri":"https://daizelai.github.io/posts/git/room/"},{"categories":["原创","vscode","git"],"content":"三、删除远程仓库中的分支 如果你想删除远程仓库中的分支，可以使用以下命令： git push origin --delete \u003cbranch-name\u003e 删除多个远程分支 git push origin --delete \u003cbranch1\u003e \u003cbranch2\u003e \u003cbranch3\u003e ... 这将从远程仓库 origin 删除指定的分支。 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/room/:3:0","tags":["原创","vscode","git","git提交"],"title":"本地命令行删除分支","uri":"https://daizelai.github.io/posts/git/room/"},{"categories":["原创","vscode","git"],"content":"使用vscode合并分支提交到主分支","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"一、描述 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:1:0","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"1.1.前言 git多commit合并提交到主分支过程记录，本文记录了类似于1.2小节的整个过程。 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:1:1","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"1.2.在develop分支 git log 现有提交60714ec、fa0fbe5和6a54429。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git reflog -n 10\r6a54429 (HEAD -\u003e develop) HEAD@{0}: commit: 修改了版本号为11\rfa0fbe5 HEAD@{1}: commit: 修改版本号为10\r60714ec HEAD@{2}: commit: 修改版本号为9\r8cbf57e (origin/develop) HEAD@{3}: merge feature/login: Merge made by the 'recursive' strategy.\r8791add HEAD@{4}: checkout: moving from feature/login to develop\r0108492 (origin/feature/login, feature/login) HEAD@{5}: commit: 修改了版本号为8\r8bf847c HEAD@{6}: commit: 修改了版本号为7\r695c95c HEAD@{7}: checkout: moving from develop to feature/login\r8791add HEAD@{8}: merge feature/login: Merge made by the 'recursive' strategy.\rad9dc3c HEAD@{9}: checkout: moving from feature/login to develop\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ 合并 需要把下面的三次提交合并成一次提交到master分支。 6a54429 (HEAD -\u003e develop) HEAD@{0}: commit: 修改了版本号为11\rfa0fbe5 HEAD@{1}: commit: 修改版本号为10\r60714ec HEAD@{2}: commit: 修改版本号为9 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:1:2","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"二、效果 开发分支有多个commit提交记录，但主分支develop分支【通常为master】一般只需要最后的一次总的提交，不需要每次的提交。 下面是提交效果。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git log --graph\r* commit 8791addfb6cd50f86995c3a7145d16092942af79 (HEAD -\u003e develop, origin/develop)\r|\\ Merge: ad9dc3c 695c95c\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:58:08 2023 +0800\r| |\r| | Merge branch 'feature/login' into develop\r| |\r| * commit 695c95c9ebabf5171b8424c9f79adf808791b36a (origin/feature/login, feature/login)\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:57:36 2023 +0800\r| |\r| | 修改了版本号为6\r| |\r| * commit ae881814a440099c329dd3afad609c94c2a5c7d0\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:56:27 2023 +0800\r| |\r| | 修改了版本号为5\r| |\r| * commit bcacd0182e4728956b4d740f3f56424df8b01bfe\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:55:17 2023 +0800\r| |\r| | 修改了版本号为4\r| |\r| * commit e144fb0a181b1fc6e1b8a701c9c34606d16e1cb2\r|/ Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| Date: Sat Jun 3 15:54:30 2023 +0800\r|\r| 修改了版本号为3\r|\r* commit ad9dc3c1e583722d63e74214a40907a6720cff1d\r|\\ Merge: 23d0c6e 3397d2a\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 12:53:10 2023 +0800\r| |\r| | Merge branch 'test9999' into develop\r| |\r| * commit 3397d2a3f1262ad1258fb2757dfe04a87408b758\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 12:52:45 2023 +0800\r| |\r| | 333333\r| |\r| * commit 8bf05312cce22ba21a23026df54acb747bddfb27\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 12:52:34 2023 +0800\r| |\r| | 222222\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:2:0","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"三、vs Code提交 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:3:0","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"3.1.提交步骤 从develop分支创建开发分支feature。 在开发分支feature中开发完成。 push所有feature分支的代码都gitlab服务器。 切换到develop分支。 打开vs code中的Git Graaph。 鼠标右击feature分支。 选择Merge into current branch... pushdevelop分支都gitlab服务器。 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:3:1","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"3.2.提交效果 第一次提交示例 第一次提交示例 第二次提交示例 第二次提交示例 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:3:2","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"四、命令行提交 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:0","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.1.描述 feature分支提交开始连接develop合并结束处连接develop的方法。 下面使用的git merge --no-ff -m \"合并feature/login分支的登录功能到develop分支\" feature/login命令的解释： 1.使用这个git merge --no-ff -m \"合并feature/login分支的登录功能到develop分支\" feature/login命令，你可以将feature/login分支的更改合并到当前分支，并创建一个新的合并提交，以确保提交历史中保留了合并的信息，并在提交信息中指定了合并的描述。 2.将feature/login分支的更改合并到当前所在的分支，而且使用非快进合并模式，并且指定了合并提交的提交信息。 3.--no-ff: 这是git merge命令的选项之一，用于执行非快进合并（non-fast-forward merge）。非快进合并将创建一个新的合并提交，将要合并的分支的历史与当前分支的历史连接在一起，即使没有冲突也会创建一个合并提交。 4.feature/login: 这是要合并的分支的名称。在命令中指定了feature/login，表示将feature/login分支的更改合并到当前所在的（如develop）分支。 提交后的效果 提交后的效果 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:1","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.2.看一下当前所在分支 当前是在feature/login开发分支。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ date\rSat Jun 3 16:10:54 2023\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ git branch -a\rdevelop\r* feature/login\rmaster\rremotes/origin/HEAD -\u003e origin/master\rremotes/origin/develop\rremotes/origin/feature/login\rremotes/origin/master\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:2","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.3.查看现有的日志 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ git log -n 5\rcommit 01084928aa1cc70b8bd6447beeb6fc120c356916 (HEAD -\u003e feature/login, origin/feature/login)\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:10:22 2023 +0800\r修改了版本号为8\rcommit 8bf847c2a8cdd2f81c2f7a6a3e7a932a631f4063\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:10:00 2023 +0800\r修改了版本号为7\rcommit 695c95c9ebabf5171b8424c9f79adf808791b36a\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:57:36 2023 +0800\r修改了版本号为6\rcommit ae881814a440099c329dd3afad609c94c2a5c7d0\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:56:27 2023 +0800\r修改了版本号为5\rcommit bcacd0182e4728956b4d740f3f56424df8b01bfe\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:55:17 2023 +0800\r修改了版本号为4\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ git reflog -10\r0108492 (HEAD -\u003e feature/login, origin/feature/login) HEAD@{0}: commit: 修改了版本号为8\r8bf847c HEAD@{1}: commit: 修改了版本号为7\r695c95c HEAD@{2}: checkout: moving from develop to feature/login\r8791add (origin/develop, develop) HEAD@{3}: merge feature/login: Merge made by the 'recursive' strategy.\rad9dc3c HEAD@{4}: checkout: moving from feature/login to develop\r695c95c HEAD@{5}: commit: 修改了版本号为6\rae88181 HEAD@{6}: commit: 修改了版本号为5\rbcacd01 HEAD@{7}: commit: 修改了版本号为4\re144fb0 HEAD@{8}: commit: 修改了版本号为3\rad9dc3c HEAD@{9}: checkout: moving from develop to feature/login\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ 可以看到，本次有两个commit提交，修改了版本号为7和修改了版本号为8，需要把这两个提交合并到develop分支。 ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:3","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.4.切换到develop分支 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (feature/login)\r$ git checkout develop\rSwitched to branch 'develop'\rYour branch is up to date with 'origin/develop'.\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:4","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.5.查看一下日志 再查看下日志吧。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git log -n 5\rcommit 8791addfb6cd50f86995c3a7145d16092942af79 (HEAD -\u003e develop, origin/develop)\rMerge: ad9dc3c 695c95c\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:58:08 2023 +0800\rMerge branch 'feature/login' into develop\rcommit 695c95c9ebabf5171b8424c9f79adf808791b36a\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:57:36 2023 +0800\r修改了版本号为6\rcommit ae881814a440099c329dd3afad609c94c2a5c7d0\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:56:27 2023 +0800\r修改了版本号为5\rcommit bcacd0182e4728956b4d740f3f56424df8b01bfe\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:55:17 2023 +0800\r修改了版本号为4\rcommit e144fb0a181b1fc6e1b8a701c9c34606d16e1cb2\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:54:30 2023 +0800\r修改了版本号为3\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git reflog -10\r8791add (HEAD -\u003e develop, origin/develop) HEAD@{0}: checkout: moving from feature/login to develop\r0108492 (origin/feature/login, feature/login) HEAD@{1}: commit: 修改了版本号为8\r8bf847c HEAD@{2}: commit: 修改了版本号为7\r695c95c HEAD@{3}: checkout: moving from develop to feature/login\r8791add (HEAD -\u003e develop, origin/develop) HEAD@{4}: merge feature/login: Merge made by the 'recursive' strategy.\rad9dc3c HEAD@{5}: checkout: moving from feature/login to develop\r695c95c HEAD@{6}: commit: 修改了版本号为6\rae88181 HEAD@{7}: commit: 修改了版本号为5\rbcacd01 HEAD@{8}: commit: 修改了版本号为4\re144fb0 HEAD@{9}: commit: 修改了版本号为3\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:5","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.6.合并开分支feature/login到develop分支 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git merge --no-ff -m \"合并feature/login分支的登录功能到develop分支\" feature/login\rMerge made by the 'recursive' strategy.\rbuild.gradle | 2 +-\rgradle.properties | 2 +-\r2 files changed, 2 insertions(+), 2 deletions(-)\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ 合并过后再看下状态。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git status\rOn branch develop\rYour branch is ahead of 'origin/develop' by 3 commits.\r(use \"git push\" to publish your local commits)\rnothing to commit, working tree clean\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ 查看下日志 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git log -n 5\rcommit 8cbf57ecbd49775ca5a397a693dc3e95438cf276 (HEAD -\u003e develop)\rMerge: 8791add 0108492\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:13:24 2023 +0800\r合并feature/login分支的登录功能到develop分支\rcommit 01084928aa1cc70b8bd6447beeb6fc120c356916 (origin/feature/login, feature/login)\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:10:22 2023 +0800\r修改了版本号为8\rcommit 8bf847c2a8cdd2f81c2f7a6a3e7a932a631f4063\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:10:00 2023 +0800\r修改了版本号为7\rcommit 8791addfb6cd50f86995c3a7145d16092942af79 (origin/develop)\rMerge: ad9dc3c 695c95c\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:58:08 2023 +0800\rMerge branch 'feature/login' into develop\rcommit 695c95c9ebabf5171b8424c9f79adf808791b36a\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:57:36 2023 +0800\r修改了版本号为6\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git reflog -n10\r8cbf57e (HEAD -\u003e develop) HEAD@{0}: merge feature/login: Merge made by the 'recursive' strategy.\r8791add (origin/develop) HEAD@{1}: checkout: moving from feature/login to develop\r0108492 (origin/feature/login, feature/login) HEAD@{2}: commit: 修改了版本号为8\r8bf847c HEAD@{3}: commit: 修改了版本号为7\r695c95c HEAD@{4}: checkout: moving from develop to feature/login\r8791add (origin/develop) HEAD@{5}: merge feature/login: Merge made by the 'recursive' strategy.\rad9dc3c HEAD@{6}: checkout: moving from feature/login to develop\r695c95c HEAD@{7}: commit: 修改了版本号为6\rae88181 HEAD@{8}: commit: 修改了版本号为5\rbcacd01 HEAD@{9}: commit: 修改了版本号为4\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:6","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.7.推送到远程gitlab daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git push origin develop\rEnumerating objects: 1, done.\rCounting objects: 100% (1/1), done.\rWriting objects: 100% (1/1), 264 bytes | 264.00 KiB/s, done.\rTotal 1 (delta 0), reused 0 (delta 0), pack-reused 0\rremote:\rremote: To create a merge request for develop, visit:\rremote: http://gitlab.gbcom.com.cn/metro-system/wzs2_android_app/-/merge_requests/new?merge_request%5Bsource_branch%5D=develop\rremote:\rTo gitlab.gbcom.com.cn:metro-system/wzs2_android_app.git\r8791add..8cbf57e develop -\u003e develop\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ 查看下日志。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git log -n 5\rcommit 8cbf57ecbd49775ca5a397a693dc3e95438cf276 (HEAD -\u003e develop, origin/develop)\rMerge: 8791add 0108492\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:13:24 2023 +0800\r合并feature/login分支的登录功能到develop分支\rcommit 01084928aa1cc70b8bd6447beeb6fc120c356916 (origin/feature/login, feature/login)\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:10:22 2023 +0800\r修改了版本号为8\rcommit 8bf847c2a8cdd2f81c2f7a6a3e7a932a631f4063\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 16:10:00 2023 +0800\r修改了版本号为7\rcommit 8791addfb6cd50f86995c3a7145d16092942af79\rMerge: ad9dc3c 695c95c\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:58:08 2023 +0800\rMerge branch 'feature/login' into develop\rcommit 695c95c9ebabf5171b8424c9f79adf808791b36a\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Sat Jun 3 15:57:36 2023 +0800\r修改了版本号为6\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git reflog -10\r8cbf57e (HEAD -\u003e develop, origin/develop) HEAD@{0}: merge feature/login: Merge made by the 'recursive' strategy.\r8791add HEAD@{1}: checkout: moving from feature/login to develop\r0108492 (origin/feature/login, feature/login) HEAD@{2}: commit: 修改了版本号为8\r8bf847c HEAD@{3}: commit: 修改了版本号为7\r695c95c HEAD@{4}: checkout: moving from develop to feature/login\r8791add HEAD@{5}: merge feature/login: Merge made by the 'recursive' strategy.\rad9dc3c HEAD@{6}: checkout: moving from feature/login to develop\r695c95c HEAD@{7}: commit: 修改了版本号为6\rae88181 HEAD@{8}: commit: 修改了版本号为5\rbcacd01 HEAD@{9}: commit: 修改了版本号为4\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:7","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","vscode","git"],"content":"4.8.查看提交的graph 可以看到feature/login分支从develop分支分出来，然后再合进去develop分支这条线。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ git log --graph\r* commit 8cbf57ecbd49775ca5a397a693dc3e95438cf276 (HEAD -\u003e develop, origin/develop)\r|\\ Merge: 8791add 0108492\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 16:13:24 2023 +0800\r| |\r| | 合并feature/login分支的登录功能到develop分支\r| |\r| * commit 01084928aa1cc70b8bd6447beeb6fc120c356916 (origin/feature/login, feature/login)\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 16:10:22 2023 +0800\r| |\r| | 修改了版本号为8\r| |\r| * commit 8bf847c2a8cdd2f81c2f7a6a3e7a932a631f4063\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 16:10:00 2023 +0800\r| |\r| | 修改了版本号为7\r| |\r* | commit 8791addfb6cd50f86995c3a7145d16092942af79\r|\\| Merge: ad9dc3c 695c95c\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:58:08 2023 +0800\r| |\r| | Merge branch 'feature/login' into develop\r| |\r| * commit 695c95c9ebabf5171b8424c9f79adf808791b36a\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:57:36 2023 +0800\r| |\r| | 修改了版本号为6\r| |\r| * commit ae881814a440099c329dd3afad609c94c2a5c7d0\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:56:27 2023 +0800\r| |\r| | 修改了版本号为5\r| |\r| * commit bcacd0182e4728956b4d740f3f56424df8b01bfe\r| | Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| | Date: Sat Jun 3 15:55:17 2023 +0800\r| |\r| | 修改了版本号为4\r| |\r| * commit e144fb0a181b1fc6e1b8a701c9c34606d16e1cb2\r|/ Author: daizelai \u003cdaizelai@gbcom.com.cn\u003e\r| Date: Sat Jun 3 15:54:30 2023 +0800\r|\r| 修改了版本号为3\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/test/wzs2_android_app (develop)\r$ ","date":"2023-06-03","objectID":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/:4:8","tags":["原创","vscode","git","git提交"],"title":"使用vscode合并分支提交到主分支","uri":"https://daizelai.github.io/posts/git/20230603_1255%E4%BD%BF%E7%94%A8vscode%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%BB%E5%88%86%E6%94%AF/gitmerge/"},{"categories":["原创","android","方法耗时"],"content":"android开发中统计方法执行时间","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"一、android开发中统计方法执行时间 在Android开发中，可以使用以下方法来统计方法的执行时间： ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:1:0","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"1.1.System.currentTimeMillis() 使用System.currentTimeMillis()方法： 在方法的开始处使用long startTime = System.currentTimeMillis();记录开始时间，在方法的结束处使用long endTime = System.currentTimeMillis();记录结束时间。然后可以通过计算差值long executionTime = endTime - startTime;来得到方法的执行时间。 示例代码： long startTime = System.currentTimeMillis(); // 执行需要统计时间的方法 long endTime = System.currentTimeMillis(); long executionTime = endTime - startTime; Log.d(\"ExecutionTime\", \"Method execution time: \" + executionTime + \"ms\"); ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:1:1","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"1.2.System.nanoTime() 使用System.nanoTime()方法： System.nanoTime()方法提供了更高精度的时间单位，可以用于测量方法的执行时间。用法与System.currentTimeMillis()类似。 示例代码： long startTime = System.nanoTime(); // 执行需要统计时间的方法 long endTime = System.nanoTime(); long executionTime = endTime - startTime; Log.d(\"ExecutionTime\", \"Method execution time: \" + executionTime + \"ns\"); 注意：以上方法只能统计方法的总体执行时间，不适用于需要分析方法内部细节的时间消耗。对于更复杂的性能分析和优化需求，可以考虑使用Android Profiler工具或第三方性能分析库，如Tracer等。 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:1:2","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"二、使用第三方库用来统计函数的执行时间 在Android开发中，有一些第三方库可用于统计函数的执行时间。以下是其中一些常用的库： Method-Profiling: Method-Profiling是一个轻量级的Java库，用于测量方法执行时间。它提供了一个简单的API来开始和停止计时器，并计算方法的执行时间。该库易于使用且功能简单，适合对特定函数进行基本的执行时间统计。 GitHub链接：Method-Profiling Hugo: Hugo是一个注解处理器库，用于在编译时自动插入计时代码以测量方法的执行时间。它提供了一组自定义注解，可以应用于要统计执行时间的方法上。在编译时，Hugo会自动生成计时代码，从而方便地测量方法的执行时间。 GitHub链接：Hugo Stopwatch: Stopwatch是一个轻量级的Java库，用于测量方法的执行时间。它提供了一个简单的接口来开始和停止计时器，并计算方法的执行时间。该库易于集成和使用，适用于基本的方法执行时间统计。 GitHub链接：Stopwatch 这些库提供了不同的方法来测量和统计函数的执行时间。您可以根据自己的需求选择适合的库，然后根据库的文档和示例进行集成和使用。请注意，这些库都是第三方库，因此请确保阅读并遵循它们的许可和使用条款。 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:2:0","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"三、Method-Profiling示例 以下是一个使用Method-Profiling库的示例： ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:3:0","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"3.1.添加依赖 在项目的build.gradle文件中添加Method-Profiling库的依赖： dependencies { implementation 'com.github.jayrambhia:Method-Profiling:v1.0' } ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:3:1","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"3.2.添加@Profile注解 在要统计执行时间的方法上添加@Profile注解： import com.jayrambhia.profiling.Profile; public class MyClass { @Profile public void myMethod() { // 要统计执行时间的方法逻辑 } } ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:3:2","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"3.3.方法正常执行 在应用程序中调用要统计执行时间的方法： MyClass myClass = new MyClass(); myClass.myMethod(); ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:3:3","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"3.4.日志输出 运行应用程序并查看日志输出： Method [myMethod] took 25 ms 通过添加@Profile注解，Method-Profiling库会在方法的开始和结束处自动计时，并在日志中输出方法的执行时间。 请注意，以上示例只是Method-Profiling库的基本用法。您可以根据需要进行自定义配置，如更改日志输出格式、指定要统计的方法等。请参考Method-Profiling库的文档和示例以获得更多详细信息。 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:3:4","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"四、定时执行的方法的写法 如果要统计定时执行的方法的执行时间，可以使用Java中的ScheduledExecutorService来定时调度方法的执行，并结合Method-Profiling库来统计执行时间。以下是一个示例： import com.jayrambhia.profiling.Profile; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class MyClass { private ScheduledExecutorService executorService; public void startTimedMethod() { executorService = Executors.newSingleThreadScheduledExecutor(); // 定时执行方法，这里设定每隔1秒执行一次 executorService.scheduleAtFixedRate(this::timedMethod, 0, 1, TimeUnit.SECONDS); } public void stopTimedMethod() { // 停止定时执行方法 if (executorService != null \u0026\u0026 !executorService.isShutdown()) { executorService.shutdown(); } } @Profile public void timedMethod() { // 要统计执行时间的方法逻辑 } } 在上述示例中，startTimedMethod()方法用于启动定时执行方法，stopTimedMethod()方法用于停止定时执行。timedMethod()方法是要统计执行时间的方法，添加了@Profile注解。 当调用startTimedMethod()方法时，定时执行的方法将在后台线程按照指定的时间间隔执行。Method-Profiling库将自动记录每次方法执行的时间，并输出到日志中。 使用stopTimedMethod()方法可以停止定时执行的方法，以便在不需要时停止统计。 请确保在应用程序的适当位置调用startTimedMethod()和stopTimedMethod()方法来启动和停止定时执行。根据需要进行适当的修改和扩展。 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:4:0","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"五、Hugo的使用示例 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:5:0","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"5.1.添加依赖 以下是使用Hugo库的示例： 在项目的build.gradle文件中添加Hugo库的依赖： dependencies { debugAnnotationProcessor 'com.jakewharton.hugo:hugo-compiler:1.2.1' releaseAnnotationProcessor 'com.jakewharton.hugo:hugo-no-op:1.2.1' } ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:5:1","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"5.2.添加@DebugLog注解 在要统计执行时间的方法上添加@DebugLog注解： import com.jakewharton.hugo.annotations.DebugLog; public class MyClass { @DebugLog public void myMethod() { // 要统计执行时间的方法逻辑 } } ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:5:2","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"5.3.方法正常执行 在应用程序中调用要统计执行时间的方法： MyClass myClass = new MyClass(); myClass.myMethod(); ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:5:3","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"5.4.日志输出 运行应用程序并查看日志输出： D/MyClass: ⇢ myMethod() D/MyClass: ⇠ myMethod [100ms] 通过添加@DebugLog注解，Hugo库会在方法的开始和结束处自动插入计时代码，并在日志中输出方法的执行时间。 请注意，Hugo库只在Debug构建类型下有效，因此在发布版本中不会插入计时代码。这样可以确保在生产环境中不会有性能损失。 以上示例只是Hugo库的基本用法。您可以根据需要进行自定义配置，如更改日志输出格式、指定要统计的方法等。请参考Hugo库的文档和示例以获得更多详细信息。 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:5:4","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"六、Stopwatch的使用示例 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:6:0","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"6.1.添加stopwatch依赖 以下是使用Stopwatch库的示例： 在项目的build.gradle文件中添加Stopwatch库的依赖： dependencies { implementation 'com.github.mediavrog⏱️1.0.0' } ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:6:1","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["原创","android","方法耗时"],"content":"6.2.方法中使用 在要统计执行时间的方法中使用Stopwatch： import com.github.mediavrog.stopwatch.Stopwatch; public class MyClass { public void myMethod() { Stopwatch stopwatch = new Stopwatch(); stopwatch.start(); // 要统计执行时间的方法逻辑 stopwatch.stop(); long executionTime = stopwatch.getElapsedTimeMillis(); System.out.println(\"Method execution time: \" + executionTime + \"ms\"); } } 在上述示例中，我们创建了一个Stopwatch对象，并在方法的开始处调用start()方法开始计时。在方法的结束处调用stop()方法停止计时，并通过getElapsedTimeMillis()方法获取经过的时间。 请注意，这里使用的是Stopwatch库的简单版本，适用于基本的方法执行时间统计。如果需要更高级的功能，例如分段计时或并行计时等，可以查阅Stopwatch库的文档并使用适当的API。 以上示例只是Stopwatch库的基本用法。您可以根据需要进行自定义配置，如更改日志输出格式、指定要统计的方法等。请参考Stopwatch库的文档和示例以获得更多详细信息。 ","date":"2023-05-30","objectID":"https://daizelai.github.io/posts/android/methodexecution/:6:2","tags":["原创","android","方法耗时","hugo"],"title":"android开发中统计方法执行时间","uri":"https://daizelai.github.io/posts/android/methodexecution/"},{"categories":["git","commit"],"content":"在项目开发中，一定要注意git代码的提交规范。","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"一、描述 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:0","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"说明 为了规范我的git提交内容，提交的时候commit -m “备注的信息”，但是每个人的备注信息千奇百怪，为了统一，我们进行了git的规范。 本次安装过程： npm install -g commitizen\rnpm install -g cz-conventional-changelog\recho '{ \"path\": \"cz-conventional-changelog\" }' \u003e .czrc\rnpx commitizen init cz-conventional-changelog --save-dev --save-exact\rnpx commitizen init cz-conventional-changelog --save-dev --save-exact --force\rnpm install -g conventional-changelog-cli\rnpm ls -g -depth=0\r# 为了Git Bash命令行中也可以使用上下箭头选择git type，安装下面这个。\rnpm install -g git-cz\r#下面是changlog\r#追加\rconventional-changelog -p angular -i CHANGELOG.md -s\r#全量生成\rconventional-changelog -p angular -i CHANGELOG.md -s -r 0 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:1","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"windows命令行环境 nvm-windows commitizen-windows.md ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:2","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Type 提交类型： 1.feat: 新功能（feature）\r2.fix: Bug修复\r3,.docs: 文档更新（documentation）\r4.style: 代码的格式，标点符号的更新（不影响代码运行的变动）\r5.refactor: 代码重构（即不是新增功能，也不是修改bug的代码变动）\r6.perf: 性能优化\r7.test: 测试更新\r8.build: 构建系统或者包依赖更新\r9.ci: CI 配置，脚本文件等更新\r10.chore: 非src或者测试文件的更新【构建过程或辅助工具的变动】\r11.revert: commit 回退 说明一下： # 主要type\rfeat: 增加新功能\rfix: 修复bug\r# 特殊type\rdocs: 只改动了文档相关的内容\rstyle: 不影响代码含义的改动，例如去掉空格、改变缩进、增删分号\rbuild: 构造工具的或者外部依赖的改动，例如webpack，npm\rrefactor: 代码重构时使用\rrevert: 执行git revert打印的message\r# 暂不使用type\rtest: 添加测试或者修改现有测试\rperf: 提高性能的改动\rci: 与CI（持续集成服务）有关的改动\rchore: 不修改src或者test的其余修改，例如构建过程或辅助工具的变动 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:3","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Scope 用来说明本次Commit影响的范围，即简要说明修改会涉及的部分。这个本来是选填项，但从AngularJS实际项目中可以看出基本上也成了必填项了。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:4","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Subject 用来简要描述本次改动，概述就好了，因为后面还会在Body里给出具体信息。并且最好遵循下面三条: 以动词开头，使用第一人称现在时，比如change，而不是changed或changes 首字母不要大写 结尾不用句号(.) ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:5","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Body 里的内容是对上面subject里内容的展开，在此做更加详尽的描述，内容里应该包含修改动机和修改前后的对比。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:6","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Footer footer里的主要放置不兼容变更和Issue关闭的信息。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:7","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Revert 此外如果需要撤销之前的Commit，那么本次Commit Message中必须以revert：开头，后面紧跟前面描述的Header部分，格式不变。并且，Body部分的格式也是固定的，必须要记录撤销前Commit的SHA值。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:1:8","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"过程精简 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:2:0","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Commitizen规范 1.全局安装commitizen \u0026 cz-conventional-changelog # 安装，安装完成之后可以使用git cz命令来取代git commit\rnpm install -g commitizen cz-conventional-changelog conventional-changelog-cli\r#适配器\r#如果需要在项目中使用commitizen生成符合AngularJS规范的提交说明，初始化cz-conventional-changelog适配器\rcommitizen init cz-conventional-changelog --save --save-exact\rnpx commitizen init cz-conventional-changelog --save-dev --save-exact --force\r#上面初始化适配器主要进行了3件事情：\r#1.在项目中安装cz-conventional-changelog 适配器依赖\r#2.将适配器依赖保存到package.json的devDependencies字段信息\r#3.在package.json中新增config.commitizen字段信息，主要用于配置cz工具的适配器路径 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:2:1","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Commitizen校验 2.项目内安装commitlint \u0026 husky #安装\rnpm install --save-dev @commitlint/config-conventional @commitlint/cli\r#添加规范\recho \"module.exports = {extends: ['@commitlint/config-conventional']};\" \u003e commitlint.config.js\r#即在项目根目录下`D:\\code\\gbcom_gitlab\\SH_JC_Android\\commitlint.config.js`添加如下内容。\rmodule.exports = {\rextends: ['@commitlint/config-conventional']\r};\r#安装git钩子工具\rnpm install husky --save-dev\r#在项目根目录下的package.json中配置git commit提交时的校验钩子`D:\\code\\gbcom_gitlab\\SH_JC_Android\\package.json`\r\"husky\": {\r\"hooks\": {\r\"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\r}\r}\r#上面的commit-msg代表对 commit message 进行 hook，hook 的时候执行后面的命令 commitlint -E HUSKY_GIT_PARAMS 进行检查。\r#安装husky后在package.json中添加脚本\r{\r\"devDependencies\": {\r\"@commitlint/cli\": \"^17.6.3\",\r\"@commitlint/config-conventional\": \"^17.6.3\",\r\"commitlint-config-cz\": \"^0.13.3\",\r\"commitlint-config-git-commit-emoji\": \"^1.0.0\",\r\"cz-customizable\": \"^7.0.0\",\r\"husky\": \"^7.0.1\"\r},\r\"scripts\": {\r+ \"prepare\": \"husky install\",\r\"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\",\r\"changelogs\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\",\r\"commit\": \"cz-customizable\"\r}\r}\r#添加 commit-msg 钩子,执行信息校验，其实就是在.husky/commit-msg文件中添加【npx --no-install commitlint --edit \"$1\"】\rnpx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\r# validate-commit-msg\r# 除了使用commitlint校验工具，也可以使用validate-commit-msg校验工具对cz提交说明是否符合Angular规范进行校验。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:2:2","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装的依赖 C:\\Users\\daizelai\\AppData\\Roaming\\npm\\node_modules C:\\Users\\daizelai\\AppData\\Roaming\\npm\\node_modules\u003edir\r驱动器 C 中的卷没有标签。\r卷的序列号是 1A38-870C\rC:\\Users\\daizelai\\AppData\\Roaming\\npm\\node_modules 的目录\r2023/05/11 14:04 \u003cDIR\u003e .\r2023/05/11 14:04 \u003cDIR\u003e ..\r2023/05/11 09:37 \u003cDIR\u003e commitizen\r2023/05/04 16:54 \u003cDIR\u003e conventional-changelog\r2023/05/11 14:04 \u003cDIR\u003e conventional-changelog-cli\r2023/05/11 09:48 \u003cDIR\u003e cz-conventional-changelog\r2023/05/11 10:47 \u003cDIR\u003e git-cz\r0 个文件 0 字节\r7 个目录 3,261,562,880 可用字节\rC:\\Users\\daizelai\\AppData\\Roaming\\npm\\node_modules\u003e ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:2:3","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装可自定义的cz适配器 因为commitizen只支持英文，如果我想要支持中文指令和emoji，那么就必须安装可自定义的cz适配器了 npm i -D commitlint-config-cz cz-customizable commitlint-config-git-commit-emoji 配置项目根目录的.cz-config.js文件内容： module.exports = { types: [ { value: '✨ feat', name: '✨ feat: 新功能' }, { value: '🐛 fix', name: '🐛 fix: 修复bug' }, { value: '📦 build', name: '📦️ build: 打包' }, { value: '⚡ perf', name: '⚡️ perf: 性能优化' }, { value: '🎉 release', name: '🎉 release: 发布正式版' }, { value: '💄 style', name: '💄 style: 代码的样式美化' }, { value: '♻️ refactor', name: '♻️ refactor: 重构' }, { value: '✏️ docs', name: '✏️ docs: 文档变更' }, { value: '✅ test', name: '✅ test: 测试' }, { value: '⏪ revert', name: '⏪️ revert: 回退' }, { value: '🚀 chore', name: '🚀 chore: 构建/工程依赖/工具' }, { value: '👷‍♂️ ci', name: '👷 ci: CI related changes' } ], messages: { type: '请选择提交类型(必填)', customScope: '请输入文件修改范围(可选)', subject: '请简要描述提交(必填)', body: '请输入详细描述(可选)', breaking: '列出任何BREAKING CHANGES(可选)', footer: '请输入要关闭的issue(可选)', confirmCommit: '确定提交此说明吗？' }, allowCustomScopes: true, // 跳过问题 skipQuestions: ['body', 'footer'], subjectLimit: 72 } 将cz-customizable脚本添加到您的package.json //#npm set-script commit \"git add . \u0026\u0026 cz-customizable\" { \"devDependencies\": { \"@commitlint/cli\": \"^17.6.3\", \"@commitlint/config-conventional\": \"^17.6.3\", \"commitlint-config-cz\": \"^0.13.3\", \"commitlint-config-git-commit-emoji\": \"^1.0.0\", \"cz-customizable\": \"^7.0.0\", \"husky\": \"^7.0.1\" }, \"scripts\": { \"prepare\": \"husky install\", \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\", \"changelogs\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\", + \"commit\": \"cz-customizable\" } } ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:2:4","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"commitizen 当你使用commitizen进行代码提交（gitcommit）时，commitizen会提交你在提交时填写所有必需的提交字段 commitizen是一个撰写合格commit message的工具，用于代替git commit 指令，而cz-conventional-changelog适配器提供conventional-changelog标准（约定式提交标准）。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:3:0","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:0","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装commitizen 首先要全局安装commitizen npm i -g commitizen@4.2.4 然后安装插件 npm i cz-customizable@6.3.0 --save-dev 也可以直接全局安装commitizen \u0026 cz-conventional-changelog npm install -g commitizen cz-conventional-changelog\recho '{ \"path\": \"cz-conventional-changelog\" }' \u003e ~/.czrc 正式安装 来的安装过程： PS C:\\Users\\daizelai\u003e npm -v\r9.5.1\rPS C:\\Users\\daizelai\u003e date\r2023年5月11日 9:36:43\rPS C:\\Users\\daizelai\u003e npm install -g commitizen\radded 191 packages in 1m\r24 packages are looking for funding\rrun `npm fund` for details\rPS C:\\Users\\daizelai\u003e npm fund\rdaizelai\rPS C:\\Users\\daizelai\u003e ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:1","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"全局安装适配器 cz-customizable和cz-conventional-changelog一样，也是commitizen的adapter，不过支持一定程度上的自定义。 npm install -g cz-conventional-changelog\r# 有的是安装下面这个，来没有这么安装\rnpm install -g conventional-changelog\rnpm install -g conventional-changelog-cli 来的安装过程： PS C:\\Users\\daizelai\u003e npm install -g cz-conventional-changelog\radded 191 packages in 28s\r24 packages are looking for funding\rrun `npm fund` for details\rPS C:\\Users\\daizelai\u003e 检验上面的工具是否安装成功，可以输入以下npm ls -g -depth=0命令。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm ls -g -depth=0\rC:\\Users\\daizelai\\AppData\\Roaming\\npm\r+-- commitizen@4.3.0\r+-- conventional-changelog@3.1.25\r+-- cz-conventional-changelog@3.3.0\r`-- git-cz@4.9.0\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 来后来又安装了一下，下面的命令安装cz-conventional-changelog, 并且初始化cz-conventional-changelog。 C:\\Users\\daizelai\u003enpx commitizen init cz-conventional-changelog --save-dev --save-exact\rAttempting to initialize using the npm package cz-conventional-changelog\rError: Error: A previous adapter is already configured. Use --force to override\radapterConfig.path: cz-conventional-changelog\rrepoPath: C:\\Users\\daizelai\rCLI_PATH: C:\\Users\\daizelai\\AppData\\Roaming\\npm\\node_modules\\commitizen\\\rinstallAdapterCommand: npm install cz-conventional-changelog --save-dev\radapterNpmName: cz-conventional-changelog\rC:\\Users\\daizelai\u003enpx commitizen init cz-conventional-changelog --save-dev --save-exact --force\rAttempting to initialize using the npm package cz-conventional-changelog\rnpm WARN using --force Recommended protections disabled.\rC:\\Users\\daizelai\u003e ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:2","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"配置 如果你是mac用户，运行下面这条命令，它会在你的home目录下，创建一个.czrc文件。路径指向刚才全局安装的适配器。 echo '{ \"path\": \"cz-conventional-changelog\" }' \u003e ~/.czrc 如果你是windows用户，请把下面这条命令中的C:\\Users\\daizelai更换成你自己电脑上的\\Users\\username目录再运行。这条命令的本质其实就是在Users\\username目录下创建一个内容为{ \"path\": \"cz-conventional-changelog\" }的.czrc文件。 echo { \"path\": \"cz-conventional-changelog\" } \u003e C:\\Users\\daizelai\\.czrc 来的操作过程： daizelai@GBCOM-20210524I MINGW64 ~\r$ date\rThu May 11 09:45:44 2023\rdaizelai@GBCOM-20210524I MINGW64 ~\r$ pwd\r/c/Users/daizelai\rdaizelai@GBCOM-20210524I MINGW64 ~\r$ ls -l .czrc\rls: cannot access '.czrc': No such file or directory\rdaizelai@GBCOM-20210524I MINGW64 ~\r$ echo '{ \"path\": \"cz-conventional-changelog\" }' \u003e .czrc\rdaizelai@GBCOM-20210524I MINGW64 ~\r$ ls -l .czrc\r-rw-r--r-- 1 daizelai 197121 36 May 11 09:46 .czrc\rdaizelai@GBCOM-20210524I MINGW64 ~\r$ cat .czrc\r{ path: cz-conventional-changelog }\rdaizelai@GBCOM-20210524I MINGW64 ~\r$ 一定要检查一下.czrc的文件内容： { \"path\": \"cz-conventional-changelog\" } 将这个.czrc文件转换为utf8格式，因为Git-bash只认utf8格式的该文件。 当然，也可以直接配置json，不生成.czrc文件 \"config\": { \"commitizen\": { \"path\": \"cz-conventional-changelog\" } } 已经完成了Commitizen的全局安装！你可以在任何一个git仓库中使用git cz，而不是git commit。另外，你可以在git cz上使用git commit的所有参数，比如git cz -a。如果项目和全局都安装过Commitizen，那么会使用项目中的Commitizen适配器，而不是全局的。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:3","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"使用 下面是通过Git Bash中执行git cz命令后，无法使用键盘的上下箭头来选择提交类型，不过可以直接输入类型关键字就可以了，如输入fix后回车，后面有介绍说可以重新安装一个git-cz来解决此问题。 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/SH_JC_Android (master)\r$ git cz\rcz-cli@4.3.0, cz-conventional-changelog@3.3.0\r// 这次提交的类型是什么\r? Select the type of change that you're committing: (Use arrow keys)\r\u003e feat: A new feature // 新增特性（feature)\rfix: A bug fix // 修复bug(bug fix)\rdocs: Documentation only changes // 修改文档\rstyle: Changes that do not affect the meaning of the code (white-space,\rformatting, missing semi-colons, etc) // 代码格式修改\rrefactor: A code change that neither fixes a bug nor adds a feature // 代码重构\rperf: A code change that improves performance // 改善性能\rtest: Adding missing tests or correcting existing tests // 测试\rbuild: Changes that affect the build system or external dependencies (example\rscopes: gulp, broccoli, npm) // 变更项目构建或外部依赖（例如 scopes:webpack、gulp、npm等）\rci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs\r) // 更改持续集成软件的配置文件和package中的script 命令\rchore: Other changes that don't modify src or test files // 变更构建流程或辅助工具（比如更改测试环境）\rrevert: Reverts a previous commit // 代码回退\r(Move up and down to reveal more choices)\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/SH_JC_Android (master)\r$ 但是通过windows的终端命令行中，使用git cz命令就可以使用键盘的上下箭头来选择提交类型。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 13:28:11.28\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003egit status\rOn branch master\rYour branch is up to date with 'origin/master'.\rChanges to be committed:\r(use \"git restore --staged \u003cfile\u003e...\" to unstage)\rmodified: zte/app/build.gradle\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003egit cz\r? Select the type of change that you're committing: 🐛 fix: A bug fix\r? Write a short, imperative mood description of the change:\r[-------------------------------------------------------------] 56 chars left\rfix: 修复了通话时没有声音的BUG\r? Provide a longer description of the change:\r通过修复通话的业务代码，修复了组呼通话时没有声音的BUG。\r? List any breaking changes // 选择是否有不兼容改造点breaking，如果有输入不兼容改造点描述：\rBREAKING CHANGE:\r? Issues this commit closes, e.g #123: #110 // 选择是否有问题解决issues，如果有输入解决的问题清单\r[master 972ecce] fix: 🐛 修复了通话时没有声音的BUG\r1 file changed, 1 insertion(+), 1 deletion(-)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003egit log -n 1\rcommit 972ecce6e508a62d5c8ecbc0000ab04838b7250f (HEAD -\u003e master)\rAuthor: daizelai \u003cdaizelai@gbcom.com.cn\u003e\rDate: Thu May 11 13:28:51 2023 +0800\rfix: 🐛 修复了通话时没有声音的BUG\r通过修复通话的业务代码，修复了组呼通话时没有声音的BUG。\r✅ Closes: #110\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003egit reflog -n 1\r972ecce (HEAD -\u003e master) HEAD@{0}: commit: fix: 🐛 修复了通话时没有声音的BUG\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:4","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装git-cz 在window系统下的Git Bash会有一个问题，window系统下使用git cz后无法上下选择本次提交的类型，这里给大家介绍一个工具，在你git cz前面加上“winpty”，即可实现上下选择。 npm install -g git-cz\rgit-cz 使用时输入如下命令即可。 winpty git cz 下面是来的安装过程记录： C:\\Users\\daizelai\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rC:\\Users\\daizelai\u003enpm install -g git-cz\rnpm ERR! code EEXIST\rnpm ERR! path C:\\Users\\daizelai\\AppData\\Roaming\\npm\\git-cz\rnpm ERR! EEXIST: file already exists\rnpm ERR! File exists: C:\\Users\\daizelai\\AppData\\Roaming\\npm\\git-cz\rnpm ERR! Remove the existing file and try again, or run npm\rnpm ERR! with --force to overwrite files recklessly.\rnpm ERR! A complete log of this run can be found in:\rnpm ERR! C:\\Users\\daizelai\\AppData\\Local\\npm-cache\\_logs\\2023-05-11T02_46_00_443Z-debug-0.log\rC:\\Users\\daizelai\u003enpm install -g git-cz --force\rnpm WARN using --force Recommended protections disabled.\radded 1 package in 54s\rC:\\Users\\daizelai\u003egit-cz\rCommand failed: git diff --cached --no-ext-diff --name-only\rerror: unknown option `cached'\rusage: git diff --no-index [\u003coptions\u003e] \u003cpath\u003e \u003cpath\u003e\rDiff output format options\r-p, --patch generate patch\r-s, --no-patch suppress diff output\r-u generate patch\r-U, --unified[=\u003cn\u003e] generate diffs with \u003cn\u003e lines context\r-W, --function-context\rgenerate diffs with \u003cn\u003e lines context\r--raw generate the diff in raw format\r--patch-with-raw synonym for '-p --raw'\r--patch-with-stat synonym for '-p --stat'\r--numstat machine friendly --stat\r--shortstat output only the last line of --stat\r-X, --dirstat[=\u003cparam1,param2\u003e...]\routput the distribution of relative amount of changes for each sub-directory\r--cumulative synonym for --dirstat=cumulative\r--dirstat-by-file[=\u003cparam1,param2\u003e...]\rsynonym for --dirstat=files,param1,param2...\r--check warn if changes introduce conflict markers or whitespace errors\r--summary condensed summary such as creations, renames and mode changes\r--name-only show only names of changed files\r--name-status show only names and status of changed files\r--stat[=\u003cwidth\u003e[,\u003cname-width\u003e[,\u003ccount\u003e]]]\rgenerate diffstat\r--stat-width \u003cwidth\u003e generate diffstat with a given width\r--stat-name-width \u003cwidth\u003e\rgenerate diffstat with a given name width\r--stat-graph-width \u003cwidth\u003e\rgenerate diffstat with a given graph width\r--stat-count \u003ccount\u003e generate diffstat with limited lines\r--compact-summary generate compact summary in diffstat\r--binary output a binary diff that can be applied\r--full-index show full pre- and post-image object names on the \"index\" lines\r--color[=\u003cwhen\u003e] show colored diff\r--ws-error-highlight \u003ckind\u003e\rhighlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\r-z do not munge pathnames and use NULs as output field terminators in --raw or --numstat\r--abbrev[=\u003cn\u003e] use \u003cn\u003e digits to display object names\r--src-prefix \u003cprefix\u003e\rshow the given source prefix instead of \"a/\"\r--dst-prefix \u003cprefix\u003e\rshow the given destination prefix instead of \"b/\"\r--line-prefix \u003cprefix\u003e\rprepend an additional prefix to every line of output\r--no-prefix do not show any source or destination prefix\r--inter-hunk-context \u003cn\u003e\rshow context between diff hunks up to the specified number of lines\r--output-indicator-new \u003cchar\u003e\rspecify the character to indicate a new line instead of '+'\r--output-indicator-old \u003cchar\u003e\rspecify the character to indicate an old line instead of '-'\r--output-indicator-context \u003cchar\u003e\rspecify the character to indicate a context instead of ' '\rDiff rename options\r-B, --break-rewrites[=\u003cn\u003e[/\u003cm\u003e]]\rbreak complete rewrite changes into pairs of delete and create\r-M, --find-renames[=\u003cn\u003e]\rdetect renames\r-D, --irreversible-delete\romit the preimage for deletes\r-C, --find-copies[=\u003cn\u003e]\rdetect copies\r--find-copies-harder use unmodified files as source to find copies\r--no-renames disable rename detection\r--rename-empty use empty blobs as rename source\r--follow continue listing the history of a file beyond renames\r-l \u003cn\u003e prevent rename/copy detection if the number of rename/copy targets exceeds given limit\rDiff algorithm options\r--minimal produce the smallest possible diff\r-w, --ignore-all-s","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:5","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装可自定义的cz适配器 因为commitizen只支持英文，如果我想要支持中文指令和emoji，那么就必须安装可自定义的cz适配器了 npm i -D commitlint-config-cz cz-customizable commitlint-config-git-commit-emoji 来后来又安装了。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/12 周五\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm i -D commitlint-config-cz cz-customizable\radded 52 packages, and audited 254 packages in 10s\r30 packages are looking for funding\rrun `npm fund` for details\rfound 0 vulnerabilities\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 10:42:30.03\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 在项目根目录创建.cz-config.js文件 echo \u003e .cz-config.js 配置.cz-config.js文件内容： module.exports = { types: [ { value: '✨ feat', name: '✨ feat: 新功能' }, { value: '🐛 fix', name: '🐛 fix: 修复bug' }, { value: '📦 build', name: '📦️ build: 打包' }, { value: '⚡ perf', name: '⚡️ perf: 性能优化' }, { value: '🎉 release', name: '🎉 release: 发布正式版' }, { value: '💄 style', name: '💄 style: 代码的样式美化' }, { value: '♻️ refactor', name: '♻️ refactor: 重构' }, { value: '✏️ docs', name: '✏️ docs: 文档变更' }, { value: '✅ test', name: '✅ test: 测试' }, { value: '⏪ revert', name: '⏪️ revert: 回退' }, { value: '🚀 chore', name: '🚀 chore: 构建/工程依赖/工具' }, { value: '👷‍♂️ ci', name: '👷 ci: CI related changes' } ], messages: { type: '请选择提交类型(必填)', customScope: '请输入文件修改范围(可选)', subject: '请简要描述提交(必填)', body: '请输入详细描述(可选)', breaking: '列出任何BREAKING CHANGES(可选)', footer: '请输入要关闭的issue(可选)', confirmCommit: '确定提交此说明吗？' }, allowCustomScopes: true, // 跳过问题 skipQuestions: ['body', 'footer'], subjectLimit: 72 } 将cz-customizable脚本添加到您的 package.json //#npm set-script commit \"git add . \u0026\u0026 cz-customizable\" { \"devDependencies\": { \"@commitlint/cli\": \"^17.6.3\", \"@commitlint/config-conventional\": \"^17.6.3\", \"commitlint-config-cz\": \"^0.13.3\", \"commitlint-config-git-commit-emoji\": \"^1.0.0\", \"cz-customizable\": \"^7.0.0\", \"husky\": \"^7.0.1\" }, \"scripts\": { \"prepare\": \"husky install\", \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\", \"changelogs\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\", + \"commit\": \"cz-customizable\" } } 上面就可以在命令行输入npm run commit了。 安装emoji插件，来实际使用中中文的表情显示都是乱码，使用notepad++修改.cz-config.js文件里的内容格式为UTF8无BOM就可以了。如果发现中文显示正常，但表情是乱码，请注意一下.cz-config.js文件内容中的表情是否就是乱码，只要在.cz-config.js文件为UTF8的格式下重新拷贝上面的json内容到.cz-config.js文件中就可以了。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm i -D commitlint-config-git-commit-emoji\radded 1 package, and audited 255 packages in 1s\r30 packages are looking for funding\rrun `npm fund` for details\rfound 0 vulnerabilities\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/12 周五\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 10:57:56.93\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 下面是安装后的使用。 PS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e date\r2023年5月12日 11:19:16\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e npm run commit\r\u003e cz-customizable\rcz-customizable standalone version\rAll lines except first will be wrapped after 100 characters.\r? 请选择提交类型(必填) (Use arrow keys)\r\u003e ✨ feat: 新功能\r🐛 fix: 修复bug\r📦️ build: 打包\r⚡️ perf: 性能优化\r🎉 release: 发布正式版\r💄 style: 代码的样式美化\r♻️ refactor: 重构\r(Move up and down to reveal more choices)\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:6","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"关于chagelog changelog使用，在项目第一层目录执行如下命令： #追加\rconventional-changelog -p angular -i CHANGELOG.md -s\r#全量生成\rconventional-changelog -p angular -i CHANGELOG.md -s -r 0 -p 指定风格* -i CHANGELOG.md 指定输出的文件名称 -s 输出到infile，这样就不需要指定与outfile相同的文件 -r 从最新的版本生成多少个版本。如果为0，则整个更改日志将被重新生成，输出文件将被覆盖。默认值:1 -n ./changelog-option.js 指定自定义配置 成功后将在项目生成 CHANGELOG.md 文件，在git lab上即可直观的展示git的提交记录。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003econventional-changelog -p angular -i CHANGELOG.md -s\r'conventional-changelog' 不是内部或外部命令，也不是可运行的程序\r或批处理文件。\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 13:51:19.65\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm install -g conventional-changelog-cli\rnpm WARN deprecated uuid@3.4.0: Please upgrade to version 7 or higher. Older versions may use Math.random() in certain circumstances, which is known to be problematic. See https://v8.dev/blog/math-random for details.\radded 168 packages in 14m\r15 packages are looking for funding\rrun `npm fund` for details\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 14:05:51.15\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003econventional-changelog -p angular -i CHANGELOG.md -s\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 下面是生成的changelog文件内容： # (2023-05-11)\r### Bug Fixes\r* 🐛 修复了通话时没有声音的BUG ([972ecce](https://gitlab.gbcom.com.cn/metro-system/sh_jc/commit/972ecce6e508a62d5c8ecbc0000ab04838b7250f)), closes [#110](https://gitlab.gbcom.com.cn/metro-system/sh_jc/issues/110) 集成命令 路径：D:\\code\\gbcom_gitlab\\SH_JC_Android\\package.json { \"devDependencies\": { \"@commitlint/cli\": \"^17.6.3\", \"@commitlint/config-conventional\": \"^17.6.3\", \"husky\": \"^7.0.1\" }, \"scripts\": { \"prepare\": \"husky install\", + \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\", + \"changelogs\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\" }, \"lint-staged\": { \"src/**/*.{js,vue}\": [ \"eslint --fix\", \"git add\" ] } } 在命令行就可以执行命令了 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm run changelog\r\u003e changelog\r\u003e conventional-changelog -p angular -i CHANGELOG.md -s\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm run changelogs\r\u003e changelogs\r\u003e conventional-changelog -p angular -i CHANGELOG.md -s -r 0\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 查看工具安装情况 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 14:26:22.09\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm ls -g -depth=0\rC:\\Users\\daizelai\\AppData\\Roaming\\npm\r+-- commitizen@4.3.0\r+-- conventional-changelog-cli@2.2.2\r+-- conventional-changelog@3.1.25\r+-- cz-conventional-changelog@3.3.0\r`-- git-cz@4.9.0\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:4:7","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"提交规范校验 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:0","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"描述 程序员如果忘记执行git cz命令怎么办？ 约定式提交规范 commitizen：git 提交规范化工具 commitlint：用于检查提交信息 pre-commit： git hooks 钩子 lint-staged：只检查本次修改更新的代码，并在出现错误的时候，自动修复并且推送 使用 husky + commitlint 检查提交描述是否符合规范要求 commitlint：用于检查提交信息 husky：是git hooks工具 注意：npm 需要在 7.x 以上版本！！！！！ 安装commitlint 1、npm install –save-dev @commitlint/config-conventional@12.1.4 @commitlint/cli@12.1.4 2、创建 commitlint.config.js 文件 说明 @commitlint/cli: commitlint 的 CLI 工具 @commitlint/config-conventional: commitlint 的 conventional 规范配置方案，这是一个从 config-angular 衍生出的一个分支 husky: 一款 git hook 工具，可以 hook git 的命令 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:1","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装校验工具 校验提交说明是否符合规范，安装校验工具commitlint。 安装符合Angular风格的校验规则@commitlint/config-conventional。 #安装\rnpm install --save-dev @commitlint/config-conventional @commitlint/cli\r#添加规范\recho \"module.exports = {extends: ['@commitlint/config-conventional']};\" \u003e commitlint.config.js 下面是命令执行过程： D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 15:27:31.51\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm install --save-dev @commitlint/config-conventional @commitlint/cli\radded 200 packages in 11m\r28 packages are looking for funding\rrun `npm fund` for details\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 15:40:22.36\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 在项目中新建commitlint.config.js文件并设置校验规则。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 8AC9-706C\rD:\\code\\gbcom_gitlab\\SH_JC_Android 的目录\r2023/05/11 15:38 \u003cDIR\u003e .\r2023/05/11 15:38 \u003cDIR\u003e ..\r2022/11/04 18:43 247 .gitignore\r2023/05/08 18:57 \u003cDIR\u003e .gitlab\r2023/05/11 14:24 262 CHANGELOG.md\r2023/05/09 10:35 \u003cDIR\u003e doc\r2023/05/11 15:38 \u003cDIR\u003e node_modules\r2023/05/11 15:38 81,136 package-lock.json\r2023/05/11 15:38 114 package.json\r2023/05/08 19:07 129 README.md\r2023/05/09 10:21 \u003cDIR\u003e td\r2023/05/09 09:25 \u003cDIR\u003e zte\r5 个文件 81,888 字节\r7 个目录 42,581,184,512 可用字节\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003eecho \"module.exports = {extends: ['@commitlint/config-conventional']};\" \u003e commitlint.config.js\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003edir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 8AC9-706C\rD:\\code\\gbcom_gitlab\\SH_JC_Android 的目录\r2023/05/11 15:44 \u003cDIR\u003e .\r2023/05/11 15:44 \u003cDIR\u003e ..\r2022/11/04 18:43 247 .gitignore\r2023/05/08 18:57 \u003cDIR\u003e .gitlab\r2023/05/11 14:24 262 CHANGELOG.md\r2023/05/11 15:44 69 commitlint.config.js\r2023/05/09 10:35 \u003cDIR\u003e doc\r2023/05/11 15:38 \u003cDIR\u003e node_modules\r2023/05/11 15:38 81,136 package-lock.json\r2023/05/11 15:38 114 package.json\r2023/05/08 19:07 129 README.md\r2023/05/09 10:21 \u003cDIR\u003e td\r2023/05/09 09:25 \u003cDIR\u003e zte\r6 个文件 81,957 字节\r7 个目录 42,581,118,976 可用字节\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 文件内容如下： module.exports={ extends: ['@commitlint/config-conventional'] }; 注意：确保保存为 UTF-8 的编码格式，否则可能报错 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:2","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装husky 安装依赖 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edate\r当前日期: 2023/05/11 周四\r输入新日期: (年月日)\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003etime\r当前时间: 15:53:35.59\r输入新时间:\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm install husky@7.0.1 --save-dev\radded 1 package, and audited 202 packages in 4s\r29 packages are looking for funding\rrun `npm fund` for details\rfound 0 vulnerabilities\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 启动hooks 启动hooks，生成 .husky 文件夹 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003edir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 8AC9-706C\rD:\\code\\gbcom_gitlab\\SH_JC_Android 的目录\r2023/05/11 15:44 \u003cDIR\u003e .\r2023/05/11 15:44 \u003cDIR\u003e ..\r2022/11/04 18:43 247 .gitignore\r2023/05/08 18:57 \u003cDIR\u003e .gitlab\r2023/05/11 14:24 262 CHANGELOG.md\r2023/05/11 15:44 69 commitlint.config.js\r2023/05/09 10:35 \u003cDIR\u003e doc\r2023/05/11 15:53 \u003cDIR\u003e node_modules\r2023/05/11 15:53 81,619 package-lock.json\r2023/05/11 15:53 137 package.json\r2023/05/08 19:07 129 README.md\r2023/05/09 10:21 \u003cDIR\u003e td\r2023/05/09 09:25 \u003cDIR\u003e zte\r6 个文件 82,463 字节\r7 个目录 42,580,422,656 可用字节\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpx husky install\rhusky - Git hooks installed\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003edir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 8AC9-706C\rD:\\code\\gbcom_gitlab\\SH_JC_Android 的目录\r2023/05/11 15:55 \u003cDIR\u003e .\r2023/05/11 15:55 \u003cDIR\u003e ..\r2022/11/04 18:43 247 .gitignore\r2023/05/08 18:57 \u003cDIR\u003e .gitlab\r2023/05/11 15:55 \u003cDIR\u003e .husky\r2023/05/11 14:24 262 CHANGELOG.md\r2023/05/11 15:44 69 commitlint.config.js\r2023/05/09 10:35 \u003cDIR\u003e doc\r2023/05/11 15:53 \u003cDIR\u003e node_modules\r2023/05/11 15:53 81,619 package-lock.json\r2023/05/11 15:53 137 package.json\r2023/05/08 19:07 129 README.md\r2023/05/09 10:21 \u003cDIR\u003e td\r2023/05/09 09:25 \u003cDIR\u003e zte\r6 个文件 82,463 字节\r8 个目录 42,580,422,656 可用字节\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 生成prepare指令 在package.json中生成prepare指令（需要 npm \u003e 7.0 版本 ），这里一直失败，一直失败，一直失败。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm set-script prepare \"husky install\"\rUnknown command: \"set-script\"\rDid you mean this?\rnpm run-script # Run arbitrary package scripts\rTo see a list of supported npm commands, run:\rnpm help\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 这里直接在json文件中配置一下也可以。 路径：D:\\code\\gbcom_gitlab\\SH_JC_Android\\package.json { \"devDependencies\": { \"@commitlint/cli\": \"^17.6.3\", \"@commitlint/config-conventional\": \"^17.6.3\", \"husky\": \"^7.0.1\" }, \"scripts\": { + \"prepare\": \"husky install\" } } 然后在项目根目录下的package.json就添加了一行\"husky\": \"^7.0.1\"。 {\r\"devDependencies\": {\r\"@commitlint/cli\": \"^17.6.3\",\r\"@commitlint/config-conventional\": \"^17.6.3\",\r\"husky\": \"^7.0.1\"\r}\r} 执行 prepare 指令 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpm run prepare\rnpm ERR! Missing script: \"prepare\"\rnpm ERR!\rnpm ERR! To see a list of scripts, run:\rnpm ERR! npm run\rnpm ERR! A complete log of this run can be found in:\rnpm ERR! C:\\Users\\daizelai\\AppData\\Local\\npm-cache\\_logs\\2023-05-11T08_09_04_751Z-debug-0.log\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 2023/05/11 16:51手动在p中添加配置： {\r\"devDependencies\": {\r\"@commitlint/cli\": \"^17.6.3\",\r\"@commitlint/config-conventional\": \"^17.6.3\",\r\"husky\": \"^7.0.1\"\r},\r+ \"scripts\": {\r+ \"prepare\": \"husky install\"\r+ }\r} 再执行npm run prepare命令。 PS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e npm run prepare\r\u003e prepare\r\u003e echo \"在npm i之前会自动执行\"\r\"在npm i之前会自动执行\"\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 添加commitlint的hook到husky中 添加 commitlint 的 hook 到 husky中，并指令在 commit-msg 的 hooks 下执行 npx –no-install commitlint –edit “$1” 指令 下面是在cmd命令行执行，没有成功。 D:\\code\\gbcom_gitlab\\SH_JC_Android\u003enpx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\rUsage:\rhusky install [dir] (default: .husky)\rhusky uninstall\rhusky set|add \u003cfile\u003e [cmd]\rD:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 下面是在以管理员权限打开的Windows PowerShell中执行成功的。 PS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e npx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\rhusky - created .husky/commit-msg\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 文件结构 目录结构如下： PS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e dir .husky\r目录: D:\\code\\gbcom_gitlab\\SH_JC_Android\\.husky\rMode LastWriteTime Length Name\r---- ------------- ------ ----\rd----- 2023/5/11 15:55 _\r-a---- 2023/5/11 16:15 80 commit-msg\rPS D:\\code\\gbcom_","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:3","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"通过 pre-commit 检测提交时代码规范 描述 通过 husky 监测 pre-commit 钩子，在该钩子下执行 npx eslint –ext .js,.vue src 指令来去进行相关检测 配置pre-commit 执行 npx husky add .husky/pre-commit “npx eslint –ext .js,.vue src” 添加 commit 时的 hook （npx eslint –ext .js,.vue src 会在执行到该 hook 时运行） npx husky add .husky/pre-commit \"npx eslint --ext .js,.vue src\" 来在【管理员：Windows PowerShell】的执行命令记录如下： PS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e date\r2023年5月11日 18:51:56\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e npx husky add .husky/pre-commit \"npx eslint --ext .js,.vue src\"\rhusky - created .husky/pre-commit\rPS D:\\code\\gbcom_gitlab\\SH_JC_Android\u003e 该操作会生成对应文件 pre-commit： D:\\code\\gbcom_gitlab\\SH_JC_Android\\.husky\u003edir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 8AC9-706C\rD:\\code\\gbcom_gitlab\\SH_JC_Android\\.husky 的目录\r2023/05/11 18:52 \u003cDIR\u003e .\r2023/05/11 18:52 \u003cDIR\u003e ..\r2023/05/11 16:15 80 commit-msg\r2023/05/11 18:52 72 pre-commit\r2023/05/11 15:55 \u003cDIR\u003e _\r2 个文件 152 字节\r3 个目录 42,560,450,560 可用字节\rD:\\code\\gbcom_gitlab\\SH_JC_Android\\.husky\u003e pre-commit的内容如下： #!/bin/sh\r. \"$(dirname \"$0\")/_/husky.sh\"\rnpx eslint --ext .js,.vue src ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:4","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"lint-staged 自动修复格式错误 描述 lint-staged 可以让你当前的代码检查 只检查本次修改更新的代码，并在出现错误的时候，自动修复并且推送 lint-staged 无需单独安装，我们生成项目时，vue-cli 已经帮助我们安装过了，所以我们直接使用就可以了 修改 package.json 配置 { \"devDependencies\": { \"@commitlint/cli\": \"^17.6.3\", \"@commitlint/config-conventional\": \"^17.6.3\", \"husky\": \"^7.0.1\" }, \"scripts\": { \"prepare\": \"husky install\" }, + \"lint-staged\": { + \"src/**/*.{js,vue}\": [ + \"eslint --fix\", + \"git add\" + ] } } 说明 如上配置，每次它只会在你本地 commit 之前，校验你提交的内容是否符合你本地配置的 eslint规则(这个见文档ESLint)，校验会出现两种结果： 如果符合规则：则会提交成功。 如果不符合规则：它会自动执行 eslint –fix 尝试帮你自动修复，如果修复成功则会帮你把修复好的代码提交，如果失败，则会提示你错误，让你修好这个错误之后才能允许你提交代码。 修改.husky/pre-commit文件 #!/bin/sh\r. \"$(dirname \"$0\")/_/husky.sh\"\rnpx eslint --ext .js,.vue src\r+ npx lint-staged 再次执行提交代码，发现 暂存区中 不符合 ESlint 的内容，被自动修复。 在项目的package.json中添加commit钩子(设置校验规则) { \"husky\": { \"hooks\": { \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\" } } } commit-msg 代表对 commit message 进行 hook，hook 的时候执行后面的命令 commitlint -E HUSKY_GIT_PARAMS 进行检查。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:5","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Husky 对于husky用户，在package.json中添加下列配置： \"husky\": {\r\"hooks\": {\r\"prepare-commit-msg\": \"exec \u003c /dev/tty \u0026\u0026 npx cz --hook || true\"\r}\r} ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:5:6","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"新git项目的使用 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:6:0","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"描述 今天准备使用git提交深圳14号线的代码，记录一下使用过程。 git项目使用git提交规范。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:6:1","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"安装husky 1.先初始话cz-conventional-changelog PS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e git cz\r× error No files staged!\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e date\r2023年5月12日 14:51:38\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e commitizen init cz-conventional-changelog --save --save-exact\rcommitizen : 无法加载文件 C:\\Users\\daizelai\\AppData\\Roaming\\npm\\commitizen.ps1，因为在此系统上禁止运行脚本。有关详细信\r息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。\r所在位置 行:1 字符: 1\r+ commitizen init cz-conventional-changelog --save --save-exact\r+ ~~~~~~~~~~\r+ CategoryInfo : SecurityError: (:) []，PSSecurityException\r+ FullyQualifiedErrorId : UnauthorizedAccess\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e npx commitizen init cz-conventional-changelog --save-dev --save-exact\rAttempting to initialize using the npm package cz-conventional-changelog\rError: Error: A previous adapter is already configured. Use --force to override\radapterConfig.path: cz-conventional-changelog\rrepoPath: D:\\code\\gbcom_gitlab\\SZ14_Android_APP\rCLI_PATH: C:\\Users\\daizelai\\AppData\\Roaming\\npm\\node_modules\\commitizen\\\rinstallAdapterCommand: npm install cz-conventional-changelog --save-dev\radapterNpmName: cz-conventional-changelog\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e npx commitizen init cz-conventional-changelog --save-dev --save-exact --force\rAttempting to initialize using the npm package cz-conventional-changelog\rnpm WARN using --force Recommended protections disabled.\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e 执行上面的命令后，会生成如下文件和目录。 package.json package-lock.json node_modules 此时json文件如下： { \"devDependencies\": { \"cz-conventional-changelog\": \"^3.3.0\" }, \"config\": { \"commitizen\": { \"path\": \"./node_modules/cz-conventional-changelog\" } } } 2.安装husky PS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e date\r2023年5月12日 14:58:38\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e npm install husky --save-dev 【此命令执行完后在json中添加（\"husky\": \"^8.0.3\"）】\radded 1 package, and audited 193 packages in 3s\r25 packages are looking for funding\rrun `npm fund` for details\rfound 0 vulnerabilities\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e npx husky install\rhusky - Git hooks installed\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e 执行npx husky install后在项目根目录下生成了.husky目录。 { \"devDependencies\": { \"cz-conventional-changelog\": \"^3.3.0\", \"husky\": \"^8.0.3\" }, \"config\": { \"commitizen\": { \"path\": \"./node_modules/cz-conventional-changelog\" } } } 3.添加 husky install 到 package.json scripts 中 为了让其他人在此项目中安装依赖后也能自动创建.husky目录并指定该目录为git hooks所在的目录，我们需要在package.json里面添加一条脚本命令\"prepare\": “husky install”，然后执行npm run prepare { \"devDependencies\": { \"cz-conventional-changelog\": \"^3.3.0\", \"husky\": \"^8.0.3\" }, \"scripts\": { + \"prepare\": \"husky install\", \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\", \"changelogs\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\" }, \"config\": { \"commitizen\": { \"path\": \"./node_modules/cz-conventional-changelog\" } } } 安装好husky之后，需要配置检测规则。 ","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:6:2","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":["git","commit"],"content":"Commitlint 4.安装Commitlint 该工具用于帮助我们规范提交信息 PS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e date\r2023年5月12日 15:09:14\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e npm install @commitlint/config-conventional @commitlint/cli --save-dev\radded 116 packages, and audited 309 packages in 20s\r43 packages are looking for funding\rrun `npm fund` for details\rfound 0 vulnerabilities\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e 上面的操作修改了 { \"devDependencies\": { + \"@commitlint/cli\": \"^17.6.3\", + \"@commitlint/config-conventional\": \"^17.6.3\", \"cz-conventional-changelog\": \"^3.3.0\", \"husky\": \"^8.0.3\" }, \"scripts\": { \"prepare\": \"husky install\", \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\", \"changelogs\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\" }, \"config\": { \"commitizen\": { \"path\": \"./node_modules/cz-conventional-changelog\" } } } 5.在项目根目录创建commitlint.config.js文件 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/WH19-MetroSystem (develop)\r$ echo \"\"\u003ecommitlint.config.js module.exports = { // 忽略部分 ignores: [(commit) =\u003e commit.includes(\"init\")], // 继承的规则 extends: [\"@commitlint/config-conventional\"], // 定义规则类型 rules: { \"body-leading-blank\": [2, \"always\"], \"footer-leading-blank\": [1, \"always\"], \"header-max-length\": [2, \"always\", 108], \"subject-empty\": [2, \"never\"], \"type-empty\": [2, \"never\"], // type 类型定义，表示 git 提交的 type 必须在以下类型范围内 \"type-enum\": [ 2, \"always\", [ \"feat\", // 新增feature \"fix\", // 修复bug \"perf\", // 优化相关，比如性能、体验的提升 \"style\", // 仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑; \"docs\", // 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等; \"test\", // 测试用例，包括单元测试、集成测试等 \"refactor\", // 代码重构，没有加新功能或者修复bug \"build\", \"ci\", \"chore\", // 改变构建流程、或者增加依赖库、工具等 \"revert\", // 回滚到上一个版本 \"wip\", \"workflow\", \"types\", \"release\", ], ], }, }; 6.使用 commit-msg 钩子规范化提交信息 使用以下命令快速创建git hooks的commit-msg钩子，这样每次commit的时候都会由 commitlint对commit信息进行一次检验。 PS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e date\r2023年5月12日 15:13:17\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e npx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\rhusky - created .husky/commit-msg\rPS D:\\code\\gbcom_gitlab\\SZ14_Android_APP\u003e 上面的操作创建了D:\\code\\gbcom_gitlab\\SZ14_Android_APP\\.husky\\commit-msg文件。 #!/usr/bin/env sh . \"$(dirname -- \"$0\")/_/husky.sh\" npx --no-install commitlint --edit $1 7.提交git commit 测试 daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/SZ14_Android_APP (develop)\r$ date\rFri May 12 15:16:00 2023\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/SZ14_Android_APP (develop)\r$ git status\rOn branch develop\rYour branch is up to date with 'origin/develop'.\rChanges not staged for commit:\r(use \"git add \u003cfile\u003e...\" to update what will be committed)\r(use \"git restore \u003cfile\u003e...\" to discard changes in working directory)\rmodified: app/src/main/java/com/gbcom/subwaysystem/activity/TrainActivity.java\rmodified: app/src/main/java/com/gbcom/subwaysystem/adapter/DisListAdapter.java\rUntracked files:\r(use \"git add \u003cfile\u003e...\" to include in what will be committed)\r.husky/\rcommitlint.config.js\rnode_modules/\rpackage-lock.json\rpackage.json\rno changes added to commit (use \"git add\" and/or \"git commit -a\")\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/SZ14_Android_APP (develop)\r$ git add app/src/main/java/com/gbcom/subwaysystem/activity/TrainActivity.java app/src/main/java/com/gbcom/subwaysystem/adapter/DisListAdapter.java\rwarning: LF will be replaced by CRLF in app/src/main/java/com/gbcom/subwaysystem/adapter/DisListAdapter.java.\rThe file will have its original line endings in your working directory\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/SZ14_Android_APP (develop)\r$ git status\rOn branch develop\rYour branch is up to date with 'origin/develop'.\rChanges to be committed:\r(use \"git restore --staged \u003cfile\u003e...\" to unstage)\rmodified: app/src/main/java/com/gbcom/subwaysystem/activity/TrainActivity.java\rmodified: app/src/main/java/com/gbcom/subwaysystem/adapter/DisListAdapter.java\rUntracked files:\r(use \"git add \u003cfile\u003e...\" to include in what will be committed)\r.husky/\rcommitlint.config.js\rnode_modules","date":"2023-05-28","objectID":"https://daizelai.github.io/posts/git/gitcommit/:6:3","tags":["git","git提交","changelog"],"title":"git代码提交规范","uri":"https://daizelai.github.io/posts/git/gitcommit/"},{"categories":null,"content":"大家好，我是一名coder。 简介 出生地：中国 性别：男 年龄：38 编程经历 html/css/js asp/mysql/sql php/mysql java/mysql android/sqite kotlin ","date":"2023-05-27","objectID":"https://daizelai.github.io/about/:0:0","tags":null,"title":"关于我","uri":"https://daizelai.github.io/about/"},{"categories":["git","vs code"],"content":"20230523_1540使用vscode提交代码交合并分支 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:0:0","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"一、描述 使用Visual Studio Code对代码进行提交和分支合并。 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:1:0","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"二、提交 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:2:0","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"2.1.添加到暂存区 选把feature分支修改的代码添加到暂存区，点击Changes下文件后面的加号就可以把需要commit的文件添加到暂存区Staged Chages，实际执行的是git add 文件名命令。 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:2:1","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"2.2.提交代码 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:2:2","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"三、合并分支 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:3:0","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"3.1.切换到devlop分支 要把在开发分支feature的修改代码合并到develop分支的话，需要先切换到develop分支。 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:3:1","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"3.2.pull最新代码到本地 合并之前选择执行pull命令，让本地的develop分支代码保持最新。 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:3:2","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"3.3.选择合并分支 选择合并分支菜单。 选择要合并的分支，我们要把feature分支的代码合并到develop分支，所以这里选择feature分支。 合并成功，可以看到本地的develop分支代码已经更新了。 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:3:3","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["git","vs code"],"content":"推送到远程 本地的develop分支推送到远程的develop分支。 ","date":"2023-05-23","objectID":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/:3:4","tags":["git","git提交","vs code提交代码"],"title":"vscode提交代码交合并分支","uri":"https://daizelai.github.io/posts/git/20230523_1540%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%BA%A4%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF/gitvscode/"},{"categories":["androidx","迁移","武汉19号线"],"content":"APP项目迁移到androidx","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"20230518_0946迁移androidx ","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:0:0","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"一、描述 ","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:1:0","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"1.1.前言 因为公网SDK使用了androidx，所以项目需要迁移到androidx。 预想的迁移到androidx方案： 因为demo使用android9.0编译成功了，就想下一个android9.0的framework.jar进行开发，所有代码也适配android9.0，并且依赖升级到androidx。 APP项目使用android9.0编译开发，但涉及到framework.jar部分不管，就不用下载android源码编译framework.jar了，至于涉及到framework.jar开发的部分，后面单独开发一个APP来配置。 不管SDK使用的是android版本多少，依赖使用的是androidx也不管，APP项目还是之前的那一套，强制SDK中的依赖使用support版本。 因为最后试了，demo在android7.1环境下也可以编译并运行成功，所以只要把APP项目中所有support依赖升级到androidx就可以了。【最终采用】 成功的迁移步骤： 使用AS的Refactor的Migrate to AndroidX…，基本上自动执行。 手动修改各java文件，xml文件中的引用，使用androidx替换，这个最耗时间了，注意ctrl+shift+R全局替换。 最后就是混淆文件的修改。 ","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:1:1","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"1.2.背景 由于公网SDK中使用了androidx依赖库，而APP项目使用的进v4,v7依赖库，导致项目编译失败，所以需要把APP项目的所有依赖库也迁移到androidx依赖库。 ","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:1:2","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"二、迁移【失败】 只是简单的记录了一点点，其实中间操作了很多，因为失败，所以没怎么留下记录。 use_dingqiao_public_sdk_failure_modify_20230518_1430.patch ","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:2:0","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"三、迁移【自动+手动成功】 ","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:3:0","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"3.1.工具初始迁移 使用AS工具进行refactor。 ![开始refactor](./images/app_to_androidx_refactor_2023-05-17_193622.png 提示备份代码 备份到指定目录 现在AS会自动对APP项目进行替换各种依赖到androidx版本。 ","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:3:1","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"3.2.手动修复迁移 接着就来到手动修复时间了，AS工具不能处理所有的androidx依赖和控件的更新，剩下来的一部分就需要手动修改了。 推荐使用find搜索某一个错误的依赖或import关键字，然后集中一键替换，或手动一个一个替换，会方便好多。 源码部分 -import androidx.core.content.LocalBroadcastManager; 使用下面这个： import androidx.localbroadcastmanager.content.LocalBroadcastManager; -import android.support.v7.widget.SwitchCompat; 使用下面空上： import androidx.appcompat.widget.SwitchCompat; -import android.support.v7.app.AppCompatActivity; +import androidx.appcompat.app.AppCompatActivity; -import androidx.core.view.ViewPager; +import androidx.viewpager.widget.ViewPager; -import android.support.v4.view.PagerAdapter; +import androidx.viewpager.widget.PagerAdapter; -import androidx.core.app.Fragment; 使用： import androidx.fragment.app.Fragment; -import androidx.core.content.LocalBroadcastManager; 使用： import androidx.localbroadcastmanager.content.LocalBroadcastManager; -import androidx.core.view.ViewPager; +import androidx.viewpager.widget.ViewPager; -import android.support.v7.widget.LinearLayoutManager; 使用： import androidx.recyclerview.widget.LinearLayoutManager; -import android.support.v7.widget.ListPopupWindow; 使用： import android.widget.ListPopupWindow; 其实最终端使用AS工具自动迁移使用的是： import androidx.appcompat.widget.ListPopupWindow; -import android.support.v7.widget.RecyclerView; +import androidx.recyclerview.widget.RecyclerView; -import androidx.core.widget.SwipeRefreshLayout; 使用： import androidx.swiperefreshlayout.widget.SwipeRefreshLayout; +import androidx.fragment.app.Fragment; -import androidx.core.app.FragmentManager; 使用： import androidx.fragment.app.FragmentManager; +import androidx.fragment.app.FragmentPagerAdapter; -import androidx.core.app.FragmentTransaction; androidx使用FragmentTransaction: import androidx.fragment.app.FragmentTransaction; 特殊处理，下面的文件需要引入控件。 路径：D:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\widge\\LSeekBar.java import androidx.appcompat.widget.AppCompatSeekBar; 路径：D:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\widge\\NoScrollViewPager.java 路径：D:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\adapter\\MainAdapter.java 路径：D:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\listeners\\LEndLessOnScrollListener.java 路径：D:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\bean\\OperationLog.java 路径：D:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\fragment\\TrainIndexFragment.java import com.gbcom.subwaysystem.BR; 路径：D:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\utils\\CommonUtils.java 使用下面这个： import androidx.loader.content.CursorLoader; 路径：D:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\utils\\Converters.java -import android.arch.persistence.room.TypeConverter; 使用下面这个： import androidx.room.TypeConverter; 路径：D:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\widge\\DragFloatActionButton.java -import android.support.design.widget.FloatingActionButton; 使用下面这个： import com.google.android.material.floatingactionbutton.FloatingActionButton; xml布局部分 xml，注意修改xml标签时，如果是成对标签的话，开始标签修改后，结束标签也需要修改后。 -android.support.v4.view.ViewPager +androidx.viewpager.widget.ViewPager 老的RecyclerView -android.support.v7.widget.RecyclerView androidx使用下面的依赖 implementation 'androidx.recyclerview:recyclerview:1.2.1' \u003candroidx.recyclerview.widget.RecyclerView android:id=\"@+id/recyclerView\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /\u003e SwitchCompat控件： -android.support.v7.widget.SwitchCompat 使用依赖implementation ‘androidx.appcompat:appcompat:1.4.0’ \u003candroidx.appcompat.widget.SwitchCompat android:id=\"@+id/switchCompat\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" /\u003e NestedScrollView控件的替换： -android.support.v4.widget.NestedScrollView 使用下面这个： implementation 'androidx.core:core-ktx:1.7.0' \u003candroidx.core.widget.NestedScrollView android:id=\"","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:3:2","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"3.3.databinding的错误 如果发现所有错误都修改完了，但是一build就是下面的错误，好像是项目迁移到androidx后databinding有问题了。那么怎么解决呢？请往下看。 :app:generateDebugSources\r:app:dataBindingExportBuildInfoDebug\r:app:dataBindingExportFeaturePackageIdsDebug\r:app:dataBindingMergeDependencyArtifactsDebug\r:app:transformDataBindingBaseClassLogWithDataBindingMergeGenClassesForDebug\r:app:dataBindingGenBaseClassesDebug\r:binder:transformClassesAndResourcesWithPrepareIntermediateJarsForDebug\r:binder-compile:compileJava\r:binder-compile:processResources\r:binder-compile:classes\r:binder-compile:jar\r:eventlib:transformClassesAndResourcesWithPrepareIntermediateJarsForDebug\r:app:javaPreCompileDebug\r:binder:createFullJarDebug\r:eventlib:createFullJarDebug\r:app:compileDebugJavaWithJavacD:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\build\\generated\\data_binding_base_class_source_out\\debug\\dataBindingGenBaseClassesDebug\\out\\com\\gbcom\\subwaysystem\\databinding\\ActivityBootBinding.java:8: 错误: 找不到符号\rimport androidx.databinding.DataBindingComponent;\r^\r符号: 类 DataBindingComponent\r位置: 程序包 androidx.databinding\rD:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\build\\generated\\data_binding_base_class_source_out\\debug\\dataBindingGenBaseClassesDebug\\out\\com\\gbcom\\subwaysystem\\databinding\\ActivityBootBinding.java:13: 错误: 找不到符号\rprotected ActivityBootBinding(DataBindingComponent _bindingComponent, View _root,\r^\r符号: 类 DataBindingComponent\r位置: 类 ActivityBootBinding\rD:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\build\\generated\\data_binding_base_class_source_out\\debug\\dataBindingGenBaseClassesDebug\\out\\com\\gbcom\\subwaysystem\\databinding\\ActivityBootBinding.java:26: 错误: 找不到符号\r@Nullable ViewGroup root, boolean attachToRoot, @Nullable DataBindingComponent component) {\r^\r符号: 类 DataBindingComponent\r位置: 类 ActivityBootBinding\rD:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\build\\generated\\data_binding_base_class_source_out\\debug\\dataBindingGenBaseClassesDebug\\out\\com\\gbcom\\subwaysystem\\databinding\\ActivityBootBinding.java:37: 错误: 找不到符号\r@Nullable DataBindingComponent component) {\r^\r符号: 类 DataBindingComponent\r位置: 类 ActivityBootBinding\rD:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\build\\generated\\data_binding_base_class_source_out\\debug\\dataBindingGenBaseClassesDebug\\out\\com\\gbcom\\subwaysystem\\databinding\\ActivityBootBinding.java:46: 错误: 找不到符号\r@Nullable DataBindingComponent component) {\r^\r符号: 类 DataBindingComponent\r位置: 类 ActivityBootBinding\rD:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\src\\main\\java\\com\\gbcom\\subwaysystem\\bean\\CallRecords.java:13: 错误: 找不到符号\rimport com.gbcom.subwaysystem.BR;\r^\r符号: 类 BR\r位置: 程序包 com.gbcom.subwaysystem\rD:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\build\\generated\\data_binding_base_class_source_out\\debug\\dataBindingGenBaseClassesDebug\\out\\com\\gbcom\\subwaysystem\\databinding\\ActivityEmergencyCallBinding.java:43: 错误: 找不到符号\rprotected ActivityEmergencyCallBinding(DataBindingComponent _bindingComponent, View _root,\r^\r符号: 类 DataBindingComponent\r位置: 类 ActivityEmergencyCallBinding\rD:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\build\\generated\\data_binding_base_class_source_out\\debug\\dataBindingGenBaseClassesDebug\\out\\com\\gbcom\\subwaysystem\\databinding\\ActivityEmergencyCallBinding.java:78: 错误: 找不到符号\r@Nullable ViewGroup root, boolean attachToRoot, @Nullable DataBindingComponent component) {\r^\r符号: 类 DataBindingComponent\r位置: 类 ActivityEmergencyCallBinding\rD:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\build\\generated\\data_binding_base_class_source_out\\debug\\dataBindingGenBaseClassesDebug\\out\\com\\gbcom\\subwaysystem\\databinding\\ActivityEmergencyCallBinding.java:89: 错误: 找不到符号\r@Nullable DataBindingComponent component) {\r^\r符号: 类 DataBindingComponent\r位置: 类 ActivityEmergencyCallBinding\rD:\\code\\gbcom_gitlab\\test\\WH19-MetroSystem\\app\\build\\generated\\data_binding_base_class_source_out\\debug\\dataBindingGenBaseClassesDebug\\out\\com\\gbcom\\subwaysystem\\databinding\\ActivityEmergencyCallBinding.java:98: 错误: 找不到符号\r@Nullable DataBindingComponent component) {\r^\r符号: 类 DataBindingComponent\r位置: 类 ActivityEmergencyCallBinding\rD:\\code\\gbc","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:3:3","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"3.4.编译成功 ","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:3:4","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"四、迁移【全自动的成功】 ","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:4:0","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"4.1.自动迁移成功 说到这里气死我了，其实后面为了记录本次迁移过程，想做一个gif动画记录AS自动迁移到Androidx后发现，都不用手动修改代码，直接就可以。 完全使用AS迁移成功过程。by daizelai on 2023/05/18 15:32 下面这个gif时间更短，AS打开项目后，先菜单栏Build\u003eRebuild Project了一下，然后菜单栏Refactor选择Migrate to AndroidX...后一次成功。 ","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:4:1","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["androidx","迁移","武汉19号线"],"content":"4.2.迁移过程 最后再描述一下迁移的过程： 编译前提： 配置gradle.properties文件中没有添加android.useAndroidX=true和android.enableJetifier=true配置。 project:build.gradle的插件版本是classpath 'com.android.tools.build:gradle:3.2.0'。 gradle的版本是distributionUrl=https\\://services.gradle.org/distributions/gradle-4.6-all.zip。 app:build.gradle中使用的都是support版本的依赖库。 编译过程： 使用AS打开项目后，File\u003eInvalidate Caches / Restart… Build\u003eClean Project Build\u003eRebuild Project，保证项目可以正常build就可以了。 Refactor\u003eMigrate to AndroidX… 手动修改app/proguard-rules.pro 注意：上面执行时，Build Variants还是在debug模式下执行的，也就是说在debug模式下也是可以的。 上面这个只需要点击几下就成功了，已经把代码git reset --hard HEAD恢复并试了N次了，都是成功的，只是有的需要点击两次Refactor\u003eMigrate to AndroidX...，有的一次就成功了。至于为什么最开始执行Refactor\u003eMigrate to AndroidX...没有成功，还需要手动修改，后面只要执行Refactor\u003eMigrate to AndroidX...就可以了，怀疑： 是一开始没有执行Refactor\u003eMigrate to AndroidX...第二次。 第二个可能是因为前面已经执行Refactor\u003eMigrate to AndroidX...并手动修改各种依赖后，AS缓存记住了，后面就可以这样操作了？ ","date":"2023-05-18","objectID":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/:4:2","tags":["androidx","迁移","迁移androidx","武汉19号线"],"title":"APP项目迁移到androidx","uri":"https://daizelai.github.io/posts/wh19/3.20230518_0946%E8%BF%81%E7%A7%BBandroidx/"},{"categories":["原创","git","gitflow","git提交"],"content":"gitflow记录","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"一、描述 记录git flow的使用 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:1:0","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"1.2.总结 1.dev-开发分支是从master分支派生的。\r2.feature-特性分支是从dev-开发分支派生的，feature只是本地分支，不会被上传远端，特殊环境例外。\r3.feature-特性分支完成时，它被合并到dev-开发分支中。\r4.feature-特性分支合并完成后删除。\r4.release-发布分支是从dev-开发分支派生的。\r5.release-发布分支发布完成时，它被合并到master分支和dev-开发分支中（前提是保证版本的稳定性后再合并到master分支上）。\r6.release-发布分支合并完成后删除。\r7.版本出现问题时候则通过master分支派生出hotfixes-紧急分支进行修复，修复完成后将它合并到master分支和dev-开发分支中。\r8.hotfixes-紧急分支合并完成后删除。 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:1:1","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"二、常用分支git命令 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:0","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.1.新开分支 $ git branch 新分支名\r#新建分支 develop\r$ git branch develop ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:1","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.2.切换到另一个分支 $ git checkout 分支名\r#切换到 develop 分支\r$ git checkout develop ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:2","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.3.新开分支并切换到新分支 $ git checkout -b 新分支名\r#新开 develop 分支，并切换到此分支\r$ git checkout -b develop ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:3","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.4.查看分支列表 头部带 remotes/origin 的，表示远程分支 $ git branch -a ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:4","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.5.查看远程分支列表 $ git branch -r daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/WZS2_Android_APP (develop)\r$ git branch -r\rorigin/HEAD -\u003e origin/master\rorigin/develop\rorigin/master\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/WZS2_Android_APP (develop)\r$ 下面是查看所有分支： daizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/WZS2_Android_APP (develop)\r$ git branch -a\r* develop\rmaster\rmsg\rremotes/origin/HEAD -\u003e origin/master\rremotes/origin/develop\rremotes/origin/master\rdaizelai@GBCOM-20210524I MINGW64 /d/code/gbcom_gitlab/WZS2_Android_APP (develop)\r$ ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:5","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.6.向远程仓库提交本地新开的分支 $ git push origin 新开分支名\r#提交新建的 develop 分支\r$ git push origin develop ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:6","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.7.删除远程分支 $ git push origin --delete 远程分支名\r#删除远程仓库中的 develop 分支\r$ git push origin --delete develop ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:7","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.8.删除本地分支 $ git branch -d 分支名\r#删除本地的 develop 分支\r$ git branch -d develop ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:8","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"2.9.更新分支列表信息 用于协作时，项目队友添加或删除了远程分支的分支，可以通过这种方式来刷新分支列表信息 $ git fetch -p ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:2:9","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"三、git flow ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:0","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.1.git flow完整流程示意 Git 开发模式本质上是一套流程，团队每个成员遵守这套流程以确保完成可控的软件开发过程。 git flow完整流程示意 所有在Master分支上的Commit应该Tag。 master的commit ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:1","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.2.主要分支介绍 主要分支分为develop分支和master分支，下图是它们之间的关系。 master与develop之间的关系 master 分支（origin/master） 代码仓库中有且仅有的一条主分支，默认为 master ，在创建版本库时会自动创建。所有提供给用户使用的正式版本的源码，都会在这个分支上发布。也就是说主分支 master 用来发布重大版本。 develop 分支（origin/develop） 日常开发工作都会在 develop 分支上面完成。develop 分支可以用来生成代码的最新隔夜版本（nightly builds）。 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:2","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.3.创建develop分支 基于master分支创建一个develop分支。 $ git checkout -b develop master\r#push develop 到远程仓库\r$ git push origin develop\r$ git push -u origin develop 当我们在develop上完成了新版本的功能，最终会把所有的修改 merge 到 master 分支。针对每次 master 的修改都会打一个 Tag 作为可发布产品的版本号。 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:3","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.4.辅助分支介绍 开发过程中不可能项目人所有都在一个 develop 分支中开发，版本管理会很混乱。所以除了主要分支外，我们还需要一些辅助分支来协助团队成员间的并行开发。 所用到的辅助分支大体分三类： Feature branches（功能分支） Release branches（预发布分支） Hotfix branches（热修复分支） ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:4","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.5.Feature branches（功能分支） 3.5.1.应用场景 当要开始一个新功能的开发时，我门可以创建一个 Feature branche 。等待这个新功能开发完成并确定应用到新版本中就合并回 develop，那么如果不是就会被很遗憾的丢弃。。。 Feature branches分支 3.5.2.应用规则 从 develop 分支创建，最终合并回 develop 分支; 分支名：feature／＊; Tips： 这里很多地方说用feature-*的方式命名，也可以使用feature/*方式，其实意思是一样的。 3.5.3.Creat a feature branch # 基于develop分支创建feature功能分支，当然这里也可以先【git push -u origin feature/name_v1.0.0】\r$ git checkout -b feature/name_v1.0.0 develop 创建name_v1.0.0分支之后，就可以开始开发了。 git status\rgit add fiel...\rgit commit -m \"submit\" 开发完成之后，push到远程，push本地feature/name_v1.0.0到远处代码库。 # 将feature分支推送到远程【可选，如果这个需求有其他人参与开发的话】对应`git flow publish feature name`命令，拉取`git flow feature track feature name`。\r$ git push origin feature/name_v1.0.0\r$ git push -u origin 分支名称 3.5.4.切换到develop合并feature/name_v1.0.0 完成feature分支的开发之后， 先切换到develop分支。 # 拉取远端最新develop分支并切换到develop【这是为了后面合并feature分支的工作】\r$ git pull origin develop \u0026\u0026 git checkout develop\r# develop合资feature分支的修改\r$ git merge --no-ff feature/name_v1.0.0\r# 提交feature的更改到远程develop分支\r$ git push origin develop \"- -no-ff\" 的作用是创建一个新的\"commit\"对象用于当前合并操作。这样既可以避免丢失该功能分支的历史存在信息，又可以集中该功能分支所有历史提交。并且如果想回退版本也会比较方便。 下面是git merge --no-ff图示： git merge –no-ff 图示 3.5.5.移除本地和远程仓库的feature/name_v1.0.0分支 # 删除本地分支feature/name_v1.0.0\r$ git branch -d feature/name_v1.0.0\r# 删除远程分支，如果远程存在这个分支的话\r$ git push origin --delete feature/name_v1.0.0 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:5","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.6.Release branches（预发布分支） 3.6.1.应用场景 “Release branches” 用来做新版本发布前的准备工作，在上面可以做一些小的 bug 修复、准备发布版本号等等和发布有关的小改动，其实已经是一个比较成熟的版本了。另外这样我们既可以在预发布分支上做一些发布前准备，也不会影响 “develop” 分支上下一版本的新功能开发。 3.6.2.应用规则 从develop分支创建，最终合并回develop和master; 分支名：release-＊; 3.6.3.Creat a release branch # 从develop分支创建release分支\r$ git checkout -b release-1.1 develop\r#push 到远程仓库（可选）\r$ git push origin release-1.1 现在可以在这个release-1.1分支中开始开发了。 3.6.4.切换到 develop 合并 release-1.1 预发布分支所做的修改同时也要合并回 develop # 完成release分支开发之后，获取最新develop分支内容，并且切换到develop分支。\r$ git pull origin develop \u0026\u0026 git checkout develop\r# 合并release-1.1分支到develop分支\r$ git merge --no-ff release-1.1\r# 提交到远程develop分支\r$ git push origin develop 3.6.5.切换到 master 合并 release-1.1 # 完成release分支开发之后，获取最新master分支，并切换到master分支\r$ git pull origin master \u0026\u0026 git checkout master\r# 合并release-1.1修改到master分支\r$ git merge --no-ff release-1.1\r# 把本地master分支的修改推送到远程服务器\r$ git push origin master\r# 给版本打tag，【git tag -a v1.1 master】\r$ git tag -a v1.1 -m 'my version 1.1'\r# 推送tag到远程服务器，也可以`git push --tags`提交所有包括tag\r$ git push origin v1.1 当我们的 release-1.1 的 Review 完成，也就预示着我们可以发布了。打上相应的版本号，再 push 到远程仓库。 3.6.6.移除本地和远程仓库的 release-1.1 # 删除本地release-1.1分支\r$ git branch -d release-1.1\r# 删除远程release-1.1分支\r$ git push origin --delete release-1.1 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:6","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.7.Hotfix branches（热修复分支） 3.7.1.应用场景 “Hotfix branches” 主要用于处理线上版本出现的一些需要立刻修复的 bug 情况. 下面是示意图： 3.7.2.应用规则 从master分支上当前版本号的tag处切出，也就是从最新的master上创建，最终合并回develop和master; 分支名：hotfix-＊; 3.7.3.Creat a fixbug branch $ git checkout -b fixbug-1.1.1 master\r# push 到远程仓库（可选）\r$ git push origin fixbug-1.1.1 现在可以修改BUG了。 3.7.4.切换到develop合并fixbug－1.1.1 # 更新develop为最新，并切换到develop分支\r$ git pull origin develop \u0026\u0026 git checkout develop\r# 合并fixbug-1.1.1到develop分支。\r$ git merge --no-ff fixbug-1.1.1\r# 推送最新修改到远程develop分支\r$ git push origin develop 3.7.5.切换到master合并fixbug-1.1.1 bug修复完成，合并回master并打上版本号； # 从远程服务器获取最新master代码，并切换到master分支\r$ git pull origin master \u0026\u0026 git checkout master\r# 合并fixbug-1.1.1的修改到master分支\r$ git merge --no-ff fixbug-1.1.1\r# 推送master到远程服务器\r$ git push origin master\r# 给版本打tag\r$ git tag -a v1.1.1 -m 'my version 1.1.1'\r# 推送tag到远程服务器，也可以`git push --tags`提交所有包括tag\r$ git push origin v1.1.1 3.7.6.移除本地和远程仓库的 fixbug-1.1.1 # 删除本地fixbug-1.1.1分支\r$ git branch -d fixbug-1.1.1\r# 删除远程fixbug-1.1.1分支\r$ git push origin --delete fixbug-1.1.1 ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:7","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.8.删除远程分支 $ git branch -r -d origin/branch-name \u0026\u0026 git push origin :branch-name ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:8","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.9.远程有分支本地无分支 $ git checkout --track origin/branch-name ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:9","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","git","gitflow","git提交"],"content":"3.10.本地有分支远程无分支 $ git push --set-upstream origin branch-name ","date":"2023-04-14","objectID":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/:3:10","tags":["原创","git","gitflow","git工作流","git命令行","git提交"],"title":"gitflow记录","uri":"https://daizelai.github.io/posts/git/20230414_1304gitflow%E8%AE%B0%E5%BD%95/gitflow/"},{"categories":["原创","docker","android环境"],"content":"windows10上docker中centos7.9安装android环境重新记录版","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"20221025_2016windows10上docker中centos7.9安装android环境重新记录版 ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:0:0","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"一、描述 by daizelai on 2022/10/25 20:17 由于之前的记录有点混乱，再加上后面把centos7.9容器给删除了，需要重新搭建linux下android编译环境，所以这里重新记录了下搭建过程，比较流畅的一次记录。 ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:1:0","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"二、安装gradle ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:2:0","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"2.1.gradle版本 首先查看项目中使用的gradle版本。 路径：\\SH-CityRailway-ZTE\\gradle\\wrapper\\gradle-wrapper.properties #Wed Jan 27 17:22:12 CST 2021 distributionBase=GRADLE_USER_HOME distributionPath=wrapper/dists zipStoreBase=GRADLE_USER_HOME zipStorePath=wrapper/dists distributionUrl=https\\://services.gradle.org/distributions/gradle-6.5-bin.zip ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:2:1","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"2.2.gradle下载地址 gradle下载地址https://gradle.org/releases/ ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:2:2","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"2.3.下载gradle 这里一开始下载的是gradle-7.5.1-bin.zip版本，后面最终使用的是和项目一样的gradle-6.5-bin.zip版本。 [root@6db32870bff9 home]# mkdir download\r[root@6db32870bff9 home]# cd download\r[root@6db32870bff9 download]#\r[root@6db32870bff9 download]# wget https://downloads.gradle-dn.com/distributions/gradle-7.5.1-bin.zip\r--2022-10-03 08:10:23-- https://downloads.gradle-dn.com/distributions/gradle-7.5.1-bin.zip\rResolving downloads.gradle-dn.com (downloads.gradle-dn.com)... 183.216.188.172, 2409:8c38:c60:202:3164:2677:6812:fffe\rConnecting to downloads.gradle-dn.com (downloads.gradle-dn.com)|183.216.188.172|:443... connected.\rHTTP request sent, awaiting response... 200 OK\rLength: 120635534 (115M) [application/zip]\rSaving to: ‘gradle-7.5.1-bin.zip’\r100%[=================================================================\u003e] 120,635,534 10.4MB/s in 10s 2022-10-03 08:10:34 (11.0 MB/s) - ‘gradle-7.5.1-bin.zip’ saved [120635534/120635534]\r[root@6db32870bff9 download]# 下载gradle6.5版本 [root@6db32870bff9 download]# wget https://downloads.gradle-dn.com/distributions/gradle-6.5-bin.zip\r--2022-10-03 08:17:25-- https://downloads.gradle-dn.com/distributions/gradle-6.5-bin.zip\rResolving downloads.gradle-dn.com (downloads.gradle-dn.com)... 183.216.188.172, 2409:8c02:21c:32:3d64:2677:6812:c3\rConnecting to downloads.gradle-dn.com (downloads.gradle-dn.com)|183.216.188.172|:443... connected.\rHTTP request sent, awaiting response... 200 OK\rLength: 102363463 (98M) [application/zip]\rSaving to: ‘gradle-6.5-bin.zip’\r100%[=================================================================\u003e] 102,363,463 11.2MB/s in 8.7s 2022-10-03 08:17:34 (11.2 MB/s) - ‘gradle-6.5-bin.zip’ saved [102363463/102363463]\r[root@6db32870bff9 download]# ls -l\rtotal 217780\r-rw-r--r-- 1 root root 102363463 Jun 2 2020 gradle-6.5-bin.zip\r-rw-r--r-- 1 root root 120635534 Aug 5 21:26 gradle-7.5.1-bin.zip\r[root@6db32870bff9 download]# ls -lh\rtotal 213M\r-rw-r--r-- 1 root root 98M Jun 2 2020 gradle-6.5-bin.zip\r-rw-r--r-- 1 root root 116M Aug 5 21:26 gradle-7.5.1-bin.zip\r[root@6db32870bff9 download]# 第二次运行centos容器并下载过程记录 [root@12fb5145dd7b download]# ls -l\rtotal 1812\r-rw-r--r-- 1 root root 76336 Jan 14 2021 autogen-libopts-5.18.12-8.el8.x86_64.rpm\r-rw-r--r-- 1 root root 50204 Jul 4 2014 autogen-libopts-devel-5.18-5.el7.x86_64.rpm\rdrwxr-xr-x 10 daizelai daizelai 4096 Oct 23 14:59 nginx-1.20.2\r-rw-rw-r-- 1 daizelai daizelai 1062124 Nov 16 2021 nginx-1.20.2.tar.gz\r-rw-r--r-- 1 root root 561812 Jun 24 2020 ntp-4.2.6p5-29.el7.centos.2.x86_64.rpm\r-rw-r--r-- 1 root root 88692 Jun 24 2020 ntpdate-4.2.6p5-29.el7.centos.2.x86_64.rpm\r[root@12fb5145dd7b download]# date\rTue Oct 25 16:46:38 CST 2022\r[root@12fb5145dd7b download]# mkdir android\r[root@12fb5145dd7b download]# cd android/\r[root@12fb5145dd7b android]# wget https://downloads.gradle-dn.com/distributions/gradle-7.5.1-bin.zip\r--2022-10-25 16:46:49-- https://downloads.gradle-dn.com/distributions/gradle-7.5.1-bin.zip\rResolving downloads.gradle-dn.com (downloads.gradle-dn.com)... 183.216.188.172, 2409:8c38:c60:202:3164:2677:6812:fffe\rConnecting to downloads.gradle-dn.com (downloads.gradle-dn.com)|183.216.188.172|:443... connected.\rHTTP request sent, awaiting response... 200 OK\rLength: 120635534 (115M) [application/zip]\rSaving to: ‘gradle-7.5.1-bin.zip’\r100%[===============================================================================================\u003e] 120,635,534 10.3MB/s in 11s 2022-10-25 16:47:00 (10.9 MB/s) - ‘gradle-7.5.1-bin.zip’ saved [120635534/120635534]\r[root@12fb5145dd7b android]# [root@12fb5145dd7b android]# [root@12fb5145dd7b android]# [root@12fb5145dd7b android]# [root@12fb5145dd7b android]# [root@12fb5145dd7b android]# [root@12fb5145dd7b android]# ls -l\rtotal 117812\r-rw-r--r-- 1 root root 120635534 Aug 6 05:26 gradle-7.5.1-bin.zip\r[root@12fb5145dd7b android]# wget https://downloads.gradle-dn.com/distributions/gradle-6.5-bin.zip\r--2022-10-25 16:50:44-- https://downloads.gradle-dn.com/distributions/gradle-6.5-bin.zip\rResolving downloads.gradle-dn.com (downloads.gradle-dn.","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:2:3","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"2.4.解压gradle [root@6db32870bff9 download]# date\rMon Oct 3 08:18:22 UTC 2022\r[root@6db32870bff9 download]# unzip gradle-6.5-bin.zip\r[root@6db32870bff9 download]# ls -l\rtotal 217784\rdrwxr-xr-x 5 root root 4096 Feb 1 1980 gradle-6.5\r-rw-r--r-- 1 root root 102363463 Jun 2 2020 gradle-6.5-bin.zip\r-rw-r--r-- 1 root root 120635534 Aug 5 21:26 gradle-7.5.1-bin.zip\r[root@6db32870bff9 download]# ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:2:4","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"2.5.配置gradle环境变量 [root@6db32870bff9 download]# date\rMon Oct 3 08:20:15 UTC 2022\r[root@6db32870bff9 download]#\r[root@6db32870bff9 download]# ls /usr/local/\rbin etc games include lib lib64 libexec sbin share src\r[root@6db32870bff9 download]# ls -l\rtotal 217784\rdrwxr-xr-x 5 root root 4096 Feb 1 1980 gradle-6.5\r-rw-r--r-- 1 root root 102363463 Jun 2 2020 gradle-6.5-bin.zip\r-rw-r--r-- 1 root root 120635534 Aug 5 21:26 gradle-7.5.1-bin.zip\r[root@6db32870bff9 download]# ls gradle-6.5\rbin init.d lib LICENSE NOTICE README\r[root@6db32870bff9 download]# mv gradle-6.5 /usr/local/\r[root@6db32870bff9 download]# ls /usr/local/gradle-6.5/\rbin init.d lib LICENSE NOTICE README\r[root@6db32870bff9 download]# 在/etc/profile配置文件的末尾添加如下配置。 [root@6db32870bff9 download]# vi /etc/profile\rGRADLE_HOME=/usr/local/gradle-6.5/\rPATH=$GRADLE_HOME/bin:$PATH\rexport GRADLE_HOME PATH\r[root@6db32870bff9 download]# source /etc/profile\r[root@6db32870bff9 download]# 查看第二次配置的环境变量 [root@12fb5145dd7b android]# date\rTue Oct 25 16:55:18 CST 2022\r[root@12fb5145dd7b android]# tail -n 23 /etc/profile\runset i\runset -f pathmunge\rPATH=$PATH:/usr/local/nginx/sbin\rexport PATH\r# 此处路径为安装的jdk8路径\rJAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.345.b01-1.el7_9.x86_64/\rCLASS_PATH=.:$JAVA_HOME/lib\rPATH=$JAVA_HOME/bin:$PATH\rexport JAVA_HOME CLASS_PATH PATH\r# java11的安装路径\rJAVA11_HOME=/usr/lib/jvm/java-11-openjdk-11.0.16.1.1-1.el7_9.x86_64/\rJAVA11_JRE_HOME=$JAVA11_HOME/jre\rCLASS_PATH=.:$JAVA11_HOME/lib/dt.jar:$JAVA11_HOME/lib/tools.jar:$JAVA11_JRE_HOME/lib\rPATH=$JAVA11_HOME/bin:$PATH\rexport JAVA11_HOME JAVA11_JRE_HOME CLASS_PATH PATH\r# gradle安装路径\rGRADLE_HOME=/usr/local/gradle-6.5/\rPATH=$GRADLE_HOME/bin:$PATH\rexport GRADLE_HOME PATH\r[root@12fb5145dd7b android]# ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:2:5","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"2.6.查看是否生效 [root@6db32870bff9 download]# date\rMon Oct 3 08:24:25 UTC 2022\r[root@6db32870bff9 download]# gradle -v\rWelcome to Gradle 6.5!\rHere are the highlights of this release:\r- Experimental file-system watching\r- Improved version ordering\r- New samples\rFor more details see https://docs.gradle.org/6.5/release-notes.html\r------------------------------------------------------------\rGradle 6.5\r------------------------------------------------------------\rBuild time: 2020-06-02 20:46:21 UTC\rRevision: a27f41e4ae5e8a41ab9b19f8dd6d86d7b384dad4\rKotlin: 1.3.72\rGroovy: 2.5.11\rAnt: Apache Ant(TM) version 1.10.7 compiled on September 1 2019\rJVM: 1.8.0_345 (Red Hat, Inc. 25.345-b01)\rOS: Linux 5.10.16.3-microsoft-standard-WSL2 amd64\r[root@6db32870bff9 download]# ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:2:6","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"三、安装 ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:3:0","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"3.1.下载SDK 本次是通过这个http://dl.google.com/android/android-sdk_r24.4.1-linux.tgz下载的，可以通过wget命令进行下载。 本次编译的项目是以温州S2号线的项目为蓝本进行编译的。 ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:3:1","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"3.2.安装SDK [root@12fb5145dd7b android]# tar -zxf android-sdk_r24.4.1-linux.tgz [root@12fb5145dd7b android]# ls -l\rtotal 687516\rdrwxrwxr-x 5 249512 5000 4096 Oct 14 2015 android-sdk-linux\r-rw-r--r-- 1 root root 326412652 Oct 21 2015 android-sdk_r24.4.1-linux.tgz\r-rw-r--r-- 1 root root 102363463 Jun 3 2020 gradle-6.5-bin.zip\r-rw-r--r-- 1 root root 120635534 Aug 6 05:26 gradle-7.5.1-bin.zip\rdrwxr-xr-x 2 root root 4096 Oct 25 18:26 licenses\r-rw-r--r-- 1 root root 154582459 Sep 19 2017 sdk-tools-linux-4333796.zip\rdrwxr-xr-x 6 root root 4096 Oct 25 17:27 tools\r[root@12fb5145dd7b android]# mv android-sdk-linux /usr/local/\r[root@12fb5145dd7b android]# ls -l /usr/local/android-sdk-linux/\rtotal 16\rdrwxrwxr-x 2 249512 5000 4096 Oct 14 2015 add-ons\rdrwxrwxr-x 2 249512 5000 4096 Oct 14 2015 platforms\r-rw-rw-r-- 1 249512 5000 1158 Oct 14 2015 SDK Readme.txt\rdrwxr-xr-x 12 249512 5000 4096 Oct 14 2015 tools\r[root@12fb5145dd7b android]# 查看 [root@12fb5145dd7b android-sdk-linux]# ls -l\rtotal 16\rdrwxrwxr-x 2 249512 5000 4096 Oct 14 2015 add-ons\rdrwxrwxr-x 2 249512 5000 4096 Oct 14 2015 platforms\r-rw-rw-r-- 1 249512 5000 1158 Oct 14 2015 SDK Readme.txt\rdrwxr-xr-x 12 249512 5000 4096 Oct 14 2015 tools\r[root@12fb5145dd7b android-sdk-linux]# ls -l tools/\rtotal 112032\r-rwxr--r-- 1 249512 5000 3498 Oct 14 2015 android\rdrwxr-xr-x 2 249512 5000 4096 Oct 14 2015 ant\rdrwxr-xr-x 3 249512 5000 4096 Oct 14 2015 apps\rdrwxr-xr-x 2 249512 5000 4096 Oct 14 2015 bin\rdrwxr-xr-x 2 249512 5000 4096 Oct 14 2015 bin64\r-rwxr--r-- 1 249512 5000 3286 Oct 14 2015 ddms\r-rwxr--r-- 1 249512 5000 1940 Oct 14 2015 draw9patch\r-rwxr--r-- 1 249512 5000 412368 Oct 14 2015 emulator\r-rwxr--r-- 1 249512 5000 18755016 Oct 14 2015 emulator64-arm\r-rwxr--r-- 1 249512 5000 19876400 Oct 14 2015 emulator64-mips\r-rwxr--r-- 1 249512 5000 1361088 Oct 14 2015 emulator64-ranchu-arm64\r-rwxr--r-- 1 249512 5000 1360440 Oct 14 2015 emulator64-ranchu-mips64\r-rwxr--r-- 1 249512 5000 20282736 Oct 14 2015 emulator64-x86\r-rwxr--r-- 1 249512 5000 15600744 Oct 14 2015 emulator-arm\r-rwxr--r-- 1 249512 5000 16583180 Oct 14 2015 emulator-mips\r-rwxr--r-- 1 249512 5000 1141100 Oct 14 2015 emulator-ranchu-arm64\r-rwxr--r-- 1 249512 5000 1140620 Oct 14 2015 emulator-ranchu-mips64\r-rwxr--r-- 1 249512 5000 17284012 Oct 14 2015 emulator-x86\r-rwxr--r-- 1 249512 5000 3464 Oct 14 2015 hierarchyviewer\r-rwxr--r-- 1 249512 5000 1845 Oct 14 2015 jobb\rdrwxr-xr-x 9 249512 5000 4096 Oct 14 2015 lib\rdrwxr-xr-x 3 249512 5000 4096 Oct 14 2015 lib64\r-rwxr--r-- 1 249512 5000 2047 Oct 14 2015 lint\r-rwxr--r-- 1 249512 5000 12191 Oct 14 2015 mksdcard\r-rwxr--r-- 1 249512 5000 1293 Oct 14 2015 monitor\r-rwxr--r-- 1 249512 5000 3176 Oct 14 2015 monkeyrunner\r-rw-r--r-- 1 249512 5000 801996 Oct 14 2015 NOTICE.txt\rdrwxr-xr-x 7 249512 5000 4096 Oct 14 2015 proguard\rdrwxr-xr-x 4 249512 5000 4096 Oct 14 2015 qemu\r-rwxr--r-- 1 249512 5000 2259 Oct 14 2015 screenshot2\r-rw-r--r-- 1 249512 5000 70 Oct 14 2015 source.properties\rdrwxr-xr-x 2 249512 5000 4096 Oct 14 2015 support\rdrwxr-xr-x 6 249512 5000 4096 Oct 14 2015 templates\r-rwxr--r-- 1 249512 5000 3219 Oct 14 2015 traceview\r-rwxr--r-- 1 249512 5000 3054 Oct 14 2015 uiautomatorviewer\r[root@12fb5145dd7b android-sdk-linux]# ls -l tools/bin/\rtotal 7712\r-rwxr--r-- 1 249512 5000 2114036 Oct 14 2015 e2fsck\r-rwxr--r-- 1 249512 5000 2114036 Oct 14 2015 fsck.ext4\r-rwxr--r-- 1 249512 5000 1482940 Oct 14 2015 mkfs.ext4\r-rwxr--r-- 1 249512 5000 837320 Oct 14 2015 resize2fs\r-rwxr--r-- 1 249512 5000 1331428 Oct 14 2015 tune2fs\r[root@12fb5145dd7b android-sdk-linux]# ls -l platforms\rtotal 0\r[root@12fb5145dd7b android-sdk-linux]# ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:3:2","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"3.3.列出所以可安装的SDK资源 可通过android list sdk --all命令显示所有的SDK版本，记得这里的执行命令需要在SDK安装目录/usr/local/android-sdk-linux下执行。 [root@12fb5145dd7b android-sdk-linux]# android list sdk --all\rRefresh Sources:\rFetching https://dl.google.com/android/repository/addons_list-2.xml\rValidate XML\rParse XML\rFetched Add-ons List successfully\rRefresh Sources\rFetching URL: https://dl.google.com/android/repository/repository-11.xml\rValidate XML: https://dl.google.com/android/repository/repository-11.xml\rParse XML: https://dl.google.com/android/repository/repository-11.xml\rFetching URL: https://dl.google.com/android/repository/addon.xml\rValidate XML: https://dl.google.com/android/repository/addon.xml\rParse XML: https://dl.google.com/android/repository/addon.xml\rFetching URL: https://dl.google.com/android/repository/glass/addon.xml\rValidate XML: https://dl.google.com/android/repository/glass/addon.xml\rParse XML: https://dl.google.com/android/repository/glass/addon.xml\rFetching URL: https://dl.google.com/android/repository/extras/intel/addon.xml\rValidate XML: https://dl.google.com/android/repository/extras/intel/addon.xml\rParse XML: https://dl.google.com/android/repository/extras/intel/addon.xml\rFetching URL: https://dl.google.com/android/repository/sys-img/android/sys-img.xml\rValidate XML: https://dl.google.com/android/repository/sys-img/android/sys-img.xml\rParse XML: https://dl.google.com/android/repository/sys-img/android/sys-img.xml\rFetching URL: https://dl.google.com/android/repository/sys-img/android-wear/sys-img.xml\rValidate XML: https://dl.google.com/android/repository/sys-img/android-wear/sys-img.xml\rParse XML: https://dl.google.com/android/repository/sys-img/android-wear/sys-img.xml\rFetching URL: https://dl.google.com/android/repository/sys-img/android-tv/sys-img.xml\rValidate XML: https://dl.google.com/android/repository/sys-img/android-tv/sys-img.xml\rParse XML: https://dl.google.com/android/repository/sys-img/android-tv/sys-img.xml\rFetching URL: https://dl.google.com/android/repository/sys-img/google_apis/sys-img.xml\rValidate XML: https://dl.google.com/android/repository/sys-img/google_apis/sys-img.xml\rParse XML: https://dl.google.com/android/repository/sys-img/google_apis/sys-img.xml\rFetching URL: https://dl.google.com/android/repository/sys-img/google_apis_playstore/sys-img.xml\rValidate XML: https://dl.google.com/android/repository/sys-img/google_apis_playstore/sys-img.xml\rParse XML: https://dl.google.com/android/repository/sys-img/google_apis_playstore/sys-img.xml\rPackages available for installation or update: 235\r1- Android SDK Tools, revision 25.2.5 (Obsolete)\r2- Android SDK Platform-tools, revision 29.0.6\r3- Android SDK Build-tools, revision 30 rc2\r4- Android SDK Build-tools, revision 29.0.3\r5- Android SDK Build-tools, revision 29.0.2\r6- Android SDK Build-tools, revision 29.0.1\r7- Android SDK Build-tools, revision 29\r8- Android SDK Build-tools, revision 28.0.3\r9- Android SDK Build-tools, revision 28.0.2\r10- Android SDK Build-tools, revision 28.0.1\r11- Android SDK Build-tools, revision 28\r12- Android SDK Build-tools, revision 27.0.3\r13- Android SDK Build-tools, revision 27.0.2\r14- Android SDK Build-tools, revision 27.0.1\r15- Android SDK Build-tools, revision 27\r16- Android SDK Build-tools, revision 26.0.3\r17- Android SDK Build-tools, revision 26.0.2\r18- Android SDK Build-tools, revision 26.0.1\r19- Android SDK Build-tools, revision 26\r20- Android SDK Build-tools, revision 25.0.3\r21- Android SDK Build-tools, revision 25.0.2\r22- Android SDK Build-tools, revision 25.0.1\r23- Android SDK Build-tools, revision 25\r24- Android SDK Build-tools, revision 24.0.3\r25- Android SDK Build-tools, revision 24.0.2\r26- Android SDK Build-tools, revision 24.0.1\r27- Android SDK Build-tools, revision 24\r28- Android SDK Build-tools, revision 23.0.3\r29- Android SDK Build-tools, revision 23.0.2\r30- Android SDK Build-tools, revision 23.0.1\r31- Android SDK Build-tools, revision 23 (Obsolete)\r32- Android SDK Build-tools, revision 22.0.1\r33- Android SDK Build-tools, revision 22 (","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:3:3","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"3.4.分析所需要的SDK资源 安装相应的SDK资源。 1- Android SDK Tools, revision 25.2.5 (Obsolete)\r2- Android SDK Platform-tools, revision 29.0.6\r9- Android SDK Build-tools, revision 28.0.2\r11- Android SDK Build-tools, revision 28\r56- SDK Platform Android 7.1.1, API 25, revision 3\r57- SDK Platform Android 7.0, API 24, revision 2\r183- Google APIs, Android API 24, revision 1\r# 7.1, 29=10,28=9,27=8.1,26=8.0\r211- Sources for Android SDK, API 25, revision 1\r# 7.0\r212- Sources for Android SDK, API 24, revision 1\r223- Android Support Repository, revision 47\r# 本次安装的是这第一行\randroid update sdk -u -a -t 1,2,9,11,56,57,223,183,211,212\r#android update sdk -u --all --filter 1,2,3,5,11,12,22,23,24,25,26,27,28,29,88,89 最新记录一下 1- Android SDK Tools, revision 25.2.5 (Obsolete)\r2- Android SDK Platform-tools, revision 29.0.6\r# 这是温州S2号线APP需要的\r5- Android SDK Build-tools, revision 29.0.2\r# 这是深圳14号APP需要的\r9- Android SDK Build-tools, revision 28.0.2\r11- Android SDK Build-tools, revision 28\r# 这是温州S2号线APP需要的\r51- SDK Platform Android 10, API 29, revision 4\r56- SDK Platform Android 7.1.1, API 25, revision 3\r57- SDK Platform Android 7.0, API 24, revision 2\r183- Google APIs, Android API 24, revision 1\r# 7.1, 29=10,28=9,27=8.1,26=8.0\r211- Sources for Android SDK, API 25, revision 1\r# 7.0\r212- Sources for Android SDK, API 24, revision 1\r223- Android Support Repository, revision 47\r# 后面如果再安装的是这第一行哦\randroid update sdk -u -a -t 1,2,5,9,11,51,56,57,223,183,211,212\r#android update sdk -u --all --filter 1,2,3,5,11,12,22,23,24,25,26,27,28,29,88,89 ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:3:4","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"3.5.安装SDK资源 下载组件 [root@12fb5145dd7b android-sdk-linux]# date\rTue Oct 25 19:14:22 CST 2022\r[root@12fb5145dd7b android-sdk-linux]# android update sdk -u -a -t 1,2,9,11,56,57,223,183,211,212\rRefresh Sources:\rFetching https://dl.google.com/android/repository/addons_list-2.xml\rValidate XML\rParse XML\rFetched Add-ons List successfully\rRefresh Sources\rFetching URL: https://dl.google.com/android/repository/repository-11.xml\rValidate XML: https://dl.google.com/android/repository/repository-11.xml\rParse XML: https://dl.google.com/android/repository/repository-11.xml\rFetching URL: https://dl.google.com/android/repository/addon.xml\rValidate XML: https://dl.google.com/android/repository/addon.xml\rParse XML: https://dl.google.com/android/repository/addon.xml\rFetching URL: https://dl.google.com/android/repository/glass/addon.xml\rValidate XML: https://dl.google.com/android/repository/glass/addon.xml\rParse XML: https://dl.google.com/android/repository/glass/addon.xml\rFetching URL: https://dl.google.com/android/repository/extras/intel/addon.xml\rValidate XML: https://dl.google.com/android/repository/extras/intel/addon.xml\rParse XML: https://dl.google.com/android/repository/extras/intel/addon.xml\rFetching URL: https://dl.google.com/android/repository/sys-img/android/sys-img.xml\rValidate XML: https://dl.google.com/android/repository/sys-img/android/sys-img.xml\rParse XML: https://dl.google.com/android/repository/sys-img/android/sys-img.xml\rFetching URL: https://dl.google.com/android/repository/sys-img/android-wear/sys-img.xml\rValidate XML: https://dl.google.com/android/repository/sys-img/android-wear/sys-img.xml\rParse XML: https://dl.google.com/android/repository/sys-img/android-wear/sys-img.xml\rFetching URL: https://dl.google.com/android/repository/sys-img/android-tv/sys-img.xml\rValidate XML: https://dl.google.com/android/repository/sys-img/android-tv/sys-img.xml\rParse XML: https://dl.google.com/android/repository/sys-img/android-tv/sys-img.xml\rFetching URL: https://dl.google.com/android/repository/sys-img/google_apis/sys-img.xml\rValidate XML: https://dl.google.com/android/repository/sys-img/google_apis/sys-img.xml\rParse XML: https://dl.google.com/android/repository/sys-img/google_apis/sys-img.xml\rFetching URL: https://dl.google.com/android/repository/sys-img/google_apis_playstore/sys-img.xml\rValidate XML: https://dl.google.com/android/repository/sys-img/google_apis_playstore/sys-img.xml\rParse XML: https://dl.google.com/android/repository/sys-img/google_apis_playstore/sys-img.xml\r-------------------------------\rLicense id: android-sdk-license-e6a904e8\rUsed by: - Android SDK Tools, revision 25.2.5 (Obsolete)\r- Android SDK Platform-tools, revision 29.0.6\r- Android SDK Build-tools, revision 28.0.2\r- Android SDK Build-tools, revision 28\r- SDK Platform Android 7.1.1, API 25, revision 3\r- SDK Platform Android 7.0, API 24, revision 2\r- Google APIs, Android API 24, revision 1\r- Sources for Android SDK, API 25, revision 1\r- Sources for Android SDK, API 24, revision 1\r- Android Support Repository, revision 47\r-------------------------------\rTerms and Conditions\rThis is the Android Software Development Kit License Agreement\r1. Introduction\r1.1 The Android Software Development Kit (referred to in the License Agreement as the \"SDK\" and specifically including the Android system files, packaged APIs, and Google APIs add-ons) is licensed to you subject to the terms of the License Agreement. The License Agreement forms a legally binding contract between you and Google in relation to your use of the SDK.\r1.2 \"Android\" means the Android software stack for devices, as made available under the Android Open Source Project, which is located at the following URL: http://source.android.com/, as updated from time to time.\r1.3 A \"compatible implementation\" means any Android device that (i) complies with the Android Compatibility Definition document, which can be found at the Android compatibility website (http://source.android.com/compatibility) and which may be updated from","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:3:5","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"3.6.配置环境变量 配置android sdk的环境变量。 [daizelai@12fb5145dd7b wzs2_android_app-master]$ tail -n 28 /etc/profile\runset -f pathmunge\rPATH=$PATH:/usr/local/nginx/sbin\rexport PATH\r# 此处路径为安装的jdk8路径\rJAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.345.b01-1.el7_9.x86_64/\rCLASS_PATH=.:$JAVA_HOME/lib\rPATH=$JAVA_HOME/bin:$PATH\rexport JAVA_HOME CLASS_PATH PATH\r# java11的安装路径\rJAVA11_HOME=/usr/lib/jvm/java-11-openjdk-11.0.16.1.1-1.el7_9.x86_64/\rJAVA11_JRE_HOME=$JAVA11_HOME/jre\rCLASS_PATH=.:$JAVA11_HOME/lib/dt.jar:$JAVA11_HOME/lib/tools.jar:$JAVA11_JRE_HOME/lib\rPATH=$JAVA11_HOME/bin:$PATH\rexport JAVA11_HOME JAVA11_JRE_HOME CLASS_PATH PATH\r# gradle安装路径\rGRADLE_HOME=/usr/local/gradle-6.5/\rPATH=$GRADLE_HOME/bin:$PATH\rexport GRADLE_HOME PATH\r# android sdk安装路径\rANDROID_SDK_HOME=/usr/local/android-sdk-linux/\rPATH=$ANDROID_SDK_HOME/tools:$PATH\rPATH=$ANDROID_SDK_HOME/platform-tools:$PATH\rexport ANDROID_SDK_HOME PATH\r[daizelai@12fb5145dd7b wzs2_android_app-master]$\r[daizelai@12fb5145dd7b wzs2_android_app-master]$ source /etc/profile\r[daizelai@12fb5145dd7b wzs2_android_app-master]$ ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:3:6","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"3.7.手动下载将要编译的项目源码 这里下载温州S2号线APP的项目代码，进行手动编译。 下载app源码： [daizelai@12fb5145dd7b app]$ ls -l\rtotal 0\r[daizelai@12fb5145dd7b app]$ pwd\r/home/daizelai/app\r[daizelai@12fb5145dd7b app]$ 不知道为什么，直接在centos7.9中下载gitlab上的项目包有问题。 [daizelai@12fb5145dd7b app]$ date Tue Oct 25 19:22:47 CST 2022\r[daizelai@12fb5145dd7b app]$ wget http://gitlab.gbcom.com.cn/daizelai/wzs2_android_app/-/archive/master/wzs2_android_app-master.tar.gz\r--2022-10-25 19:22:50-- http://gitlab.gbcom.com.cn/daizelai/wzs2_android_app/-/archive/master/wzs2_android_app-master.tar.gz\rResolving gitlab.gbcom.com.cn (gitlab.gbcom.com.cn)... 10.30.40.10\rConnecting to gitlab.gbcom.com.cn (gitlab.gbcom.com.cn)|10.30.40.10|:80... connected.\rHTTP request sent, awaiting response... 302 Found\rLocation: http://gitlab.gbcom.com.cn/users/sign_in [following]\r--2022-10-25 19:22:50-- http://gitlab.gbcom.com.cn/users/sign_in\rReusing existing connection to gitlab.gbcom.com.cn:80.\rHTTP request sent, awaiting response... 200 OK\rLength: unspecified [text/html]\rSaving to: ‘wzs2_android_app-master.tar.gz’\r[ \u003c=\u003e ] 9,510 --.-K/s in 0.001s 2022-10-25 19:22:50 (9.58 MB/s) - ‘wzs2_android_app-master.tar.gz’ saved [9510]\r[daizelai@12fb5145dd7b app]$ ls -lsh\rtotal 12K\r12K -rw-rw-r-- 1 daizelai daizelai 9.3K Oct 25 19:22 wzs2_android_app-master.tar.gz\r[daizelai@12fb5145dd7b app]$ 于是这里直接在windows10上面下载，然后cp到容器中去。 daizelai@GBCOM-20210524I MSYS /d/down docker cp wzs2_android_app-master.zip 12fb5145dd7b:/home/daizelai/app/ daizelai@GBCOM-20210524I MSYS /d/down 复制成功之后 [daizelai@12fb5145dd7b app]$ ls -l\rtotal 219492\r-rwxr-xr-x 1 root root 224759737 Oct 25 19:23 wzs2_android_app-master.zip\r[daizelai@12fb5145dd7b app]$ ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:3:7","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"3.8.解压项目 解压 [daizelai@12fb5145dd7b app]$ cd wzs2_android_app-master\r[daizelai@12fb5145dd7b wzs2_android_app-master]$ ls -l\rtotal 92\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 24 17:00 app\r-rw-rw-r-- 1 daizelai daizelai 3398 Oct 24 17:00 build.gradle\r-rw-rw-r-- 1 daizelai daizelai 6752 Oct 24 17:00 config.gradle\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 24 17:00 doc\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 24 17:00 gradle\r-rw-rw-r-- 1 daizelai daizelai 1542 Oct 24 17:00 gradle.properties\r-rw-rw-r-- 1 daizelai daizelai 5296 Oct 24 17:00 gradlew\r-rw-rw-r-- 1 daizelai daizelai 2176 Oct 24 17:00 gradlew.bat\rdrwxrwxr-x 5 daizelai daizelai 4096 Oct 24 17:00 library_base\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 24 17:00 library_common\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 24 17:00 library_main\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 24 17:00 library_res\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 24 17:00 module_call\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 24 17:00 module_check\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 24 17:00 module_index\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 24 17:00 module_login\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 24 17:00 module_message\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 24 17:00 module_mine\r-rw-rw-r-- 1 daizelai daizelai 713 Oct 24 17:00 README.md\r-rw-rw-r-- 1 daizelai daizelai 292 Oct 24 17:00 settings.gradle\rdrwxrwxr-x 4 daizelai daizelai 4096 Oct 24 17:00 version\r[daizelai@12fb5145dd7b wzs2_android_app-master]$ ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:3:8","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"3.9.编译 3.9.1.首次编译 编译 [daizelai@12fb5145dd7b wzs2_android_app-master]$ date\rTue Oct 25 19:31:16 CST 2022\r[daizelai@12fb5145dd7b wzs2_android_app-master]$ ./gradlew assembleRelease\r-bash: ./gradlew: Permission denied\r[daizelai@12fb5145dd7b wzs2_android_app-master]$ chmod +x gradlew\r[daizelai@12fb5145dd7b wzs2_android_app-master]$ ls -l gradlew\r-rwxrwxr-x 1 daizelai daizelai 5296 Oct 24 17:00 gradlew\r[daizelai@12fb5145dd7b wzs2_android_app-master]$ ./gradlew assembleRelease\rDownloading https://services.gradle.org/distributions/gradle-6.5-bin.zip\r.................................................................................................\rUnzipping /home/daizelai/.gradle/wrapper/dists/gradle-6.5-bin/6nifqtx7604sqp1q6g8wikw7p/gradle-6.5-bin.zip to /home/daizelai/.gradle/wrapper/dists/gradle-6.5-bin/6nifqtx7604sqp1q6g8wikw7p\rSet executable permissions for: /home/daizelai/.gradle/wrapper/dists/gradle-6.5-bin/6nifqtx7604sqp1q6g8wikw7p/gradle-6.5/bin/gradle\rWelcome to Gradle 6.5!\rHere are the highlights of this release:\r- Experimental file-system watching\r- Improved version ordering\r- New samples\rFor more details see https://docs.gradle.org/6.5/release-notes.html\rStarting a Gradle Daemon (subsequent builds will be faster)\r\u003e Configure project :app\rWARNING: The option 'android.useDeprecatedNdk' is deprecated.\rThe current default is 'false'.\rIt has been removed from the current version of the Android Gradle plugin.\rNdkCompile is no longer supported\rFAILURE: Build failed with an exception.\r* Where:\rBuild file '/home/daizelai/app/wzs2_android_app-master/app/build.gradle' line: 47\r* What went wrong:\rA problem occurred evaluating project ':app'.\r\u003e java.net.URISyntaxException: Illegal character in opaque part at index 2: D:\\code\\sign_file\\sc60_platform.jks\r* Try:\rRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\r* Get more help at https://help.gradle.org\rDeprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.\rUse '--warning-mode all' to show the individual deprecation warnings.\rSee https://docs.gradle.org/6.5/userguide/command_line_interface.html#sec:command_line_warnings\rBUILD FAILED in 48s\r[daizelai@12fb5145dd7b wzs2_android_app-master]$ 3.9.2.签名问题解决 上面的问题是因为没有签名文件导致，先去windows10中把签名文件拷贝到centos的容器去。 daizelai@GBCOM-20210524I MSYS /d/down\rcd ../code/sign_file/\rdaizelai@GBCOM-20210524I MSYS /d/code/sign_file\rls -l\rtotal 16\r-rw-r--r-- 1 daizelai 197121 3965 10月 14 11:02 build.gradle\r-rw-r--r-- 1 daizelai 197121 2224 7月 9 2021 metrosystem.jks\r-rw-r--r-- 1 daizelai 197121 2554 5月 11 2021 sc60_platform.jks\r-rw-r--r-- 1 daizelai 197121 2219 12月 18 2019 train_key\rdaizelai@GBCOM-20210524I MSYS /d/code/sign_file\rdocker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS\rNAMES\r85afb79f0070 konradkleine/docker-registry-frontend:v2 \"/bin/sh -c $START_S…\" 33 hours ago Up 6 hours 443/tcp, 0.0.0.0:8010-\u003e80/tcp\rregistry-apache\r3cf6d1551a79 registry \"/entrypoint.sh /etc…\" 35 hours ago Up 6 hours 0.0.0.0:5000-\u003e5000/tcp\rdocker-registry\r12fb5145dd7b centos:7.9.2009 \"/usr/sbin/init\" 2 days ago Up 6 hours 0.0.0.0:80-\u003e80/tcp, 0.0.0.0:9090-\u003e9090/tcp, 0.0.0.0:30000-30010-\u003e30000-30010/tcp, 0.0.0.0:2222-\u003e22/tcp, 0.0.0.0:3307-\u003e3306/tcp centos792009\r7bdeed70a75a zelai-blog:v1 \"hexo server\" 2 days ago Up 6 hours 0.0.0.0:8020-\u003e4000/tcp\rblog\r2730b907c0a0 gitlab/gitlab-ce:latest \"/assets/wrapper\" 4 weeks ago Up 6 hours (healthy) 22/tcp, 0.0.0.0:9010-\u003e80/tcp, 0.0.0.0:9443-\u003e443/tcp, 0.0.0.0:9022-\u003e8022/tcp\rgitlab\rdaizelai@GBCOM-20210524I MSYS /d/code/sign_file\rdocker cp sc60_platform.jks train_key 12fb5145dd7b:/home/daizelai/app/\r\"docker cp\" requires exactly 2 arguments.\rSee 'docker cp --help'.\rUsage: docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-\rdocker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH\rCopy files/folders between a container and the local filesystem\rdaizelai@GBCOM-20210524I MSYS /d/code/sign_file\rdaizelai@GBCOM-20210524I MSYS /d/","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:3:9","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"四、SZ14编译 ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:4:0","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"4.1.编译注意事项【重要】 注意事项 注意： 使用普通账号daizelai进行clone，不要使用root账号，否则后面只能使用root账号进行操作了。 编译时，使用的gradle版本，需要跟项目本身使用的gradle版本一致，如深圳14APP是gradle4.1，一开始使用/usr/local/gradle-6.5/bin/gradle clean assembleRelease一直失败的，gradle6.5版本是温州需要的。 要添加深圳14APP项目缺少的local.properties配置文件。 要配置深圳14APP项目app:build.gradle文件中的签名配置。 深圳14号线APP项目如果必须安装android-28，命令为android update sdk -u -a -t 53，记得一般说什么licenses的话，就是缺少相关组件了，安装一下就可以。 使用项目中自带的gradlew文件，记住需要给它+x权限哦。 需要给/usr/local/android-sdk-linux/build-tools目录权限为777，因为普通账号编译时也要往里写。 需要给/usr/local/android-sdk-linux/.android目录及其子目录777权限，执行chmod 777 -R /usr/local/android-sdk-linux/.android即可。 记得深圳14号线APP所有module下的build目录权限都不能为root，需要是普通账号daizelai才行。 sz14_android_app/app/build binder/build binder-annotations/build binder-compile/build eventlib/build gradle版本匹配方法 gralde版本匹配方法： 下载对应的版本到/usr/local/目录下安装，并配置环境变量，编译时使用全路径进行编译。 不下载gradle，直接编译，编译时会下载APP项目内置的gradle到当前操作账号的.android目录下。 ","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:4:1","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"4.2.失败的一次手动编译【失败】 4.2.1.下载源码 去gitlab上面下载源码，一定要以普通账号daizelai进行下载，不要使用root账号进行下载。 测试使用一下，可以看到因为没有配置SSH，所以直接git clone git@gitlab**是不行的，不过可以直接git clone http://gitlab。 注意：这里需要使用daizelai用户clone，不要像下面这样使用root账号哦。 [root@12fb5145dd7b app]# git clone git@gitlab.gbcom.com.cn:daizelai/sz14_android_app.git\rCloning into 'sz14_android_app'...\rgit@gitlab.gbcom.com.cn's password: Permission denied, please try again.\rgit@gitlab.gbcom.com.cn's password: Permission denied, please try again.\rgit@gitlab.gbcom.com.cn's password: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\rfatal: Could not read from remote repository.\rPlease make sure you have the correct access rights\rand the repository exists.\r[root@12fb5145dd7b app]# [root@12fb5145dd7b app]# [root@12fb5145dd7b app]# [root@12fb5145dd7b app]# [root@12fb5145dd7b app]# git clone http://gitlab.gbcom.com.cn/daizelai/sz14_android_app.git\rCloning into 'sz14_android_app'...\rUsername for 'http://gitlab.gbcom.com.cn': daizelai\rPassword for 'http://daizelai@gitlab.gbcom.com.cn': remote: Enumerating objects: 2459, done.\rremote: Total 2459 (delta 0), reused 0 (delta 0), pack-reused 2459\rReceiving objects: 100% (2459/2459), 228.19 MiB | 10.53 MiB/s, done.\rResolving deltas: 100% (1191/1191), done.\rChecking connectivity... done.\r[root@12fb5145dd7b app]#\r[root@12fb5145dd7b app]# ls -l\rtotal 219508\r-rwxr-xr-x 1 root root 2554 May 11 2021 sc60_platform.jks\rdrwxr-xr-x 12 root root 4096 Oct 26 10:50 sz14_android_app\r-rwxr-xr-x 1 root root 2219 Dec 18 2019 train_key\rdrwxrwxr-x 19 daizelai daizelai 4096 Oct 26 09:26 wzs2_android_app-master\r-rwxr-xr-x 1 root root 224759737 Oct 25 19:23 wzs2_android_app-master.zip\r[root@12fb5145dd7b app]# ls -l sz14_android_app\rtotal 168\rdrwxr-xr-x 6 root root 4096 Oct 26 10:50 app\rdrwxr-xr-x 3 root root 4096 Oct 26 10:50 binder\rdrwxr-xr-x 4 root root 4096 Oct 26 10:50 binder-annotations\rdrwxr-xr-x 4 root root 4096 Oct 26 10:50 binder-compile\r-rw-r--r-- 1 root root 1295 Oct 26 10:50 build.gradle\rdrwxr-xr-x 3 root root 4096 Oct 26 10:50 doc\rdrwxr-xr-x 3 root root 4096 Oct 26 10:50 eventlib\rdrwxr-xr-x 3 root root 4096 Oct 26 10:50 gradle\r-rw-r--r-- 1 root root 1279 Oct 26 10:50 gradle.properties\r-rw-r--r-- 1 root root 5296 Oct 26 10:50 gradlew\r-rw-r--r-- 1 root root 2176 Oct 26 10:50 gradlew.bat\r-rw-r--r-- 1 root root 108867 Oct 26 10:50 logs.txt\r-rw-r--r-- 1 root root 231 Oct 26 10:50 README.md\r-rw-r--r-- 1 root root 95 Oct 26 10:50 settings.gradle\rdrwxr-xr-x 4 root root 4096 Oct 26 10:50 version\r[root@12fb5145dd7b app]# 4.2.2.首次编译 【可略过，只是记录】开始编译，这里一开始使用的是安装的/usr/local/gradle-6.5/bin/gradle也就是gradle6.5进行编译，编译不成功。 [root@12fb5145dd7b sz14_android_app]# /usr/local/gradle-6.5/bin/gradle clean assembleRelease\rStarting a Gradle Daemon (subsequent builds will be faster)\rFAILURE: Build failed with an exception.\r* What went wrong:\rA problem occurred configuring project ':app'.\r\u003e SDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable.\r* Try:\rRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\r* Get more help at https://help.gradle.org\rDeprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.\rUse '--warning-mode all' to show the individual deprecation warnings.\rSee https://docs.gradle.org/6.5/userguide/command_line_interface.html#sec:command_line_warnings\rBUILD FAILED in 21s\r[root@12fb5145dd7b sz14_android_app]# touch local.properties\r[root@12fb5145dd7b sz14_android_app]# vi local.properties [root@12fb5145dd7b sz14_android_app]# head local.properties ## This file must *NOT* be checked into Version Control Systems,\r# as it contains information specific to your local configuration.\r#\r# Location of the SDK. This is only used by Gradle.\r# For customization when using a Version Control System, please read the\r# header note.\r#Thu Jun 02 10:41:38 CST 2022\r#ndk.dir=/Users/dai/Library/A","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:4:2","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","docker","android环境"],"content":"4.3.成功的一次手动编译【成功】 4.3.1.下载源码 使用普通账号daizelai通过git clone命令进行源码下载到本地。 [daizelai@12fb5145dd7b .]$ cd ..\r[daizelai@12fb5145dd7b app]$ ls -l\rtotal 219528\r-rw-r--r-- 1 daizelai daizelai 16704 Oct 26 16:41 build.gradle.sz14\r-rw-r--r-- 1 daizelai daizelai 428 Oct 26 16:41 local.properties.sz14\r-rwxr-xr-x 1 daizelai daizelai 2554 May 11 2021 sc60_platform.jks\r-rwxr-xr-x 1 daizelai daizelai 2219 Dec 18 2019 train_key\rdrwxrwxr-x 19 daizelai daizelai 4096 Oct 26 09:26 wzs2_android_app-master\r-rwxr-xr-x 1 root root 224759737 Oct 25 19:23 wzs2_android_app-master.zip\r[daizelai@12fb5145dd7b app]$ git clone http://gitlab.gbcom.com.cn/daizelai/sz14_android_app.git\rCloning into 'sz14_android_app'...\rUsername for 'http://gitlab.gbcom.com.cn': daizelai\rPassword for 'http://daizelai@gitlab.gbcom.com.cn': remote: Enumerating objects: 2459, done.\rremote: Total 2459 (delta 0), reused 0 (delta 0), pack-reused 2459\rReceiving objects: 100% (2459/2459), 228.19 MiB | 6.40 MiB/s, done.\rResolving deltas: 100% (1191/1191), done.\rChecking connectivity... done.\r[daizelai@12fb5145dd7b app]$ [daizelai@12fb5145dd7b app]$ [daizelai@12fb5145dd7b app]$ ls -l\rtotal 219532\r-rw-r--r-- 1 daizelai daizelai 16704 Oct 26 16:41 build.gradle.sz14\r-rw-r--r-- 1 daizelai daizelai 428 Oct 26 16:41 local.properties.sz14\r-rwxr-xr-x 1 daizelai daizelai 2554 May 11 2021 sc60_platform.jks\rdrwxrwxr-x 12 daizelai daizelai 4096 Oct 26 16:44 sz14_android_app\r-rwxr-xr-x 1 daizelai daizelai 2219 Dec 18 2019 train_key\rdrwxrwxr-x 19 daizelai daizelai 4096 Oct 26 09:26 wzs2_android_app-master\r-rwxr-xr-x 1 root root 224759737 Oct 25 19:23 wzs2_android_app-master.zip\r[daizelai@12fb5145dd7b app]$ cd sz14_android_app/\r[daizelai@12fb5145dd7b sz14_android_app]$ ls -l\rtotal 168\rdrwxrwxr-x 6 daizelai daizelai 4096 Oct 26 16:44 app\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 26 16:44 binder\rdrwxrwxr-x 4 daizelai daizelai 4096 Oct 26 16:44 binder-annotations\rdrwxrwxr-x 4 daizelai daizelai 4096 Oct 26 16:44 binder-compile\r-rw-rw-r-- 1 daizelai daizelai 1295 Oct 26 16:44 build.gradle\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 26 16:44 doc\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 26 16:44 eventlib\rdrwxrwxr-x 3 daizelai daizelai 4096 Oct 26 16:44 gradle\r-rw-rw-r-- 1 daizelai daizelai 1279 Oct 26 16:44 gradle.properties\r-rw-rw-r-- 1 daizelai daizelai 5296 Oct 26 16:44 gradlew\r-rw-rw-r-- 1 daizelai daizelai 2176 Oct 26 16:44 gradlew.bat\r-rw-rw-r-- 1 daizelai daizelai 108867 Oct 26 16:44 logs.txt\r-rw-rw-r-- 1 daizelai daizelai 231 Oct 26 16:44 README.md\r-rw-rw-r-- 1 daizelai daizelai 95 Oct 26 16:44 settings.gradle\rdrwxrwxr-x 4 daizelai daizelai 4096 Oct 26 16:44 version\r[daizelai@12fb5145dd7b sz14_android_app]$ cp ../local.properties.sz14 local.properties\r[daizelai@12fb5145dd7b sz14_android_app]$ cp ../build.gradle.sz14 app/build.gradle 4.3.2.配置签名 app/build.gradle // build.gradle文件自动apk签名 signingConfigs { // 系统签名 config { keyAlias 'gbcomdebugkey' keyPassword 'gbcom123' //storeFile file('/Users/dai/code/android/train_key/trainapp/platform.jks') //storeFile file('F:\\\\code\\\\android\\\\DCCarStationSim\\\\platform.jks') // storeFile file('../platform.jks') + storeFile file('/home/daizelai/app/sc60_platform.jks') storePassword 'gbcom123' } // 自定义签名 laiConfig { keyAlias 'key0' keyPassword 'gbcomdzl' + storeFile file('/home/daizelai/app/train_key') storePassword 'gbcomdzl' } } 4.3.3.添加缺少的项目文件 这里深圳14号线gitlab上的项目缺少local.properties文件，需要添加上。 [root@12fb5145dd7b sz14_android_app]# /usr/local/gradle-6.5/bin/gradle clean assembleRelease\rStarting a Gradle Daemon (subsequent builds will be faster)\rFAILURE: Build failed with an exception.\r* What went wrong:\rA problem occurred configuring project ':app'.\r\u003e SDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable.\r* Try:\rRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\r* Get more help at https://help.gradle.org\rDeprecated Gra","date":"2022-10-26","objectID":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/:4:3","tags":["原创","android","gradle","android sdk","centos7.9","linux"],"title":"windows10上docker中centos7.9安装android环境重新记录版","uri":"https://daizelai.github.io/posts/android/20221025_2016windows10%E4%B8%8Adocker%E4%B8%ADcentos7.9%E5%AE%89%E8%A3%85android%E7%8E%AF%E5%A2%83%E9%87%8D%E6%96%B0%E8%AE%B0%E5%BD%95%E7%89%88/"},{"categories":["原创","android","as","插件"],"content":"在as中使用插件","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"20221017_1639as中插件的使用 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:0:0","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"一、描述 by daizelai on 2022/10/17 16:49 android studio的插件使用。 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:1:0","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"二、开始 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:0","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.1.JavaDoc 使用idea生成开发文档，报错（错误: 编码GBK的不可映射字符）并出现乱码问题解决： 需要指定编码，菜单 Tools -\u003e Generate JavaDoc，弹出配置面板 在Other command line arguments 栏输入：-encoding utf-8 -charset utf-8 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:1","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.2.Json Parser 自动解析Json数据插件，格式化json代码。 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:2","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.3.Sexy Editor ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:3","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.4.PlantUML Integration 强烈推荐大家画UML 图时使用PlantUML，理由是其他大多数作图软件都采用拖拽式，对于有些强迫症的人会浪费很多时间进行对齐等操作。 该软件还提供了 IDEA 插件，在IDEA中创建 plantUML 的图形支持实时预览。 通过 PlantUML 官网给出的示例，大家可以快速上手。 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:4","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.5.IdeaVim 设定激活/关闭IdeaVim模拟器的快捷键，设定为Ctrl+;（分号） ideaVim插件配置快捷键 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:5","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.6.Rainbow Brackets 彩虹括号，让自己的代码编辑页面有了一点靓丽。 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:6","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.7.Markdown Navigator 文档编辑器，CSDN的博客也是用的这种编辑器，在Android Studio上就可以写博客了。 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:7","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.8.Background Image Plus 该插件支持用户自定义设置Idea的背景图，并且能修改背景图的透明度； 配置Background ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:8","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.9.jclasslib bytecode viewer 下面要隆重介绍的是一款可视化的字节码查看插件：jclasslib 。 使用方法： 1.在 IDEA 打开想研究的类； 2.编译该类或者直接编译整个项目（ 如果想研究的类在 jar 包中，此步可略过）； 3.打开“view” 菜单，选择“Show Bytecode With jclasslib” 选项； 4.选择上述菜单项后 IDEA 中会弹出 jclasslib 工具窗口。 那么有自带的强大的反汇编工具 javap 还有必要用这个插件吗？ 这个插件的强大之处在于： 1、不需要敲命令，简单直接，在右侧方便和源代码进行对比学习； 2、字节码命令支持超链接，点击其中的虚拟机指令即可跳转到 jvms 相关章节，超级方便。 该插件对我们学习虚拟机指令有极大的帮助。 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:9","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.10.Codota 另外一个不得不说的就是专栏中提到的辅助开发神器: Codota。 该插件的强大之处在于： 1.支持智能代码自动提示，该功能可以增强 IDEA 的代码提示功能； 2.支持 JDK 和知名第三方库的函数的使用方法搜索，可以看到其他知名开源项目对该函数的用法。 当我们第一次使用某个类，对某个函数不够熟悉时，可以通过该插件搜索相关用法，快速模仿学习。 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:10","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.11.Maven Helper 这是一个idea的插件。 现在Java项目通常会使用 maven 或者 gradle 构建，对于maven 项目来说， jar 包冲突非常常见。 大家可以安装该插件，安装后 IDEA 中打开 pom.xml 文件时，就会多出一个 “Dependency Analyzer” 选项卡。 如上图所示，该插件支持值插件冲突的 jar 包，可以选择冲突的 jar 包将其 exclude 掉。 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:11","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.12.FindBugs 程序员总是想尽可能地避免写 BUG， FindBugs 作为静态代码检查插件，可以检查你代码中的隐患，并给出原因。 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:12","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.13.SequenceDiagram as装了，没看到在哪里使用，可能是idea java IDE用。 SequenceDiagram 可以根据代码调用链路自动生成时序图，超级赞，超级推荐！ 这对研究源码，梳理工作中的业务代码有极大的帮助，堪称神器。 安装完成后，在某个类的某个函数中，右键 –\u003e Sequence Diagaram 即可调出。 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:13","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.14.Translation 没啥用，因为无法翻译，google被墙 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:14","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["原创","android","as","插件"],"content":"2.15.离线 Java 反编译工具 2.15.1.反编译软件 很多人担心在线反编译可能会引起代码泄露等，所以倾向于使用本地的反编译工具。 这里推荐两款软件：JD-GUI(android studio无法使用，as重启后提示idea中可以)和 Luyten。 JD-GUI 是一款可以根据 Java的 class 文件反编译出其源码的工具，界面简单，功能强大。 另外一个非常好用的反编译软件为 Luyten， 它是反编译工具 Procyon 的可视化显示工具。 大家可以在其 github 上下载安装：https://github.com/deathmarine/Luyten/releases。 该软件的用法和 JD-GUI 类似。 图形界面反编译虽然更直观，但是如果我们想反编译Linux服务器上的类文件可咋办呢？ 我们可以通过 Jad 、CFR、Procyon、ernflower、 JD等反编译工具。 另外知名的阿里开源 Java诊断工具 arthas 也支持 jad 命令，可以将 JVM 中实际运行的 class 文件的字节码反编译成 Java 代码，便于理解业务和排查问题。 举一个真实发生过的典型的场景： 有一次代码发布上线，但是从功能表现看线上仍然是“旧代码”，但是从发布的 git 提交版本来看是最新版。 此时就可以使用 jad 反编译该类，来核查该问题。 2.15.2.反汇编 这里简单介绍 Java 反编译和反汇编的区别。 这里说的反编译是指：将 class 文件反编译成 Java 源码的过程。 这里说的反汇编是指：将class 文件反解析为更可读的虚拟机指令的过程。 反汇编最权威和强大的当属 JDK 自带的 javap 工具，具体用法直接输入帮助指令javap -help 即可查看： 用法: javap \u003coptions\u003e \u003cclasses\u003e 其中, 可能的选项包括: -help --help -? 输出此用法消息 -version 版本信息 -v -verbose 输出附加信息 -l 输出行号和本地变量表 -public 仅显示公共类和成员 -protected 显示受保护的/公共类和成员 -package 显示程序包/受保护的/公共类 和成员 (默认) -p -private 显示所有类和成员 -c 对代码进行反汇编 -s 输出内部类型签名 -sysinfo 显示正在处理的类的 系统信息 (路径, 大小, 日期, MD5 散列) -constants 显示最终常量 -classpath \u003cpath\u003e 指定查找用户类文件的位置 -cp \u003cpath\u003e 指定查找用户类文件的位置 -bootclasspath \u003cpath\u003e 覆盖引导类文件的位置 另外一个比较好用的反汇编工具为 jclasslib。 在IDEA 插件中心中还可以搜到该工具的IDEA插件。 当然，还有很多其他好用的 Java 反编译和反汇编软件，希望大家平时多尝试，多练习。 希望大家能够熟练掌握其中一两种，能够快速反编译和反汇编，帮助自己学习知识和解决问题。 ","date":"2022-10-17","objectID":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/:2:15","tags":["原创","android","as","插件"],"title":"as中插件的使用","uri":"https://daizelai.github.io/posts/as/20221017_1639as%E4%B8%AD%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["ssh","免密码登录ssh"],"content":"20221016_1619ssh免密码登录 ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:0:0","tags":["ssh","免密码登录ssh","远程登录","原创"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["ssh","免密码登录ssh"],"content":"一、描述 ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:1:0","tags":["ssh","免密码登录ssh","远程登录","原创"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["ssh","免密码登录ssh"],"content":"1.1.前言 by daizelai 2022/10/16 16:20 本文介绍如何在Windows10上面免密码登录远程centos服务器的ssh ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:1:1","tags":["ssh","免密码登录ssh","远程登录","原创"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["ssh","免密码登录ssh"],"content":"1.2.介绍 A免密登录B的两种方式 比如A本地台式机电脑上远程登录linux系统的B服务器 1.2.1.方式一，上传A的pub公钥到B服务器 把A的公钥pub文件，放在B的~/authorized_keys文件中 打开A的id_isa.pub的文件，复制并粘贴到B的~/authorized_keys文件的最下方，不要带多余的空格和其他符号 vim ~/authorized_keys #插入B服务器的的内容底部 authorized_keys文件里保存了其他人的公钥列表，代表这些服务器可以直接登录自己。 命令执行过程：A会用自己的.ssh/目录下的私钥文件，例如id_rds进行加密登录。而B会用自己authorized_keys保存的公钥内容进行解密，如果解密成功，就认为A是合法用户，让A免密登录。 注： 所以A的目录下必须有id_rsa文件。 1.2.2.方式二、下载B的私钥文件，生成pem文件 新建一个pem文件，把B的private内容粘贴进去 利用ssh命令即可登录 ssh -i b的私钥.pem文件 root@B的ip地址 B的私钥文件（原本只能B自己知道）给了A，证明B足够信任A，A可以直接登录B 命令执行过程：A会用 -i指定的私钥文件（这里就是B的私钥文件）加密，B在自己的authorized_keys中用自己的公钥文件解密。如果成功，就认为A是合法用户，让A免密登录。 ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:1:2","tags":["ssh","免密码登录ssh","远程登录","原创"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["ssh","免密码登录ssh"],"content":"二、免密码SSH登录 ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:2:0","tags":["ssh","免密码登录ssh","远程登录","原创"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["ssh","免密码登录ssh"],"content":"2.1.生成密钥 密钥生成说明 C:\\Users\\你的用户名\u003essh-keygen -t rsa -b 2048 【上面一行的-t参数代表类型type，表示用rsa方式加密；-b参数，这里表示生成2048位的公钥】\r【输完ssh-keygen -t rsa -b 2048后回车，生成公钥-私钥对总共只用到这一个命令，以下是配置部分】\rGenerating public/private rsa key pair.\rEnter file in which to save the key (/cygdrive/c/Users/你的用户名/.ssh/id_rsa): 【在上一行的冒号后输入保存私钥的文件名。默认是在C:\\Users\\你的用户名\\.ssh\\ 这个路径下，生成名为id_rsa的文件。】\r【另外在该路径下还会自动生成id_rsa.pub文件，用来保存公钥。】\rEnter passphrase (empty for no passphrase):【在这里输入私钥密码】\rEnter same passphrase again:【重复输入私钥密码】\rYour identification has been saved in c/Users/你的用户名/.ssh/id_rsa.\rYour public key has been saved in c/Users/你的用户名/.ssh/id_rsa.pub.\r【上面两行说明了你私钥、公钥的保存位置】\rThe key fingerprint is:\rxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 在lai的windows台式机上面也就是A电脑上面生成密钥。 PS C:\\Users\\daizelai\\.ssh\u003e dir\r目录: C:\\Users\\daizelai\\.ssh\rMode LastWriteTime Length Name\r---- ------------- ------ ----\r-a---- 2022/10/3 15:11 800 config\r-a---- 2022/5/12 15:59 2610 id_rsa\r-a---- 2022/5/12 15:59 575 id_rsa.pub\r-a---- 2022/9/27 14:03 2655 id_rsa_itcss_gitlab\r-a---- 2022/9/27 14:03 572 id_rsa_itcss_gitlab.pub\r-a---- 2022/9/27 14:24 1323 known_hosts\r-a---- 2021/6/21 10:27 101 known_hosts.old\rPS C:\\Users\\daizelai\\.ssh\u003e date\r2022年10月16日 14:03:33\rPS C:\\Users\\daizelai\\.ssh\u003e ssh-keygen -t rsa -f C:/Users/daizelai/.ssh/id_rsa_centos79\rGenerating public/private rsa key pair.\rEnter passphrase (empty for no passphrase): #这里我没有输入密码\rEnter same passphrase again:\rYour identification has been saved in C:/Users/daizelai/.ssh/id_rsa_centos79.\rYour public key has been saved in C:/Users/daizelai/.ssh/id_rsa_centos79.pub.\rThe key fingerprint is:\rSHA256:zt84eZ7ml+45laBc9I/DL+4aw72RAHP5brmWJ1X/Qic daizelai@GBCOM-20210524I\rThe key's randomart image is:\r+---[RSA 3072]----+\r| |\r| o |\r| o + . |\r| + + ..|\r| S . +.o.=|\r| o + +E+*|\r| o .+.BX.|\r| .ooo=X=+|\r| o**OO* |\r+----[SHA256]-----+\rPS C:\\Users\\daizelai\\.ssh\u003e dir\r目录: C:\\Users\\daizelai\\.ssh\rMode LastWriteTime Length Name\r---- ------------- ------ ----\r-a---- 2022/10/3 15:11 800 config\r-a---- 2022/5/12 15:59 2610 id_rsa\r-a---- 2022/5/12 15:59 575 id_rsa.pub\r-a---- 2022/10/16 14:04 2610 id_rsa_centos79\r-a---- 2022/10/16 14:04 579 id_rsa_centos79.pub\r-a---- 2022/9/27 14:03 2655 id_rsa_itcss_gitlab\r-a---- 2022/9/27 14:03 572 id_rsa_itcss_gitlab.pub\r-a---- 2022/9/27 14:24 1323 known_hosts\r-a---- 2021/6/21 10:27 101 known_hosts.old\rPS C:\\Users\\daizelai\\.ssh\u003e ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:2:1","tags":["ssh","免密码登录ssh","远程登录","原创"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["ssh","免密码登录ssh"],"content":"2.2.复制公钥到B服务器 [daizelai@0883a4966fee ~]$ date\rSun Oct 16 08:27:22 UTC 2022\r[daizelai@0883a4966fee ~]$ whoami\rdaizelai\r[daizelai@0883a4966fee ~]$ pwd\r/home/daizelai\r[daizelai@0883a4966fee ~]$ ls -lah\rtotal 36K\rdrwx------ 4 daizelai daizelai 4.0K Oct 16 07:26 .\rdrwxr-xr-x 1 root root 4.0K Oct 13 09:58 ..\rdrwxrwxr-x 2 daizelai daizelai 4.0K Oct 14 01:36 aaa\r-rw-rw-r-- 1 daizelai daizelai 4 Oct 14 01:03 a.txt\r-rw------- 1 daizelai daizelai 226 Oct 14 07:22 .bash_history\r-rw-r--r-- 1 daizelai daizelai 18 Apr 1 2020 .bash_logout\r-rw-r--r-- 1 daizelai daizelai 193 Apr 1 2020 .bash_profile\r-rw-r--r-- 1 daizelai daizelai 231 Apr 1 2020 .bashrc\rdrwx------ 2 daizelai daizelai 4.0K Oct 16 07:53 .ssh\r[daizelai@0883a4966fee ~]$ cat .ssh/autherized_keys\rcat: .ssh/autherized_keys: No such file or directory\r[daizelai@0883a4966fee ~]$\r[daizelai@0883a4966fee ~]$ echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/+0+SWT/18/qrClf49vZ8L4HQ2p3ZSkoEQC82UpuuuDf0IPMK5kqKISFTn9QzB+5R0GQ1gXiYQeNhFSvuWi8R5sdDtJbVphaLh/FGxJhah8SAE7w+Y4i7XKsMMuOdFD60IQuvm3qDnlT4B3DMVr31FoThzLdAGWF6DN7l9aKWUPDkWp0YExEYdUJTusdgXe8X6JP4qnb5AiQeOpyopl+VNAf6I7rSFD41IjiaetQpc6cdrMu7nh8yQWM0jr0i7PmzlHMws8k5zvDf52LOKOqfcq1ml9hINB1LsoFoOOpIjoDj/TbXLWCRH3J8s+jPgT50IvDM8wCsEBH0PqY7sJvU2/GRIP7iFZqrb+YFvq9+dStUpnXEfU7hg8D5CFjJAA3svoniyFG9aYCNez/W0kNDW40CZ6ABHEwMkOkee3/hbuX/eP58+zdjbjZ4O8DOLZWz7y7W2ok4BGk2T4PTsNTWk9KgpeiK7OlzAO5SlMEVqz51RBgKMBZMGpSU/kWbK6M= daizelai@GBCOM-20210524I\" \u003e .ssh/autherized_keys\r[daizelai@0883a4966fee ~]$ cat .ssh/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/+0+SWT/18/qrClf49vZ8L4HQ2p3ZSkoEQC82UpuuuDf0IPMK5kqKISFTn9QzB+5R0GQ1gXiYQeNhFSvuWi8R5sdDtJbVphaLh/FGxJhah8SAE7w+Y4i7XKsMMuOdFD60IQuvm3qDnlT4B3DMVr31FoThzLdAGWF6DN7l9aKWUPDkWp0YExEYdUJTusdgXe8X6JP4qnb5AiQeOpyopl+VNAf6I7rSFD41IjiaetQpc6cdrMu7nh8yQWM0jr0i7PmzlHMws8k5zvDf52LOKOqfcq1ml9hINB1LsoFoOOpIjoDj/TbXLWCRH3J8s+jPgT50IvDM8wCsEBH0PqY7sJvU2/GRIP7iFZqrb+YFvq9+dStUpnXEfU7hg8D5CFjJAA3svoniyFG9aYCNez/W0kNDW40CZ6ABHEwMkOkee3/hbuX/eP58+zdjbjZ4O8DOLZWz7y7W2ok4BGk2T4PTsNTWk9KgpeiK7OlzAO5SlMEVqz51RBgKMBZMGpSU/kWbK6M= daizelai@GBCOM-20210524I\r[daizelai@0883a4966fee ~]$ ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:2:2","tags":["ssh","免密码登录ssh","远程登录","原创"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["ssh","免密码登录ssh"],"content":"2.3.配置ssh 这里是用root账号登录B服务器电脑里，对sshd进行配置的。 [root@0883a4966fee ~]# vi /etc/ssh/sshd_config\rPermitRootLogin yes\rPubkeyAuthentication yes\rPasswordAuthentication yes\rAuthorizedKeysFile .ssh/authorized_keys ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:2:3","tags":["ssh","免密码登录ssh","远程登录","原创"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["ssh","免密码登录ssh"],"content":"2.4.配置root账号authorized_keys [daizelai@0883a4966fee ~]$ su - root\rPassword: Last login: Sun Oct 16 07:58:58 UTC 2022 from gateway on pts/2\rLast failed login: Sun Oct 16 08:22:36 UTC 2022 from gateway on ssh:notty\rThere were 4 failed login attempts since the last successful login.\r[root@0883a4966fee ~]# date\rSun Oct 16 08:32:49 UTC 2022\r[root@0883a4966fee ~]# ls -lah total 68K\rdr-xr-x--- 1 root root 4.0K Oct 16 07:48 .\rdrwxr-xr-x 1 root root 4.0K Oct 4 06:49 ..\r-rw------- 1 root root 3.4K Nov 13 2020 anaconda-ks.cfg\rdrwxr-xr-x 4 root root 4.0K Oct 6 01:50 .android\r-rw------- 1 root root 2.4K Oct 16 08:03 .bash_history\r-rw-r--r-- 1 root root 18 Dec 29 2013 .bash_logout\r-rw-r--r-- 1 root root 176 Dec 29 2013 .bash_profile\r-rw-r--r-- 1 root root 176 Dec 29 2013 .bashrc\rdrwxr-xr-x 3 root root 4.0K Oct 4 06:35 .cache\r-rw-r--r-- 1 root root 100 Dec 29 2013 .cshrc\rdrwxr-xr-x 10 root root 4.0K Oct 6 02:15 .gradle\rdrwxr-xr-x 3 root root 4.0K Oct 4 06:20 .groovy\rdrwxr-xr-x 3 root root 4.0K Oct 4 06:09 .java\rdrwxr-xr-x 3 root root 4.0K Oct 5 06:32 .kotlin\r-rw------- 1 root root 126 Oct 14 07:21 .mysql_history\rdrwxr-xr-x 2 root root 4.0K Oct 16 07:51 .ssh\r-rw-r--r-- 1 root root 129 Dec 29 2013 .tcshrc\r[root@0883a4966fee ~]# ls -lah .ssh/\rtotal 12K\rdrwxr-xr-x 2 root root 4.0K Oct 16 07:51 .\rdr-xr-x--- 1 root root 4.0K Oct 16 07:48 ..\r-rw-r--r-- 1 root root 578 Oct 16 07:49 authorized_keys\r[root@0883a4966fee ~]#\r[root@0883a4966fee ~]# cat .ssh/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/+0+SWT/18/qrClf49vZ8L4HQ2p3ZSkoEQC82UpuuuDf0IPMK5kqKISFTn9QzB+5R0GQ1gXiYQeNhFSvuWi8R5sdDtJbVphaLh/FGxJhah8SAE7w+Y4i7XKsMMuOdFD60IQuvm3qDnlT4B3DMVr31FoThzLdAGWF6DN7l9aKWUPDkWp0YExEYdUJTusdgXe8X6JP4qnb5AiQeOpyopl+VNAf6I7rSFD41IjiaetQpc6cdrMu7nh8yQWM0jr0i7PmzlHMws8k5zvDf52LOKOqfcq1ml9hINB1LsoFoOOpIjoDj/TbXLWCRH3J8s+jPgT50IvDM8wCsEBH0PqY7sJvU2/GRIP7iFZqrb+YFvq9+dStUpnXEfU7hg8D5CFjJAA3svoniyFG9aYCNez/W0kNDW40CZ6ABHEwMkOkee3/hbuX/eP58+zdjbjZ4O8DOLZWz7y7W2ok4BGk2T4PTsNTWk9KgpeiK7OlzAO5SlMEVqz51RBgKMBZMGpSU/kWbK6M= daizelai@GBCOM-20210524I\r[root@0883a4966fee ~]# ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:2:4","tags":["ssh","免密码登录ssh","远程登录","原创"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["ssh","免密码登录ssh"],"content":"2.5.配置普通账号daizelai登录 下面是设置非root账号daizelai的免密码登录。 特别注意：.ssh目录的权限为700，其下文件authorized_keys和私钥的权限为600，否则会因为权限问题导致无法免密码登录。zelai就是因为这个问题一开始怎么也登录不了，后面就如下设置权限就可以登录了。 [daizelai@0883a4966fee .ssh]$ date\rSun Oct 16 08:14:44 UTC 2022\r[daizelai@0883a4966fee .ssh]$ whoami\rdaizelai\r[daizelai@0883a4966fee .ssh]$ pwd\r/home/daizelai/.ssh\r[daizelai@0883a4966fee .ssh]$\r[daizelai@0883a4966fee .ssh]$ cd ..\r[daizelai@0883a4966fee ~]$ ls -lah\rtotal 36K\rdrwx------ 4 daizelai daizelai 4.0K Oct 16 07:26 .\rdrwxr-xr-x 1 root root 4.0K Oct 13 09:58 ..\rdrwxrwxr-x 2 daizelai daizelai 4.0K Oct 14 01:36 aaa\r-rw-rw-r-- 1 daizelai daizelai 4 Oct 14 01:03 a.txt\r-rw------- 1 daizelai daizelai 226 Oct 14 07:22 .bash_history\r-rw-r--r-- 1 daizelai daizelai 18 Apr 1 2020 .bash_logout\r-rw-r--r-- 1 daizelai daizelai 193 Apr 1 2020 .bash_profile\r-rw-r--r-- 1 daizelai daizelai 231 Apr 1 2020 .bashrc\rdrwxrwxr-x 2 daizelai daizelai 4.0K Oct 16 07:53 .ssh\r[daizelai@0883a4966fee ~]$ chmod 700 .ssh\r[daizelai@0883a4966fee ~]$ ls -lah\rtotal 36K\rdrwx------ 4 daizelai daizelai 4.0K Oct 16 07:26 .\rdrwxr-xr-x 1 root root 4.0K Oct 13 09:58 ..\rdrwxrwxr-x 2 daizelai daizelai 4.0K Oct 14 01:36 aaa\r-rw-rw-r-- 1 daizelai daizelai 4 Oct 14 01:03 a.txt\r-rw------- 1 daizelai daizelai 226 Oct 14 07:22 .bash_history\r-rw-r--r-- 1 daizelai daizelai 18 Apr 1 2020 .bash_logout\r-rw-r--r-- 1 daizelai daizelai 193 Apr 1 2020 .bash_profile\r-rw-r--r-- 1 daizelai daizelai 231 Apr 1 2020 .bashrc\rdrwx------ 2 daizelai daizelai 4.0K Oct 16 07:53 .ssh\r[daizelai@0883a4966fee ~]$ cd .ssh\r[daizelai@0883a4966fee .ssh]$ ls -l\rtotal 4\r-rwxrwxrwx 1 daizelai daizelai 578 Oct 16 06:08 authorized_keys\r[daizelai@0883a4966fee .ssh]$ chmod 600 authorized_keys [daizelai@0883a4966fee .ssh]$ ls -l\rtotal 4\r-rw------- 1 daizelai daizelai 578 Oct 16 06:08 authorized_keys\r[daizelai@0883a4966fee ~]$ cd\r[daizelai@0883a4966fee ~]$ pwd\r/home/daizelai\r[daizelai@0883a4966fee ~]$ cat .ssh/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/+0+SWT/18/qrClf49vZ8L4HQ2p3ZSkoEQC82UpuuuDf0IPMK5kqKISFTn9QzB+5R0GQ1gXiYQeNhFSvuWi8R5sdDtJbVphaLh/FGxJhah8SAE7w+Y4i7XKsMMuOdFD60IQuvm3qDnlT4B3DMVr31FoThzLdAGWF6DN7l9aKWUPDkWp0YExEYdUJTusdgXe8X6JP4qnb5AiQeOpyopl+VNAf6I7rSFD41IjiaetQpc6cdrMu7nh8yQWM0jr0i7PmzlHMws8k5zvDf52LOKOqfcq1ml9hINB1LsoFoOOpIjoDj/TbXLWCRH3J8s+jPgT50IvDM8wCsEBH0PqY7sJvU2/GRIP7iFZqrb+YFvq9+dStUpnXEfU7hg8D5CFjJAA3svoniyFG9aYCNez/W0kNDW40CZ6ABHEwMkOkee3/hbuX/eP58+zdjbjZ4O8DOLZWz7y7W2ok4BGk2T4PTsNTWk9KgpeiK7OlzAO5SlMEVqz51RBgKMBZMGpSU/kWbK6M= daizelai@GBCOM-20210524I\r[daizelai@0883a4966fee ~]$ 最好重启ssh服务生效。 [daizelai@0883a4966fee .ssh]$ /bin/systemctl restart sshd.service\r==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===\rAuthentication is required to manage system services or units.\rAuthenticating as: root\rPassword: ==== AUTHENTICATION COMPLETE ===\r[daizelai@0883a4966fee .ssh]$ ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:2:5","tags":["ssh","免密码登录ssh","远程登录","原创"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["ssh","免密码登录ssh"],"content":"2.6.客户端登录效果 下面是在我的台式机客户端上面使用WindTerm配置密钥登录B服务器。 新增ssh连接会话 配置密钥登录 下面是使用WindTerm登录效果 Last login: Sun Oct 16 08:12:48 2022 from gateway\r[daizelai@0883a4966fee ~]$ ","date":"2022-10-16","objectID":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/:2:6","tags":["ssh","免密码登录ssh","远程登录","原创"],"title":"ssh免密码登录","uri":"https://daizelai.github.io/posts/linux/20221016_1619ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"温州S2号线固定台站选区广播调试记录","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"20221010_1750温州S2号线固定台站选区广播调试记录 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:0:0","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"一、描述 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:1:0","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"1.1.前言 by daizelai on 2022/10/10 18:27 温州S2号线固定台APP站选区广播调试对接记录。 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:1:1","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"1.2.对接文档 PA-PIS音视频统一信息服务系统接口协议202000228（18号线专用无线系统） ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:1:2","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"1.3.调试记录 时间 已方调试 对方调试 修改 结果 2022/10/10 daizelai/jiangfuqiang 林汐/武林过客 +86号码问题 已修改 2022/10/10 daizelai/jiangfuqiang 林汐/武林过客 广播密码问题，123修改为1234 已修改 2022/10/10 daizelai/jiangfuqiang 林汐/武林过客 广播账号问题，192.168.99.1修改为user 已修改 2022/10/10 daizelai/jiangfuqiang 林汐/武林过客 广播账号问题，对方写死的1修改为user 已修改 2022/10/10 daizelai/jiangfuqiang 林汐/武林过客 对方广播服务器问题，重启后http接口已通 已修改 2022/10/11 daizelai/jiangfuqiang 林汐/武林过客 已获取appid和token。但start_mic时解析失败，初步确定为api过来的格式不对 已修改 2022/10/11 daizelai/jiangfuqiang 林汐/武林过客 app解析start_mic报文也有问题，出到V1.1.4版本明天测试 已修改 2022/10/12 daizelai/jiangfuqiang 林汐/武林过客 广播服务器stop_mic问题，对方不是DELETE，而是用的POST，后对方修改成DELETE搞定 已修改 2022/10/12 daizelai/jiangfuqiang 林汐/武林过客 广播服务器区域问题，已出新版本 已修改 2022/10/12 daizelai/jiangfuqiang 林汐/武林过客 广播服务器问题调试初步完成，广播正常 已修改 2022/10/13 daizelai/jiangfuqiang 林汐/武林过客 广播服务器区域问题，已出新版本1.2.4测试，广播正常 已修改 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:1:3","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"二、实验室广播环境 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:2:0","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"2.1.各服务环境 笔记本windows10运行广播wzs2_staton.jar 笔记本PA广播地址：192.168.3.13 笔记本PA广播端口：8086 DIS服务器地址：192.168.13.177/192.0.1.121 主机地址：192.168.42.131/192.168.3.12 终端地址：192.168.42.130 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:2:1","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"三、站区广播配置 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:3:0","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"3.1.调度配置 因为DC配置区域广播组失败，这里直接手动在dis_wz2数据库中配置区域广播组。 当然dc中的群里管理处，需要看到这个上行或下行广播组，是要包含这个固定台账号的 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:3:1","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"3.2.固定台配置 固定台开局配置之PA服务地址：192.168.42.131 固定台开局配置之PA服务端口：8086 固定台通过向主机发送http访http://192.168.42.131:8086这个地址，主机发现这个端口就会重定向到广播服务器192.168.3.13。 查看APP是否获取得区域广播组的配置 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:3:2","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"3.3.固定台主机配置 固定台主机需要配置重定向功能，温州S2号线车载主机查看重定向。 root@TA30-72:/sbin# pwd\r/sbin\rroot@TA30-72:/sbin# cat e110forwardbroaudio #def config\re110ip=\"192.0.4.66\"\rta30ip_e=\"192.0.4.67\"\rbroaudioip=\"172.17.7.23\"\rta30ip_b=\"172.17.7.108\"\rbroaudioPort=\"8086\"\r#############################################################\r# nvram key list\r# cfg_app_ip # ipv4_0_ip_address # cfg_app_broaudio # ipv4_ip_broaudio\r# ipv4_mask_broaudio\r# cfg_app_broaudioPort\r############################################################\r#get cfg from uci\re110ip=`uci get ta30.config.cfg_app_ip`\rta30ip_e=`uci get network.lan.ipaddr`\rbroaudioip=`uci get ip_redirect.config.cfg_app_broaudio`\rta30ip_b=`uci get ip_redirect.config.cfg_ipv4_ip_broaudio`\rbroaudioPort=`uci get ip_redirect.config.cfg_app_broaudioPort`\r#config to system\r#echo \"iptables -t nat -A PREROUTING -s $e110ip -d $ta30ip_e -p tcp --dport $broaudioPort -j DNAT --to-destination $broaudioip\"\riptables -t nat -F\riptables -t nat -A PREROUTING -s $e110ip -d $ta30ip_e -p tcp --dport $broaudioPort -j DNAT --to-destination $broaudioip\riptables -t nat -A POSTROUTING -s $e110ip -d $broaudioip -p tcp --dport $broaudioPort -j SNAT --to-source $ta30ip_b\riptables -t nat -A PREROUTING -s $broaudioip -d $ta30ip_b -p tcp --sport $broaudioPort -j DNAT --to-destination $e110ip\riptables -t nat -A POSTROUTING -s $broaudioip -d $e110ip -p tcp --sport $broaudioPort -j SNAT --to-source $ta30ip_e\rifconfig br-lan:2 promisc\r#show config\riptables -t nat -vnL\rroot@TA30-72:/sbin# iptables -t nat -vnL\rChain PREROUTING (policy ACCEPT 19642 packets, 3225K bytes)\rpkts bytes target prot opt in out source destination 18 1080 DNAT tcp -- * * 192.168.42.130 192.168.42.131 tcp dpt:8086 to:192.168.3.13 0 0 DNAT tcp -- * * 192.168.3.13 192.168.3.12 tcp spt:8086 to:192.168.42.130 Chain INPUT (policy ACCEPT 1156 packets, 74610 bytes)\rpkts bytes target prot opt in out source destination Chain OUTPUT (policy ACCEPT 1250 packets, 84936 bytes)\rpkts bytes target prot opt in out source destination Chain POSTROUTING (policy ACCEPT 1334 packets, 92385 bytes)\rpkts bytes target prot opt in out source destination 18 1080 SNAT tcp -- * * 192.168.42.130 192.168.3.13 tcp dpt:8086 to:192.168.3.12 0 0 SNAT tcp -- * * 192.168.3.13 192.168.42.130 tcp spt:8086 to:192.168.42.131 root@TA30-72:/sbin# ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:3:3","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"四、站选区广播现场调试 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:4:0","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"4.1.固定台站点名称问题 问题1，固定台左上角只显示站点ID了，应该显示站点名称 问题2，PA状态栏连接状态不对。 13：41，温州S2号线APP，温州S2号线固定台站选区广播模拟器放到153网盘上了。 路径：\\10.1.1.154\\00-网络u盘\\地铁集群二开项目\\版本\\APP\\温州S2\\FX\\站选区模拟器\\wzs2_station_broadcast_v0.0.2_dev.jar 14:11, 温州S2号线APP，产口四部，1【PA还没配置 上面图标显示都是绿的】2【站名显示的是数字，10应该为永兴站】。 14：26, 温州S2号线APP，产口四部郑文杰提出来的温州S2号线APP与DBA接口GetStatusRsp，少了很多字段。 15：27，温州S2号线APP，修复了上面《1【PA还没配置 上面图标显示都是绿的】2【站名显示的是数字，10应该为永兴站】》两个BUG。 15：39，温州S2号线APP，产品四部群里给蒋富旨发了一个温州固定台临时版本FX400-APK-3.0.1-V1.0.5–release-20221009.apk 蒋富强v1.0.5临时版本 1.固定台首页站点临时显示中文名称。 2.PA连接状态显示修改正常。 15：45，温州S2号线APP，临时版本TX300-APK-2.0.1-V1.0.5–release-20221009.apk发产品四部群里。 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:4:1","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"4.2.固定台浏览器访问广播模拟器接口 17:04, 温州S2号线固定台APP站区广播： pa在浏览器中访问，pa默认是ping不通的。 固定台站选区广播模拟访问http://192.168.42.131:8086/api/pa/zones 注意： 这里是在固定台的浏览器访问的，访问地址192.168.42.131:8086地址是固定台的主机地址+广播接口服务器的端口 18：46，温州S2号线固定台APP: package com.gbcom.library_base.constant /** * 配置信息 * * 默认需要配置: * Config.APP_TYPE是车载台还是固定台; * APP_MODE当前APP模式是DMO直通模式,还是集群模式; * AppConstant.kt-APP_CONFIG_ID: 这个是表ID的值,默认为1 */ object Config { ...... /** * PA站选区广播 * PA服务器地址 * PA服务器端口，18=8086，wzs2=10049 */ var PA_ADDRESS = \"10.60.3.8\" var PA_PORT = 10049 ...... } 修改温州S2号线固定台APP站区广播申请APPID的名称和号码。 package com.gbcom.library_base.repository /** * PA管理器 * @author daizelai@gbcom.com.cn * @date 2022/07/29 11:46 */ class PaRepository { ...... /** * 获取APPID * 每个第三方向平台申请，平台通过后即可使用，第三方申请的 appid 如在 15 天内 未使用(没有接口访问记录)，则需要再次申请。 * @author daizelai@gbcom.com.cn * @date 2022/07/28 14:48 */ @Synchronized suspend fun getAppID(): Boolean { - val authName = SPUtils.getValue(PaApiCode.AUTH_NAME.resultCode, \"lte\") + val authName = SPUtils.getValue(PaApiCode.AUTH_NAME.resultCode, \"192.168.99.1\") - val userNum = SPUtils.getValue(PaApiCode.USER_NUM.resultCode, 123) + val userNum = SPUtils.getValue(PaApiCode.USER_NUM.resultCode, 1234) if (authName == \"\") { LogUtils.getInstance().e(TAG, \"getAppID() - authName=$authName, userNum=$userNum\") return false } val appid = SPUtils.getValue(PaApiCode.APP_ID.resultCode, \"\") val appidTime = SPUtils.getValue(PaApiCode.APP_ID_TIMEOUT.resultCode, 0L) return try { if (appid == \"\" || (SystemClock.elapsedRealtime() - appidTime) \u003e AppConstant.APP_ID_TIMEOUT) { // 如果已过期，需要重新获取一下appid val param = HttpManager.INSTANCE.getJsonBody(PaAppIDData(authName, userNum)) var data: PaAppIDRespData = HttpManager.INSTANCE.mApi.getAppid(param) if (data.code == BaseConstant.PaDataCode.SUCCESS.resultCode) { // 如果获取成功 SPUtils.putValue(PaApiCode.APP_ID.resultCode, data.regappid) SPUtils.putValue( PaApiCode.APP_ID_TIMEOUT.resultCode, SystemClock.elapsedRealtime() ) true } else { // 获取APPID失败 LogUtils.getInstance().e( TAG, \"getAppID() - Failed to get appid, code=${data.code}, message=${data.message}\" ) false } } else { LogUtils.getInstance().d(TAG, \"getAppID() - appid not expired, appid=$appid\") false } } catch (e: Exception) { e.printStackTrace() LogUtils.getInstance().e(TAG, \"getAppID() - Exception - e=${e.message}\") false } } ...... } ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:4:2","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"五、站选区广播现场对接调试 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:5:0","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"5.1.实验室站区广播调试之+86问题 15：30，站区广播通话问题，因为通话号码带86，而从DIS获取的广播组列表是没有+86的。 下面是温州现场app的发起站区广播时的logcat日志。 因为呼叫通话界面中的号码是866027331，获取的DIS广播组号码是6027331，判断相等就不行了。 10-10 15:46:54.910 4494 4494 D MainActivity: onReceive: new request mBroadCastReceiver, intent?.action=com.gbcom.action.ACTION_FX_STATION_BRD_ZONE_START_TASK\r10-10 15:46:54.910 4494 4494 D MainActivity: onReceive: 站选区广播开始 start\r10-10 15:46:54.910 4494 4494 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaa-------------------------bbbb---start\r10-10 15:46:54.910 4494 4494 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaa-------------------------bbbbb---start----number=866027331\r10-10 15:46:54.910 4494 4494 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---number=866027331\r10-10 15:46:54.910 4494 4494 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---AppConstant.station_zone_bro_list1=[StationBrdZone(zoneID=1, zoneName=上行列车通播组, groupID=20000000008), StationBrdZone(zoneID=2, zoneName=下行列车通播组, groupID=20000000009), StationBrdZone(zoneID=35001, zoneName=沙城站上行站台广播组, groupID=6027331), StationBrdZone(zoneID=35002, zoneName=沙城站下行站台广播组, groupID=6027351), StationBrdZone(zoneID=35003, zoneName=沙城站动态重组组, groupID=6027512)]\r10-10 15:46:54.911 4494 4494 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---AppConstant.station_zone_bro_list2=[StationBrdZone(zoneID=1, zoneName=上行列车通播组, groupID=20000000008), StationBrdZone(zoneID=2, zoneName=下行列车通播组, groupID=20000000009), StationBrdZone(zoneID=35001, zoneName=沙城站上行站台广播组, groupID=6027331), StationBrdZone(zoneID=35002, zoneName=沙城站下行站台广播组, groupID=6027351), StationBrdZone(zoneID=35003, zoneName=沙城站动态重组组, groupID=6027512)]\r10-10 15:46:54.911 4494 4494 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---AppConstant.station_zone_bro_list2=[StationBrdZone(zoneID=1, zoneName=上行列车通播组, groupID=20000000008), StationBrdZone(zoneID=2, zoneName=下行列车通播组, groupID=20000000009), StationBrdZone(zoneID=35001, zoneName=沙城站上行站台广播组, groupID=6027331), StationBrdZone(zoneID=35002, zoneName=沙城站下行站台广播组, groupID=6027351), StationBrdZone(zoneID=35003, zoneName=沙城站动态重组组, groupID=6027512)]\r10-10 15:46:54.911 4494 4494 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---AppConstant.station_zone_bro_list2=[StationBrdZone(zoneID=1, zoneName=上行列车通播组, groupID=20000000008), StationBrdZone(zoneID=2, zoneName=下行列车通播组, groupID=20000000009), StationBrdZone(zoneID=35001, zoneName=沙城站上行站台广播组, groupID=6027331), StationBrdZone(zoneID=35002, zoneName=沙城站下行站台广播组, groupID=6027351), StationBrdZone(zoneID=35003, zoneName=沙城站动态重组组, groupID=6027512)]\r10-10 15:46:54.911 4494 4494 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---AppConstant.station_zone_bro_list2=[StationBrdZone(zoneID=1, zoneName=上行列车通播组, groupID=20000000008), StationBrdZone(zoneID=2, zoneName=下行列车通播组, groupID=20000000009), StationBrdZone(zoneID=35001, zoneName=沙城站上行站台广播组, groupID=6027331), StationBrdZone(zoneID=35002, zoneName=沙城站下行站台广播组, groupID=6027351), StationBrdZone(zoneID=35003, zoneName=沙城站动态重组组, groupID=6027512)]\r10-10 15:46:54.911 4494 4494 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---AppConstant.station_zone_bro_list2=[StationBrdZone(zoneID=1, zoneName=上行列车通播组, groupID=20000000008), StationBrdZone(zoneID=2, zoneName=下行列车通播组, groupID=20000000009), StationBrdZone(zoneID=35001, zoneName=沙城站上行站台广播组, groupID=6027331), StationBrdZone(zoneID=35002, zoneName=沙城站下行站台广播组, groupID=6027351), StationBrdZone(zoneID=35003, zoneName=沙城站动态重组组, groupID=6027512)]\r10-10 15:46:54.911 4494 4494 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---AppConstant.station_zone_bro_list4=[StationBrdZone(zoneID=1, zoneName=上行列车通播组, groupID=20000000008), StationBrdZone(zoneID=2, zoneName=下行列车通播组, groupID=20000000009), StationBrdZone(zoneID=35001, zoneName=沙城站上行站台广播组, groupID=6027331), StationBrdZone(zoneID=35002, zoneName=沙城站下行站台广播组, groupID=6027351), StationBrdZone(zoneID=35003, zoneName=沙城站动态重组组, groupID=6027512)]\r10-10 15:46:54.912 4494 4494 D ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:5:1","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"5.2.站区广播调试之端口问题 一开始访问的端口就是有问题的，然后昨天2022/10/09把8086修改为10049，今天访问广播接口还是失败，这是完整app的logcat日志，看510行。 10-10 16:03:42.791 5148 5245 W System.err: java.net.ConnectException: Failed to connect to /192.168.42.131:10049\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.kt:270)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.connection.RealConnection.connect(RealConnection.kt:176)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.connection.ExchangeFinder.findConnection(ExchangeFinder.kt:236)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.connection.ExchangeFinder.findHealthyConnection(ExchangeFinder.kt:109)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.connection.ExchangeFinder.find(ExchangeFinder.kt:77)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.connection.Transmitter.newExchange$okhttp(Transmitter.kt:162)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.kt:35)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:87)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.kt:82)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:87)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.kt:84)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)\r10-10 16:03:42.792 5148 5245 W System.err: at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.kt:71)\r10-10 16:03:42.793 5148 5245 W System.err: at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)\r10-10 16:03:42.793 5148 5245 W System.err: at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:87)\r10-10 16:03:42.793 5148 5245 W System.err: at okhttp3.logging.HttpLoggingInterceptor.intercept(HttpLoggingInterceptor.kt:150)\r10-10 16:03:42.793 5148 5245 W System.err: at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)\r10-10 16:03:42.793 5148 5245 W System.err: at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:87)\r10-10 16:03:42.793 5148 5245 W System.err: at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.kt:184)\r10-10 16:03:42.793 5148 5245 W System.err: at okhttp3.RealCall$AsyncCall.run(RealCall.kt:136)\r10-10 16:03:42.793 5148 5245 W System.err: at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)\r10-10 16:03:42.793 5148 5245 W System.err: at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)\r10-10 16:03:42.793 5148 5245 W System.err: at java.lang.Thread.run(Thread.java:761)\r10-10 16:03:42.793 5148 5245 W System.err: Caused by: java.net.ConnectException: Connection refused\r10-10 16:03:42.793 5148 5245 W System.err: at java.net.PlainSocketImpl.socketConnect(Native Method)\r10-10 16:03:42.794 5148 5245 W System.err: at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:334)\r10-10 16:03:42.794 5148 5245 W System.err: at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:196)\r10-10 16:03:42.794 5148 5245 W System.err: at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:178)\r10-10 16:03:42.794 5148 5245 W System.err: at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:356)\r10-10 16:03:42.794 5148 5245 W System.err: at java.net.","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:5:2","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"5.3.站区广播调试之TCP接口初步正常 16:56，实验室正常的站区广播抓包 17：19，温州现场站区广播的接口通了，对方重启了现场设备，估计是修改了什么配置之类的。 本次抓包通了抓包pcap下载 2022/10/10 17:48第二次通通话抓包。 用户名和编号不存在 站区广播失败之用户名和编号不存在 日志文件下载 下面是用户名和编号不存在的日志片段 站区广播失败之用户名和编号不存在 抓包pcap文件下载 下面是用户名和编号不存在的抓包分析片段 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:5:3","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"5.4.站区广播对接之新站调试 今天蒋富强继续使用昨天我发的v1.0.9固定台版本测试车站站区广播，首次测试结果是http连接异常的，如下日志片断。 本次日志下载 下载 10-11 13:50:08.274 2706 3650 W System.err: java.net.ConnectException: Failed to connect to /192.168.42.131:10000\r10-11 13:50:08.275 2706 3650 W System.err: at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.kt:270)\r10-11 13:50:08.275 2706 3650 W System.err: at okhttp3.internal.connection.RealConnection.connect(RealConnection.kt:176)\r10-11 13:50:08.275 2706 3650 W System.err: at okhttp3.internal.connection.ExchangeFinder.findConnection(ExchangeFinder.kt:236)\r10-11 13:50:08.275 2706 3650 W System.err: at okhttp3.internal.connection.ExchangeFinder.findHealthyConnection(ExchangeFinder.kt:109)\r10-11 13:50:08.275 2706 3650 W System.err: at okhttp3.internal.connection.ExchangeFinder.find(ExchangeFinder.kt:77)\r10-11 13:50:08.275 2706 3650 W System.err: at okhttp3.internal.connection.Transmitter.newExchange$okhttp(Transmitter.k 紧接着蒋富强又测试了一次，http访问是正常的，但是还是提示用户不存在,请检查用户名和用户编号。 wzs2_staton_bro_pa12_20221011_1439.log 下载 下面是日志片段： 10-11 14:06:15.120 2706 2706 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---AppConstant.station_zone_bro_list3=[StationBrdZone(zoneID=1, zoneName=上行列车通播组, groupID=20000000008), StationBrdZone(zoneID=2, zoneName=下行列车通播组, groupID=20000000009), StationBrdZone(zoneID=35001, zoneName=天河站上行站台广播组, groupID=6027332), StationBrdZone(zoneID=35002, zoneName=天河站下行站台广播组, groupID=6027352), StationBrdZone(zoneID=35003, zoneName=天河站动态重组组, groupID=6027513)]\r10-11 14:06:15.120 2706 2706 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111ssssss--866027513, +866027513 ---AppConstant.station_zone_bro_list2=[StationBrdZone(zoneID=1, zoneName=上行列车通播组, groupID=20000000008), StationBrdZone(zoneID=2, zoneName=下行列车通播组, groupID=20000000009), StationBrdZone(zoneID=35001, zoneName=天河站上行站台广播组, groupID=6027332), StationBrdZone(zoneID=35002, zoneName=天河站下行站台广播组, groupID=6027352), StationBrdZone(zoneID=35003, zoneName=天河站动态重组组, groupID=6027513)]\r10-11 14:06:15.121 2706 2706 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---mZoneIDs=[35002], ---AppConstant.station_zone_bro_list4=[StationBrdZone(zoneID=1, zoneName=上行列车通播组, groupID=20000000008), StationBrdZone(zoneID=2, zoneName=下行列车通播组, groupID=20000000009), StationBrdZone(zoneID=35001, zoneName=天河站上行站台广播组, groupID=6027332), StationBrdZone(zoneID=35002, zoneName=天河站下行站台广播组, groupID=6027352), StationBrdZone(zoneID=35003, zoneName=天河站动态重组组, groupID=6027513)]\r10-11 14:06:15.121 2706 2706 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---2222\r10-11 14:06:15.121 2706 2706 D MainViewModel: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa -------3333\r10-11 14:06:15.126 2706 4076 D MainViewModel: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa------44444\r10-11 14:06:15.174 2706 4076 E APP_LogUtils.kt: [(LogUtils.kt:54).e()] [PaRepository] getAppID() - Failed to get appid, code=500, message=用户不存在,请检查用户名和用户编号\r10-11 14:06:15.175 2706 4076 D MainViewModel: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---555555--false\r......\r10-11 14:06:15.186 2706 2827 D TAG : 2,initFile: /custom/metro/log/2022-10-11/app3.log, logFile.length=144878, getCurrentFileName()=app3.log, writeFileName=/custom/metro/log/2022-10-11/app3.log\r10-11 14:06:15.187 2706 2827 D LogWriteUtil.class=LogFileHandlerThread.class: 8,initFile: logFile=/custom/metro/log/2022-10-11/app3.log, logFile.length=144878\r10-11 14:06:15.206 2706 2706 D IndexFragment: initView: applyFxData() - ats=[StationAts(createTime=1665468375, trainGroupNumber=212, serviceNumber=000, trainCrewNumber=000, trainPosition=1, trainRunningPosition=1, railName=T1212, stationID=012, terminalStationID=000, destinationID=000, identityID=+866022012)]\r10-11 14:06:15.233 2706 4007 E APP_LogUtils.kt: [(LogUtils.kt:54).e()] [PaRepository] getToken() - Failed to get token, code=500, message=appid或者时间戳错误\r10-11 14:06:15.234 2706 4007 D MainViewModel: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---666666666666666-- wzs2_staton_bro_master_pa12eth1.pcap 下载 通过看抓包文件分析可以看到，http","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:5:4","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"5.5.温州S2号线车站站选区广播20221012对接调试 5.5.1.首次调试没有访问温州S2广播接口的问题 终端pa2 下面是本次站区广播日志【终端pa2】片段。 10-12 10:30:56.289 2699 2699 D MainActivity: onReceive: new request mBroadCastReceiver, intent?.action=com.gbcom.action.ACTION_FX_STATION_BRD_ZONE_START_TASK\r10-12 10:30:56.289 2699 2813 D LogWriteUtil.class=LogFileHandlerThread.class: 1getFilePath: logFormat=2022-10-12, LogWriteUtil.logPathDir=/custom/metro/log\r10-12 10:30:56.289 2699 2813 D LogWriteUtil.class=LogFileHandlerThread.class: 2getFilePath: filePath=/custom/metro/log/2022-10-12\r10-12 10:30:56.289 2699 2699 D MainActivity: onReceive: 站选区广播开始 start\r10-12 10:30:56.289 2699 2699 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaa-------------------------bbbb---start\r10-12 10:30:56.289 2699 2813 D LogWriteUtil.class=LogFileHandlerThread.class: 1getCurrentFileName: LogWriteUtil.logfile=app.log\r10-12 10:30:56.289 2699 2699 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaa-------------------------bbbbb---start----number=866027333\r10-12 10:30:56.289 2699 2699 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---number=866027333\r10-12 10:30:56.289 2699 2699 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---AppConstant.station_zone_bro_list1=[StationBrdZone(zoneID=1, zoneName=海城站上行站台广播组, groupID=6027333), StationBrdZone(zoneID=2, zoneName=海城站下行站台广播组, groupID=6027353), StationBrdZone(zoneID=35001, zoneName=海城站下行站台广播组, groupID=6027353), StationBrdZone(zoneID=35002, zoneName=海城站上行站台广播组, groupID=6027333), StationBrdZone(zoneID=35003, zoneName=海城站动态重组组, groupID=6027514)]\r10-12 10:30:56.289 2699 2699 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111ssssss--866027333, +866027333 ---AppConstant.station_zone_bro_list2=[StationBrdZone(zoneID=1, zoneName=海城站上行站台广播组, groupID=6027333), StationBrdZone(zoneID=2, zoneName=海城站下行站台广播组, groupID=6027353), StationBrdZone(zoneID=35001, zoneName=海城站下行站台广播组, groupID=6027353), StationBrdZone(zoneID=35002, zoneName=海城站上行站台广播组, groupID=6027333), StationBrdZone(zoneID=35003, zoneName=海城站动态重组组, groupID=6027514)]\r10-12 10:30:56.289 2699 2813 D LogWriteUtil.class=LogFileHandlerThread.class: 1getFilePath: logFormat=2022-10-12, LogWriteUtil.logPathDir=/custom/metro/log\r10-12 10:30:56.289 2699 2813 D LogWriteUtil.class=LogFileHandlerThread.class: 2getFilePath: filePath=/custom/metro/log/2022-10-12\r10-12 10:30:56.290 2699 2813 D LogWriteUtil.class=LogFileHandlerThread.class: getFileNameSuffix: file=/custom/metro/log/2022-10-12\r10-12 10:30:56.290 2699 2699 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111---AppConstant.station_zone_bro_list3=[StationBrdZone(zoneID=1, zoneName=海城站上行站台广播组, groupID=6027333), StationBrdZone(zoneID=2, zoneName=海城站下行站台广播组, groupID=6027353), StationBrdZone(zoneID=35001, zoneName=海城站下行站台广播组, groupID=6027353), StationBrdZone(zoneID=35002, zoneName=海城站上行站台广播组, groupID=6027333), StationBrdZone(zoneID=35003, zoneName=海城站动态重组组, groupID=6027514)]\r10-12 10:30:56.290 2699 2699 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---1111ssssss--866027353, +866027353 ---AppConstant.station_zone_bro_list2=[StationBrdZone(zoneID=1, zoneName=海城站上行站台广播组, groupID=6027333), StationBrdZone(zoneID=2, zoneName=海城站下行站台广播组, groupID=6027353), StationBrdZone(zoneID=35001, zoneName=海城站下行站台广播组, groupID=6027353), StationBrdZone(zoneID=35002, zoneName=海城站上行站台广播组, groupID=6027333), StationBrdZone(zoneID=35003, zoneName=海城站动态重组组, groupID=6027514)]\r10-12 10:30:56.290 2699 2813 D LogWriteUtil.class=LogFileHandlerThread.class: getFileNameSuffix: file=/custom/metro/log/2022-10-12\r10-12 10:30:56.290 2699 2699 D MainActivity: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa---2222\r10-12 10:30:56.291 2699 2699 D MainViewModel: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa -------3333\r10-12 10:30:56.293 2699 2813 D LogWriteUtil.class=LogFileHandlerThread.class: 8,initFile: logFile=/custom/metro/log/2022-10-12/app7.log, logFile.length=1028583\r10-12 10:30:56.295 2699 4933 D MainViewModel: paStartMic: aaaaaaaaaaaaaaaaaaaaaaaaaa------44444\r10-12 10:30:56.296 26","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:5:5","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["PA","固定台","站选区广播"],"content":"5.6.温州S2号线车站站选区广播20221013对接调试 今天温州现场蒋富强说，温州现场测试站选区广播功能正常 ","date":"2022-10-10","objectID":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/:5:6","tags":["PA","固定台","站选区广播","温州S2号线"],"title":"温州S2号线固定台站选区广播调试记录","uri":"https://daizelai.github.io/posts/wzs2/20221010_1750%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E5%9B%BA%E5%AE%9A%E5%8F%B0%E7%AB%99%E9%80%89%E5%8C%BA%E5%B9%BF%E6%92%AD%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"},{"categories":["原创","gm655+","gm605","SC60"],"content":"中兴SDK多端口配置的使用记录","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/wzs2/20221011_1049%E4%B8%AD%E5%85%B4sdk%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/","tags":["原创","gm655+","gm605","多端口"],"title":"中兴SDK多端口配置的使用记录","uri":"https://daizelai.github.io/posts/wzs2/20221011_1049%E4%B8%AD%E5%85%B4sdk%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":["原创","gm655+","gm605","SC60"],"content":"20221011_1049中兴SDK多端口配置的使用记录 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/wzs2/20221011_1049%E4%B8%AD%E5%85%B4sdk%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:0:0","tags":["原创","gm655+","gm605","多端口"],"title":"中兴SDK多端口配置的使用记录","uri":"https://daizelai.github.io/posts/wzs2/20221011_1049%E4%B8%AD%E5%85%B4sdk%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":["原创","gm655+","gm605","SC60"],"content":"一、描述 by daizelai on 2022/10/11 10:52 中兴GM605/GM655+多端口配置。 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/wzs2/20221011_1049%E4%B8%AD%E5%85%B4sdk%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:1:0","tags":["原创","gm655+","gm605","多端口"],"title":"中兴SDK多端口配置的使用记录","uri":"https://daizelai.github.io/posts/wzs2/20221011_1049%E4%B8%AD%E5%85%B4sdk%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":["原创","gm655+","gm605","SC60"],"content":"二、多端口使用 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/wzs2/20221011_1049%E4%B8%AD%E5%85%B4sdk%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:2:0","tags":["原创","gm655+","gm605","多端口"],"title":"中兴SDK多端口配置的使用记录","uri":"https://daizelai.github.io/posts/wzs2/20221011_1049%E4%B8%AD%E5%85%B4sdk%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":["原创","gm655+","gm605","SC60"],"content":"2.1.配置主机telnet访问 多端口配置主机telnet连接。 多端口配置主机telnet连接的操作示例。 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/wzs2/20221011_1049%E4%B8%AD%E5%85%B4sdk%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:2:1","tags":["原创","gm655+","gm605","多端口"],"title":"中兴SDK多端口配置的使用记录","uri":"https://daizelai.github.io/posts/wzs2/20221011_1049%E4%B8%AD%E5%85%B4sdk%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":["原创","gm655+","gm605","SC60"],"content":"2.1.配置主机web访问 未配置主机的web多端口时是无法访问主机的web界面的 配置主机web访问的多端口 成功配置主机web访问的多端口效果 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/wzs2/20221011_1049%E4%B8%AD%E5%85%B4sdk%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:2:2","tags":["原创","gm655+","gm605","多端口"],"title":"中兴SDK多端口配置的使用记录","uri":"https://daizelai.github.io/posts/wzs2/20221011_1049%E4%B8%AD%E5%85%B4sdk%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":["mysql"],"content":"mysql创建用户","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["mysql"],"content":"20221008_1513mysql创建用户 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/:0:0","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["mysql"],"content":"一、描述 by daizelai on 2022/10/08 16:23 创建MYSQL账号的方法记录。 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/:1:0","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["mysql"],"content":"二、创建mysql账号 ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/:2:0","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["mysql"],"content":"2.1.使用CREATE USER语句创建新用户 mysql\u003e CREATE USER 'daizelai'@'192.168.42.55' IDENTIFIED BY '123456'; 如果创建失败，提示当前密码不满足策略要求。 修改密码策略 mysql\u003e SELECT @@VALIDATE_PASSWORD_POLICY; mysql\u003e set global validate_password_policy = 0; GRANT ALL ON *.* TO 'daizelai'@'192.168.42.55'; 在 MySQL 中，可以使用 password() 函数获取密码的哈希值，查看 test1 哈希值的 SQL 语句和执行过程如下： mysql\u003e SELECT password('test1'); +-------------------------------------------+ | password('test1') | +-------------------------------------------+ | *06C0BF5B64ECE2F648B5F048A71903906BA08E5C | +-------------------------------------------+ 1 row in set, 1 warning (0.00 sec) 创建用户 test1，SQL 语句和执行过程如下： mysql\u003e CREATE USER 'daizelai'@'192.168.42.55'IDENTIFIED BY PASSWORD '*06C0BF5B64ECE2F648B5F048A71903906BA08E5C'; Query OK, 0 rows affected, 1 warning (0.00 sec) ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/:2:1","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["mysql"],"content":"2.2.使用grant创建新用户 grant select,insert on *.* to 'daizelai'@'192.168.42.55' identified by '123456'; ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/:2:2","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["mysql"],"content":"2.3.直接操作MYSQL用户表 使用CREATE和GRANT的本质都是像USER表中插入一个用户。所以也可以直接在USER表中插入一条数据。 mysql\u003e INSERT INTO mysql.user(Host, User, authentication_string, ssl_cipher, x509_issuer, x509_subject) VALUES ('192.168.42.55', 'daizelai', PASSWORD('password'), '', '', ''); MySQL 5.7 的 user 表中的密码字段从 Password 变成了 authentication_string，如果你使用的是 MySQL 5.7 之前的版本，将 authentication_string 字段替换成 Password 即可。 由于 mysql 数据库的 user 表中，ssl_cipher、x509_issuer 和 x509_subject 这 3 个字段没有默认值，所以向 user 表插入新记录时，一定要设置这 3 个字段的值，否则 INSERT 语句将不能执行。 使用 FLUSH 命令让用户生效 mysql\u003e FLUSH PRIVILEGES; ","date":"2022-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/:2:3","tags":["linux","linux搜索"],"title":"mysql创建用户","uri":"https://daizelai.github.io/posts/mysql/mysqlcreateuser/"},{"categories":["原创","android","BottomNavigationView"],"content":"BottomNavigationView菜单调整,BottomNavigationView高度调整","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/"},{"categories":["原创","android","BottomNavigationView"],"content":"20220930_1657BottomNavigationView菜单调整高度和间距 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/:0:0","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/"},{"categories":["原创","android","BottomNavigationView"],"content":"一、描述 by daizelai on 2022/09/30 16:58 关键字：菜单栏间距,温州S2号线菜单调整,BottomNavigationView菜单调整 之前一直困扰许久的问题，BottomNavigationView菜单文件和图片的间距调整不好，然后调度还不知道怎么调整。 今天终于搞定了。 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/:1:0","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/"},{"categories":["原创","android","BottomNavigationView"],"content":"二、BottomNavigationView菜单 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/:2:0","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/"},{"categories":["原创","android","BottomNavigationView"],"content":"菜单布局 activity_main.xml 路径：\\SH-CityRailway-ZTE\\library_main\\src\\main\\res\\layout\\activity_main.xml - \u003ccom.google.android.material.bottomnavigation.BottomNavigationView - android:id=\"@+id/nav_menu_view\" - android:layout_width=\"450dp\" - android:layout_height=\"100dp\" - android:background=\"#cccccc\" - android:visibility=\"gone\" - android:padding=\"3dp\" - app:elevation=\"500dp\" - app:itemIconSize=\"35dp\" - app:itemTextColor=\"@color/main_bottom_item_text_selector\" - app:labelVisibilityMode=\"labeled\" - app:menu=\"@menu/main_menu\" /\u003e \u003ccom.google.android.material.bottomnavigation.BottomNavigationView android:id=\"@+id/nav_menu_view\" android:layout_width=\"600dp\" android:layout_height=\"wrap_content\" android:padding=\"10dp\" app:itemIconSize=\"45dp\" android:background=\"#cccccc\" app:itemTextAppearanceActive=\"@style/bottom_tab_title_active\" app:itemTextAppearanceInactive=\"@style/bottom_tab_title_inactive\" app:itemTextColor=\"@color/main_bottom_item_text_selector\" app:labelVisibilityMode=\"labeled\" app:menu=\"@menu/main_menu\" /\u003e ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/:2:1","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/"},{"categories":["原创","android","BottomNavigationView"],"content":"菜单设置 这里还是和温州S2号线APP一样，没有改变。 路径：\\SH-CityRailway-ZTE\\library_main\\src\\main\\res\\menu\\main_menu.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cmenu xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\"\u003e \u003c!-- 设置了android:icon=\"@drawable/bottom_png_list\"，就不需要BottomNavigationView设置 itemIconTint和itemTextColor 颜色 --\u003e \u003citem android:id=\"@+id/toRirstFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_index_item_selector\" android:title=\"主页\" app:showAsAction=\"never\" /\u003e \u003citem android:id=\"@+id/toSecondFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_call_item_selector\" android:title=\"通话\" app:showAsAction=\"always\" /\u003e \u003citem android:id=\"@+id/toThirdFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_message_item_selector\" android:title=\"消息\" app:showAsAction=\"collapseActionView\" /\u003e \u003citem android:id=\"@+id/toFiveFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_message_item_selector\" android:title=\"调度命令\" app:showAsAction=\"withText\" /\u003e \u003citem android:id=\"@+id/toFourthFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_setting_item_selector\" android:title=\"我的\" app:showAsAction=\"ifRoom\" /\u003e \u003c/menu\u003e main_menu_index_item_selector.xml 路径：\\SH-CityRailway-ZTE\\library_res\\src\\main\\res\\drawable\\main_menu_index_item_selector.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003citem android:drawable=\"@drawable/train_menu_index_active\" android:state_checked=\"true\"\u003e\u003c/item\u003e \u003citem android:drawable=\"@drawable/train_menu_index_normal\" android:state_checked=\"false\"\u003e\u003c/item\u003e \u003c/selector\u003e main_menu_call_item_selector.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003citem android:drawable=\"@drawable/train_menu_call_active\" android:state_checked=\"true\"\u003e\u003c/item\u003e \u003citem android:drawable=\"@drawable/train_menu_call_normal\" android:state_checked=\"false\"\u003e\u003c/item\u003e \u003c/selector\u003e main_menu_message_item_selector.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003citem android:drawable=\"@drawable/train_menu_msg_active\" android:state_checked=\"true\"\u003e\u003c/item\u003e \u003citem android:drawable=\"@drawable/train_menu_msg_normal\" android:state_checked=\"false\"\u003e\u003c/item\u003e \u003c/selector\u003e main_menu_setting_item_selector.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003citem android:drawable=\"@drawable/train_menu_set_active\" android:state_checked=\"true\"\u003e\u003c/item\u003e \u003citem android:drawable=\"@drawable/train_menu_set_normal\" android:state_checked=\"false\"\u003e\u003c/item\u003e \u003c/selector\u003e ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/:2:2","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/"},{"categories":["原创","android","BottomNavigationView"],"content":"调整菜单高度【图片和文字间距】 这里的design_bottom_navigation_height可以设置main_menu.xml中的图片和文字的距离，也就是整个菜单高度越高，间距越大。 路径：\\SH-CityRailway-ZTE\\library_res\\src\\main\\res\\values\\dimens.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cresources xmlns:tools=\"http://schemas.android.com/tools\"\u003e \u003c!-- 项目默认文字大小 --\u003e \u003cdimen name=\"defaultTextSize\"\u003e18sp\u003c/dimen\u003e \u003cdimen name=\"textSize22sp\"\u003e22sp\u003c/dimen\u003e \u003c!-- BottomNavigationView修改文字与icon之间的间距 --\u003e \u003c!-- BottomNavigationView设置icon距离上边距的距离 --\u003e \u003cdimen name=\"design_bottom_navigation_margin\" tools:override=\"true\"\u003e6dp\u003c/dimen\u003e \u003c!-- 下面两个是设置TextView的大小：选中时的文字和未选中时的文字大小，保持一样的话，就没有动画了【好像没有起作用，style.xml的bottom_tab_title_active和bottom_tab_title_inactive起作用】 --\u003e \u003cdimen name=\"design_bottom_navigation_active_text_size\" tools:override=\"true\"\u003e18sp\u003c/dimen\u003e \u003cdimen name=\"design_bottom_navigation_text_size\" tools:override=\"true\"\u003e18sp\u003c/dimen\u003e \u003c!-- BottomNavigationView菜单栏-导航栏高度和文字和图片之间的间距，值越大，图片和文字间的距离越大 --\u003e \u003cdimen name=\"design_bottom_navigation_height\"\u003e90dp\u003c/dimen\u003e \u003c/resources\u003e ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/:2:3","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/"},{"categories":["原创","android","BottomNavigationView"],"content":"文字样式 路径：\\SH-CityRailway-ZTE\\library_res\\src\\main\\res\\values\\styles.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cresources\u003e \u003c!--BottomNavigationView选中的样式，可以设置选择的字体颜色，这里只是为了改变选择时的字体大小--\u003e \u003cstyle name=\"bottom_tab_title_active\"\u003e \u003citem name=\"android:textSize\"\u003e28sp\u003c/item\u003e \u003citem name=\"android:drawablePadding\"\u003e14dp\u003c/item\u003e \u003c/style\u003e \u003c!--BottomNavigationView没有选中的样式，导航默认的字体大小就是12sp--\u003e \u003cstyle name=\"bottom_tab_title_inactive\"\u003e \u003citem name=\"android:textSize\"\u003e24sp\u003c/item\u003e \u003citem name=\"android:drawablePadding\"\u003e14dp\u003c/item\u003e \u003c/style\u003e \u003c/resources\u003e ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/:2:4","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/"},{"categories":["原创","android","android studio"],"content":"android studio默认打开上一次的状态,android studio保存状态","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/"},{"categories":["原创","android","android studio"],"content":"20220930_1207as默认打开上一次的状态 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/:0:0","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/"},{"categories":["原创","android","android studio"],"content":"一、描述 by daizelai on 2022/09/30 12:08 as默认打开上一次的状态，但是如果你是复制一个项目为另一个新项目，这样使用as打开这两个项目时，会发现，as打开的上一次状态都是一样的。 本文主要讲述了如何各自打开各自的上一次状态。 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/:1:0","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/"},{"categories":["原创","android","android studio"],"content":"二、开始 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/:2:0","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/"},{"categories":["原创","android","android studio"],"content":"2.1.配置打开上一次状态 File Settings… Appearance \u0026 Behavior System Settings Startup/Shutdown Reopen last project on startup ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/:2:1","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/"},{"categories":["原创","android","android studio"],"content":"2.2.修改各自上一次状态 打开AndroidStudio的project视图方式，找到workspace.xml然后删除。 然后关闭Android Studio后，重启Android Studio，这样就能把工作状态保存了。 这样即使是直接把项目复制成新的项目，然后再打开新的项目，布局也是自己上次打开的状态了。 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/:2:2","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/"},{"categories":["原创","android"],"content":"BottomNavigationView菜单调整高度和间距","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"20220930_1657BottomNavigationView菜单调整高度和间距 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:0:0","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"一、描述 by daizelai on 2022/09/30 16:58 关键字：菜单栏间距,温州S2号线菜单调整,BottomNavigationView菜单调整 之前一直困扰许久的问题，BottomNavigationView菜单文件和图片的间距调整不好，然后调度还不知道怎么调整。 今天终于搞定了。 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:1:0","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"二、BottomNavigationView菜单 ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:2:0","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"菜单布局 activity_main.xml 路径：\\SH-CityRailway-ZTE\\library_main\\src\\main\\res\\layout\\activity_main.xml - \u003ccom.google.android.material.bottomnavigation.BottomNavigationView - android:id=\"@+id/nav_menu_view\" - android:layout_width=\"450dp\" - android:layout_height=\"100dp\" - android:background=\"#cccccc\" - android:visibility=\"gone\" - android:padding=\"3dp\" - app:elevation=\"500dp\" - app:itemIconSize=\"35dp\" - app:itemTextColor=\"@color/main_bottom_item_text_selector\" - app:labelVisibilityMode=\"labeled\" - app:menu=\"@menu/main_menu\" /\u003e \u003ccom.google.android.material.bottomnavigation.BottomNavigationView android:id=\"@+id/nav_menu_view\" android:layout_width=\"600dp\" android:layout_height=\"wrap_content\" android:padding=\"10dp\" app:itemIconSize=\"45dp\" android:background=\"#cccccc\" app:itemTextAppearanceActive=\"@style/bottom_tab_title_active\" app:itemTextAppearanceInactive=\"@style/bottom_tab_title_inactive\" app:itemTextColor=\"@color/main_bottom_item_text_selector\" app:labelVisibilityMode=\"labeled\" app:menu=\"@menu/main_menu\" /\u003e ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:2:1","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"菜单设置 这里还是和温州S2号线APP一样，没有改变。 路径：\\SH-CityRailway-ZTE\\library_main\\src\\main\\res\\menu\\main_menu.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cmenu xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\"\u003e \u003c!-- 设置了android:icon=\"@drawable/bottom_png_list\"，就不需要BottomNavigationView设置 itemIconTint和itemTextColor 颜色 --\u003e \u003citem android:id=\"@+id/toRirstFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_index_item_selector\" android:title=\"主页\" app:showAsAction=\"never\" /\u003e \u003citem android:id=\"@+id/toSecondFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_call_item_selector\" android:title=\"通话\" app:showAsAction=\"always\" /\u003e \u003citem android:id=\"@+id/toThirdFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_message_item_selector\" android:title=\"消息\" app:showAsAction=\"collapseActionView\" /\u003e \u003citem android:id=\"@+id/toFiveFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_message_item_selector\" android:title=\"调度命令\" app:showAsAction=\"withText\" /\u003e \u003citem android:id=\"@+id/toFourthFragment\" android:enabled=\"true\" android:icon=\"@drawable/main_menu_setting_item_selector\" android:title=\"我的\" app:showAsAction=\"ifRoom\" /\u003e \u003c/menu\u003e main_menu_index_item_selector.xml 路径：\\SH-CityRailway-ZTE\\library_res\\src\\main\\res\\drawable\\main_menu_index_item_selector.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003citem android:drawable=\"@drawable/train_menu_index_active\" android:state_checked=\"true\"\u003e\u003c/item\u003e \u003citem android:drawable=\"@drawable/train_menu_index_normal\" android:state_checked=\"false\"\u003e\u003c/item\u003e \u003c/selector\u003e main_menu_call_item_selector.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003citem android:drawable=\"@drawable/train_menu_call_active\" android:state_checked=\"true\"\u003e\u003c/item\u003e \u003citem android:drawable=\"@drawable/train_menu_call_normal\" android:state_checked=\"false\"\u003e\u003c/item\u003e \u003c/selector\u003e main_menu_message_item_selector.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003citem android:drawable=\"@drawable/train_menu_msg_active\" android:state_checked=\"true\"\u003e\u003c/item\u003e \u003citem android:drawable=\"@drawable/train_menu_msg_normal\" android:state_checked=\"false\"\u003e\u003c/item\u003e \u003c/selector\u003e main_menu_setting_item_selector.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003citem android:drawable=\"@drawable/train_menu_set_active\" android:state_checked=\"true\"\u003e\u003c/item\u003e \u003citem android:drawable=\"@drawable/train_menu_set_normal\" android:state_checked=\"false\"\u003e\u003c/item\u003e \u003c/selector\u003e ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:2:2","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"调整菜单高度【图片和文字间距】 这里的design_bottom_navigation_height可以设置main_menu.xml中的图片和文字的距离，也就是整个菜单高度越高，间距越大。 路径：\\SH-CityRailway-ZTE\\library_res\\src\\main\\res\\values\\dimens.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cresources xmlns:tools=\"http://schemas.android.com/tools\"\u003e \u003c!-- 项目默认文字大小 --\u003e \u003cdimen name=\"defaultTextSize\"\u003e18sp\u003c/dimen\u003e \u003cdimen name=\"textSize22sp\"\u003e22sp\u003c/dimen\u003e \u003c!-- BottomNavigationView修改文字与icon之间的间距 --\u003e \u003c!-- BottomNavigationView设置icon距离上边距的距离 --\u003e \u003cdimen name=\"design_bottom_navigation_margin\" tools:override=\"true\"\u003e6dp\u003c/dimen\u003e \u003c!-- 下面两个是设置TextView的大小：选中时的文字和未选中时的文字大小，保持一样的话，就没有动画了【好像没有起作用，style.xml的bottom_tab_title_active和bottom_tab_title_inactive起作用】 --\u003e \u003cdimen name=\"design_bottom_navigation_active_text_size\" tools:override=\"true\"\u003e18sp\u003c/dimen\u003e \u003cdimen name=\"design_bottom_navigation_text_size\" tools:override=\"true\"\u003e18sp\u003c/dimen\u003e \u003c!-- BottomNavigationView菜单栏-导航栏高度和文字和图片之间的间距，值越大，图片和文字间的距离越大 --\u003e \u003cdimen name=\"design_bottom_navigation_height\"\u003e90dp\u003c/dimen\u003e \u003c/resources\u003e ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:2:3","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","android"],"content":"文字样式 路径：\\SH-CityRailway-ZTE\\library_res\\src\\main\\res\\values\\styles.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cresources\u003e \u003c!--BottomNavigationView选中的样式，可以设置选择的字体颜色，这里只是为了改变选择时的字体大小--\u003e \u003cstyle name=\"bottom_tab_title_active\"\u003e \u003citem name=\"android:textSize\"\u003e28sp\u003c/item\u003e \u003citem name=\"android:drawablePadding\"\u003e14dp\u003c/item\u003e \u003c/style\u003e \u003c!--BottomNavigationView没有选中的样式，导航默认的字体大小就是12sp--\u003e \u003cstyle name=\"bottom_tab_title_inactive\"\u003e \u003citem name=\"android:textSize\"\u003e24sp\u003c/item\u003e \u003citem name=\"android:drawablePadding\"\u003e14dp\u003c/item\u003e \u003c/style\u003e \u003c/resources\u003e ","date":"2022-09-30","objectID":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/:2:4","tags":["原创","android","BottomNavigationView"],"title":"BottomNavigationView菜单调整高度和间距","uri":"https://daizelai.github.io/posts/android/navigationview/bottomnavigationview/"},{"categories":["原创","springboot","项目打包"],"content":"springboot打包自定义文件名","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"一、描述 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:1:0","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"1.1.引言 by daizelai on 2022/10/08 16:59 本文记录一下在对springboot项目进行打包的时候，如何修改生成的文件名称。 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:1:1","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"1.2.默认打包 在springboot项目的根目录下，使用maven打包命令mvn clean package对项目进行打包。 PS D:\\code\\IdeaProjects\\springbootdemo\u003e mvn clean package [INFO] Scanning for projects... Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/2.1.3.RELEASE/spring-boot-starter-parent-2.1.3.RELEASE.pom Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/2.1.3.RELEASE/spring-boot-starter-parent-2.1.3.RELEASE.pom (12 kB at 10 kB/s) ...... [INFO] Replacing main artifact with repackaged archive [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 01:45 min [INFO] Finished at: 2022-10-08T16:31:28+08:00 [INFO] ------------------------------------------------------------------------ PS D:\\code\\IdeaProjects\\springbootdemo\u003e 打包完成之后，生成如下文件： D:\\code\\IdeaProjects\\springbootdemo\\target\u003edir 驱动器 D 中的卷是 新加卷 卷的序列号是 8AC9-706C D:\\code\\IdeaProjects\\springbootdemo\\target 的目录 2022/10/08 16:51 \u003cDIR\u003e . 2022/10/08 16:51 \u003cDIR\u003e .. 2022/10/08 16:51 \u003cDIR\u003e classes 2022/10/08 16:51 \u003cDIR\u003e generated-sources 2022/10/08 16:51 \u003cDIR\u003e generated-test-sources 2022/10/08 16:51 \u003cDIR\u003e maven-archiver 2022/10/08 16:51 \u003cDIR\u003e maven-status 2022/10/08 16:51 39,623,979 springbootdemo-0.0.1-SNAPSHOT.jar 2022/10/08 16:51 30,305 springbootdemo-0.0.1-SNAPSHOT.jar.original 2022/10/08 16:51 \u003cDIR\u003e test-classes 2 个文件 39,654,284 字节 8 个目录 14,321,639,424 可用字节 D:\\code\\IdeaProjects\\springbootdemo\\target\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:1:2","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"二、自定义打包文件名 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:2:0","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"2.1.配置打包文件名 在build节点下增加finalName节点，内容就是文件名称。 \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cbuild\u003e + \u003cfinalName\u003ewzs2_station_broadcast_v0.0.2\u003c/finalName\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-maven-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003cfork\u003etrue\u003c/fork\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003cplugin\u003e\u003c!-- 跳过单元测试 --\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-surefire-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003cskipTests\u003etrue\u003c/skipTests\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003c/project\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:2:1","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"2.2.打包 再次编译 PS D:\\code\\IdeaProjects\\springbootdemo\u003e mvn clean package\r[INFO] Scanning for projects...\r[INFO] [INFO] -----------------\u003c cn.itcss.springboot:springbootdemo \u003e-----------------\r[INFO] Building springbootdemo 0.0.1-SNAPSHOT\r[INFO] --------------------------------[ jar ]---------------------------------\r[INFO] [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ springbootdemo ---\r[INFO] Deleting D:\\code\\IdeaProjects\\springbootdemo\\target\r[INFO] [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ springbootdemo ---\r[INFO] Using 'UTF-8' encoding to copy filtered resources.\r[INFO] Copying 4 resources\r[INFO] Copying 2 resources\r[INFO] [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ springbootdemo ---\r[INFO] Changes detected - recompiling the module!\r[INFO] Compiling 25 source files to D:\\code\\IdeaProjects\\springbootdemo\\target\\classes\r[INFO] /D:/code/IdeaProjects/springbootdemo/src/main/java/cn/itcss/springboot/filter/FilterConfig.java: D:\\code\\IdeaProjects\\springbootdemo\\src\\main\\java\\cn\\itcss\\springboot\\filter\\FilterConfig.java使用了未经检查或不安全的操作。\r[INFO] /D:/code/IdeaProjects/springbootdemo/src/main/java/cn/itcss/springboot/filter/FilterConfig.java: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。\r[INFO]\r[INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ springbootdemo ---\r[INFO] Using 'UTF-8' encoding to copy filtered resources.\r[INFO] skip non existing resourceDirectory D:\\code\\IdeaProjects\\springbootdemo\\src\\test\\resources\r[INFO]\r[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ springbootdemo ---\r[INFO] Changes detected - recompiling the module!\r[INFO] Compiling 1 source file to D:\\code\\IdeaProjects\\springbootdemo\\target\\test-classes\r[INFO] [INFO] --- maven-surefire-plugin:2.22.1:test (default-test) @ springbootdemo ---\r[INFO]\r[INFO] --- maven-jar-plugin:3.1.1:jar (default-jar) @ springbootdemo ---\r[INFO] Building jar: D:\\code\\IdeaProjects\\springbootdemo\\target\\wzs2_station_broadcast_v0.0.2.jar\r[INFO]\r[INFO] --- spring-boot-maven-plugin:2.1.3.RELEASE:repackage (repackage) @ springbootdemo ---\r[INFO] Replacing main artifact with repackaged archive\r[INFO] ------------------------------------------------------------------------\r[INFO] BUILD SUCCESS\r[INFO] ------------------------------------------------------------------------\r[INFO] Total time: 2.298 s\r[INFO] Finished at: 2022-10-08T16:52:12+08:00\r[INFO] ------------------------------------------------------------------------\rPS D:\\code\\IdeaProjects\\springbootdemo\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:2:2","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"2.4.打包的文件名 我们再来看一下打包的文件，文件名称已经修改成wzs2_station_broadcast_v0.0.2.jar了。 PS D:\\code\\IdeaProjects\\springbootdemo\u003e dir target\r目录: D:\\code\\IdeaProjects\\springbootdemo\\target\rMode LastWriteTime Length Name\r---- ------------- ------ ----\rd----- 2022/10/8 16:52 classes\rd----- 2022/10/8 16:52 generated-sources\rd----- 2022/10/8 16:52 generated-test-sources\rd----- 2022/10/8 16:52 maven-archiver\rd----- 2022/10/8 16:52 maven-status\rd----- 2022/10/8 16:52 test-classes\r-a---- 2022/10/8 16:52 39624014 wzs2_station_broadcast_v0.0.2.jar\r-a---- 2022/10/8 16:52 30340 wzs2_station_broadcast_v0.0.2.jar.original\rPS D:\\code\\IdeaProjects\\springbootdemo\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:2:3","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"三、渠道打包 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:3:0","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"3.1.修改配置 修改pom.xml配置 \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e ...... + \u003cprofiles\u003e + \u003cprofile\u003e + \u003cid\u003edev\u003c/id\u003e + \u003cproperties\u003e + \u003cpackage.environment\u003edev\u003c/package.environment\u003e + \u003c/properties\u003e + \u003c!-- 是否默认,true表示默认 --\u003e + \u003cactivation\u003e + \u003cactiveByDefault\u003etrue\u003c/activeByDefault\u003e + \u003c/activation\u003e + \u003c/profile\u003e + \u003cprofile\u003e + \u003cid\u003etest\u003c/id\u003e + \u003cproperties\u003e + \u003cpackage.environment\u003etest\u003c/package.environment\u003e + \u003c/properties\u003e + \u003c/profile\u003e + \u003c/profiles\u003e ...... \u003cbuild\u003e + \u003cfinalName\u003ewzs2_station_broadcast_v0.0.2_-${package.environment}\u003c/finalName\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-maven-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003cfork\u003etrue\u003c/fork\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003cplugin\u003e\u003c!-- 跳过单元测试 --\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-surefire-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003cskipTests\u003etrue\u003c/skipTests\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003c/project\u003e 修改yml配置 此处用@标签@，中间的标签位置就是pom文件中包围名称的标签 # 开发环境 server: port: 8086 tomcat: uri-encoding: utf-8 spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.13.177:3306/giedu # url: jdbc:mysql://127.0.0.1:3306/giedu username: springboot password: 123456 jpa: show-sql: true database-platform: org.hibernate.dialect.MySQL5InnoDBDialect hibernate: ddl-auto: update + profiles: + active: @package.environment@ boy: id: 1 name: lai sex: male age: 18 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:3:1","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"3.2.打包 使用命令mvn clean package -Pdev进行打包。 在打包时使用mvn clean package -Pdev即指定打包dev配置文件的项目，生成包的名称应为：项目名-服务名-dev PS D:\\code\\IdeaProjects\\springbootdemo\u003e date 2022年10月8日 17:06:10 PS D:\\code\\IdeaProjects\\springbootdemo\u003e mvn clean package -Pdev [INFO] Scanning for projects... [INFO] [INFO] -----------------\u003c cn.itcss.springboot:springbootdemo \u003e----------------- [INFO] Building springbootdemo 0.0.1-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO] [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ springbootdemo --- [INFO] Deleting D:\\code\\IdeaProjects\\springbootdemo\\target [INFO] [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ springbootdemo --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 4 resources [INFO] Copying 2 resources [INFO] [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ springbootdemo --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 25 source files to D:\\code\\IdeaProjects\\springbootdemo\\target\\classes [INFO] /D:/code/IdeaProjects/springbootdemo/src/main/java/cn/itcss/springboot/filter/FilterConfig.java: D:\\code\\IdeaProjects\\springbootdemo\\src\\main\\java\\cn\\itcss\\springboot\\filter\\FilterConfig.java使用了未经检查或不安全的操作。 [INFO] /D:/code/IdeaProjects/springbootdemo/src/main/java/cn/itcss/springboot/filter/FilterConfig.java: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。 [INFO] [INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ springbootdemo --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory D:\\code\\IdeaProjects\\springbootdemo\\src\\test\\resources [INFO] [INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ springbootdemo --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 1 source file to D:\\code\\IdeaProjects\\springbootdemo\\target\\test-classes [INFO] [INFO] --- maven-surefire-plugin:2.22.1:test (default-test) @ springbootdemo --- [INFO] Tests are skipped. [INFO] [INFO] --- maven-jar-plugin:3.1.1:jar (default-jar) @ springbootdemo --- [INFO] Building jar: D:\\code\\IdeaProjects\\springbootdemo\\target\\wzs2_station_broadcast_v0.0.2_-dev.jar [INFO] [INFO] --- spring-boot-maven-plugin:2.1.3.RELEASE:repackage (repackage) @ springbootdemo --- [INFO] Replacing main artifact with repackaged archive [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.472 s [INFO] Finished at: 2022-10-08T17:06:24+08:00 [INFO] ------------------------------------------------------------------------ PS D:\\code\\IdeaProjects\\springbootdemo\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:3:2","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"3.3.打包的文件 Microsoft Windows [版本 10.0.19044.2006]\r(c) Microsoft Corporation。保留所有权利。\rD:\\code\\IdeaProjects\\springbootdemo\\target\u003edate\r当前日期: 2022/10/08 周六\r输入新日期: (年月日)\rD:\\code\\IdeaProjects\\springbootdemo\\target\u003edir\r驱动器 D 中的卷是 新加卷\r卷的序列号是 8AC9-706C\rD:\\code\\IdeaProjects\\springbootdemo\\target 的目录\r2022/10/08 17:06 \u003cDIR\u003e .\r2022/10/08 17:06 \u003cDIR\u003e ..\r2022/10/08 17:06 \u003cDIR\u003e classes\r2022/10/08 17:06 \u003cDIR\u003e generated-sources\r2022/10/08 17:06 \u003cDIR\u003e generated-test-sources\r2022/10/08 17:06 \u003cDIR\u003e maven-archiver\r2022/10/08 17:06 \u003cDIR\u003e maven-status\r2022/10/08 17:06 \u003cDIR\u003e test-classes\r2022/10/08 17:06 39,624,168 wzs2_station_broadcast_v0.0.2_-dev.jar\r2022/10/08 17:06 30,494 wzs2_station_broadcast_v0.0.2_-dev.jar.original\r2 个文件 39,654,662 字节\r8 个目录 14,319,632,384 可用字节\rD:\\code\\IdeaProjects\\springbootdemo\\target\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:3:3","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"四、打包时的FAILURE问题 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:4:0","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"4.1.mvn打包遇到FAILURE FAILURE错误如下所示： PS D:\\code\\IdeaProjects\\springbootdemo\u003e mvn clean package -Pprod\r[INFO] Scanning for projects...\r[INFO] [INFO] -----------------\u003c cn.itcss.springboot:springbootdemo \u003e-----------------\r[INFO] Building springbootdemo 0.0.1-SNAPSHOT [INFO] --------------------------------[ jar ]---------------------------------\r[INFO] [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ springbootdemo ---\r[INFO] Deleting D:\\code\\IdeaProjects\\springbootdemo\\target\r[INFO] ------------------------------------------------------------------------\r[INFO] BUILD FAILURE\r[INFO] ------------------------------------------------------------------------\r[INFO] Total time: 1.648 s\r[INFO] Finished at: 2022-10-08T18:12:38+08:00\r[INFO] ------------------------------------------------------------------------\r[WARNING] The requested profile \"prod\" could not be activated because it does not exist.\r[ERROR] Failed to execute goal org.apache.maven.plugins:maven-clean-plugin:3.1.0:clean (default-clean) on project springbootdemo: Failed to clean project: Failed to delete D:\\code\\IdeaProjects\\springbootdemo\\target -\u003e [Help 1]\r[ERROR]\r[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\r[ERROR] Re-run Maven using the -X switch to enable full debug logging.\r[ERROR]\r[ERROR] For more information about the errors and possible solutions, please read the following articles:\r[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\rPS D:\\code\\IdeaProjects\\springbootdemo\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:4:1","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"4.2.问题解决 cmd命令行占用target目录，这样的话，使用mvn命令打包时会失败。 解决办法很简单，关闭此cmd窗口就可以了。 ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:4:2","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","springboot","项目打包"],"content":"4.3.打包成功 PS D:\\code\\IdeaProjects\\springbootdemo\u003e mvn clean package -Pprod\r[INFO] Scanning for projects...\r[INFO] [INFO] -----------------\u003c cn.itcss.springboot:springbootdemo \u003e-----------------\r[INFO] Building springbootdemo 0.0.1-SNAPSHOT\r[INFO] --------------------------------[ jar ]---------------------------------\r[INFO] [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ springbootdemo ---\r[INFO] Deleting D:\\code\\IdeaProjects\\springbootdemo\\target\r[INFO] [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ springbootdemo ---\r[INFO] Using 'UTF-8' encoding to copy filtered resources.\r[INFO] Copying 4 resources\r[INFO] Copying 2 resources\r[INFO] [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ springbootdemo ---\r[INFO] Changes detected - recompiling the module!\r[INFO] Compiling 25 source files to D:\\code\\IdeaProjects\\springbootdemo\\target\\classes\r[INFO] /D:/code/IdeaProjects/springbootdemo/src/main/java/cn/itcss/springboot/filter/FilterConfig.java: D:\\code\\IdeaProjects\\springbootdemo\\src\\main\\java\\cn\\itcss\\springboot\\filter\\FilterConfig.java使用了未经检查或不安全的操作。\r[INFO] /D:/code/IdeaProjects/springbootdemo/src/main/java/cn/itcss/springboot/filter/FilterConfig.java: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。\r[INFO]\r[INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ springbootdemo ---\r[INFO] Using 'UTF-8' encoding to copy filtered resources.\r[INFO] skip non existing resourceDirectory D:\\code\\IdeaProjects\\springbootdemo\\src\\test\\resources\r[INFO]\r[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ springbootdemo ---\r[INFO] Changes detected - recompiling the module!\r[INFO] Compiling 1 source file to D:\\code\\IdeaProjects\\springbootdemo\\target\\test-classes\r[INFO] [INFO] --- maven-surefire-plugin:2.22.1:test (default-test) @ springbootdemo ---\r[INFO] Tests are skipped.\r[INFO] [INFO] --- maven-jar-plugin:3.1.1:jar (default-jar) @ springbootdemo ---\r[INFO] Building jar: D:\\code\\IdeaProjects\\springbootdemo\\target\\wzs2_station_broadcast_v0.0.2_-dev.jar\r[INFO] [INFO] --- spring-boot-maven-plugin:2.1.3.RELEASE:repackage (repackage) @ springbootdemo ---\r[INFO] Replacing main artifact with repackaged archive\r[INFO] ------------------------------------------------------------------------\r[INFO] BUILD SUCCESS\r[INFO] ------------------------------------------------------------------------\r[INFO] Total time: 2.379 s\r[INFO] Finished at: 2022-10-08T18:13:46+08:00\r[INFO] ------------------------------------------------------------------------\r[WARNING] The requested profile \"prod\" could not be activated because it does not exist.\rPS D:\\code\\IdeaProjects\\springbootdemo\u003e ","date":"2022-09-23","objectID":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/:4:3","tags":["原创","springboot","项目打包","java","maven","maven打包"],"title":"springboot打包自定义文件名","uri":"https://daizelai.github.io/posts/springboot/20221008_1655springboot%E6%89%93%E5%8C%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6%E5%90%8D/springboot/"},{"categories":["原创","SC60","车载台"],"content":"屏幕黑屏问题记录","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"20220916_1316SC60屏幕黑屏问题记录 ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:0:0","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"一、描述 ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:0","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"1.1.现象 by daizelai on 2022/09/16 13:16 由于深圳14号线车载台现场出现好几次屏幕黑屏的问题了，现出黑屏时，从侧面看屏幕还是有光的，并且使用虚拟屏连接进入后，系统其实一切是正常的。 ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:1","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"1.2.首次修改 然后我在实验室复现了一次后，取了串口日志给移远看了后也没有找到具体的问题。然后让把屏幕驱动的初始化时间提到开启背光之前。 ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:2","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"二、屏幕驱动修改 ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:2:0","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"2.1.删除原有屏幕驱动实始化 把原有的屏幕驱动初始化删除掉。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff bootable/bootloader/lk/target/msm8953/target_display.c\rdiff --git a/bootable/bootloader/lk/target/msm8953/target_display.c b/bootable/bootloader/lk/target/msm8953/target_display.c\rindex ffb18f8..776b214 100755\r--- a/bootable/bootloader/lk/target/msm8953/target_display.c\r+++ b/bootable/bootloader/lk/target/msm8953/target_display.c\r@@ -299,7 +299,7 @@ static int mipi_convert_i2c_read(uint8_t slave_addr, uint8_t reg, uint8_t *val)\r}\r//#define DBG_MIPI_CONVERT\r-static int mipi_convert_init(void)\r+int mipi_convert_init(void)\r{\rint i = 0;\r#ifdef DBG_MIPI_CONVERT\r@@ -401,9 +401,9 @@ int target_panel_reset(uint8_t enable, struct panel_reset_sequence *resetseq,\rif (enable) {\r/*--\u003eadd by danny*/\r- printf(\"danny init\\n\");\r- mipi_convert_init();\r- printf(\"danny init end\\n\");\r+ /*printf(\"danny init\\n\");*/\r+ /*mipi_convert_init();*/\r+ /*printf(\"danny init end\\n\");*/\r/*\u003c--add by danny*/\rif (pinfo-\u003emipi.use_enable_gpio) {\rgpio_tlmm_config(enable_gpio.pin_id, 0,\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:2:1","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"2.2.在开背光之前调用屏幕驱动初始化 然后在背光开启之前，实始化屏幕驱动，这里Turn on backlight是开启背光。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff bootable/bootloader/lk/platform/msm_shared/display.c\rdiff --git a/bootable/bootloader/lk/platform/msm_shared/display.c b/bootable/bootloader/lk/platform/msm_shared/display.c\rindex 8733afa..e92ec6d 100644\r--- a/bootable/bootloader/lk/platform/msm_shared/display.c\r+++ b/bootable/bootloader/lk/platform/msm_shared/display.c\r@@ -43,6 +43,7 @@\rstatic struct msm_fb_panel_data *panel;\rextern int lvds_on(struct msm_fb_panel_data *pdata);\r+extern int mipi_convert_init(void);\rstatic int msm_fb_alloc(struct fbcon_config *fb)\r{\r@@ -350,6 +351,10 @@ int msm_display_init(struct msm_fb_panel_data *pdata)\rif (ret)\rgoto msm_display_init_out;\r+ printf(\"mipi_convert_init start\\n\");\r+ mipi_convert_init();\r+ printf(\"mipi_convert_init end\\n\");\r+\r/* Turn on backlight */\rif (pdata-\u003ebl_func)\rret = pdata-\u003ebl_func(1);\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:2:2","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"2.3.修改的完整代码 完整修改的代码如下： [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff bootable/bootloader/lk/target/msm8953/target_display.c bootable/bootloader/lk/platform/msm_shared/display.c\rdiff --git a/bootable/bootloader/lk/platform/msm_shared/display.c b/bootable/bootloader/lk/platform/msm_shared/display.c\rindex 8733afa..e92ec6d 100644\r--- a/bootable/bootloader/lk/platform/msm_shared/display.c\r+++ b/bootable/bootloader/lk/platform/msm_shared/display.c\r@@ -43,6 +43,7 @@\rstatic struct msm_fb_panel_data *panel;\rextern int lvds_on(struct msm_fb_panel_data *pdata);\r+extern int mipi_convert_init(void);\rstatic int msm_fb_alloc(struct fbcon_config *fb)\r{\r@@ -350,6 +351,10 @@ int msm_display_init(struct msm_fb_panel_data *pdata)\rif (ret)\rgoto msm_display_init_out;\r+ printf(\"mipi_convert_init start\\n\");\r+ mipi_convert_init();\r+ printf(\"mipi_convert_init end\\n\");\r+\r/* Turn on backlight */\rif (pdata-\u003ebl_func)\rret = pdata-\u003ebl_func(1);\rdiff --git a/bootable/bootloader/lk/target/msm8953/target_display.c b/bootable/bootloader/lk/target/msm8953/target_display.c\rindex ffb18f8..776b214 100755\r--- a/bootable/bootloader/lk/target/msm8953/target_display.c\r+++ b/bootable/bootloader/lk/target/msm8953/target_display.c\r@@ -299,7 +299,7 @@ static int mipi_convert_i2c_read(uint8_t slave_addr, uint8_t reg, uint8_t *val)\r}\r//#define DBG_MIPI_CONVERT\r-static int mipi_convert_init(void)\r+int mipi_convert_init(void)\r{\rint i = 0;\r#ifdef DBG_MIPI_CONVERT\r@@ -401,9 +401,9 @@ int target_panel_reset(uint8_t enable, struct panel_reset_sequence *resetseq,\rif (enable) {\r/*--\u003eadd by danny*/\r- printf(\"danny init\\n\");\r- mipi_convert_init();\r- printf(\"danny init end\\n\");\r+ /*printf(\"danny init\\n\");*/\r+ /*mipi_convert_init();*/\r+ /*printf(\"danny init end\\n\");*/\r/*\u003c--add by danny*/\rif (pinfo-\u003emipi.use_enable_gpio) {\rgpio_tlmm_config(enable_gpio.pin_id, 0,\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ date\rFri Sep 16 13:28:34 CST 2022\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:2:3","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"2.4.问题复现 在2022/09/16 15:43分左右我无意中发现的终端黑屏，然后拍照、视频和取串口日志。 终端黑屏时的串口日志 终端黑屏时的串口日志 SC60黑屏时的屏幕 SC60黑屏时的屏幕 SC60黑屏时的屏幕现象 车载台终端SC60黑屏现象视频记录下载 说明： 下面是复现现场视频播放，注意，需要在html格式中才能播放，pdf无法播放。 SC60黑屏时的屏幕现象 车载台终端SC60黑屏现象视频记录2下载 说明： 下面是复现现场视频播放，注意，需要在html格式中才能播放，pdf无法播放。 ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:2:4","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"三、读取屏幕驱动值 ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:3:0","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"3.1.沟通 与移远吴工沟通黑屏问题。 ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:3:1","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"3.2.打开开关宏 打开开关宏，然后在串口日志中就可以看到这个值了。 ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:3:2","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","SC60","车载台"],"content":"3.3.代码修改 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff bootable/bootloader/lk/target/msm8953/target_display.c diff --git a/bootable/bootloader/lk/target/msm8953/target_display.c b/bootable/bootloader/lk/target/msm8953/target_display.c index ffb18f8..34b0eec 100755 --- a/bootable/bootloader/lk/target/msm8953/target_display.c +++ b/bootable/bootloader/lk/target/msm8953/target_display.c @@ -298,8 +298,8 @@ static int mipi_convert_i2c_read(uint8_t slave_addr, uint8_t reg, uint8_t *val) return 0; } -//#define DBG_MIPI_CONVERT -static int mipi_convert_init(void) +#define DBG_MIPI_CONVERT +int mipi_convert_init(void) { int i = 0; #ifdef DBG_MIPI_CONVERT @@ -384,7 +384,8 @@ static int mipi_convert_init(void) /*--\u003efor test*/ for(i=0; i\u003c(int)sizeof(init_command); i+=2){ mipi_convert_i2c_read(0x2c, init_command[i], \u0026val); - printf(\"danny----reg=%x,valu=%x\\n\", init_command[i], val); + /*printf(\"danny----reg=%x,valu=%x\\n\", init_command[i], val); */ + printf(\"daizelai----reg=%x,valu=%x\\n\", init_command[i], val); } /*\u003c--for test*/ #endif @@ -401,9 +402,9 @@ int target_panel_reset(uint8_t enable, struct panel_reset_sequence *resetseq, if (enable) { /*--\u003eadd by danny*/ - printf(\"danny init\\n\"); - mipi_convert_init(); - printf(\"danny init end\\n\"); + /*printf(\"danny init\\n\");*/ + /*mipi_convert_init();*/ + /*printf(\"danny init end\\n\");*/ /*\u003c--add by danny*/ if (pinfo-\u003emipi.use_enable_gpio) { gpio_tlmm_config(enable_gpio.pin_id, 0, [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ date Fri Sep 16 14:09:27 CST 2022 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2022-09-16","objectID":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:3:3","tags":["原创","车载台","SC60","取日志","屏幕驱动","屏幕黑屏"],"title":"屏幕黑屏问题记录","uri":"https://daizelai.github.io/posts/sc60/20220916_1316sc60%E5%B1%8F%E5%B9%95%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["原创","linux"],"content":"搜索查找记录","date":"2022-08-19","objectID":"https://daizelai.github.io/posts/linux/linuxsearch/","tags":["原创","linux","linux搜索"],"title":"搜索查找记录","uri":"https://daizelai.github.io/posts/linux/linuxsearch/"},{"categories":["原创","linux"],"content":"搜索查找记录 ","date":"2022-08-19","objectID":"https://daizelai.github.io/posts/linux/linuxsearch/:0:0","tags":["原创","linux","linux搜索"],"title":"搜索查找记录","uri":"https://daizelai.github.io/posts/linux/linuxsearch/"},{"categories":["原创","linux"],"content":"一、描述 by daizelai on 2021/08/19 16:08 在SC60中搜索和查找相关文件。 关键字：日志搜索、搜索日志、linux搜索 ","date":"2022-08-19","objectID":"https://daizelai.github.io/posts/linux/linuxsearch/:1:0","tags":["原创","linux","linux搜索"],"title":"搜索查找记录","uri":"https://daizelai.github.io/posts/linux/linuxsearch/"},{"categories":["原创","linux"],"content":"二、在文件内容中查找 $ grep \"code\" -rni ./\r$ grep \"sdcard u:object_r:rootfs:s0\" -nr ./system/\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ grep \"code\" -rni ./\r./kernel/msm-3.18/kernel/power/snapshot.c:837: * initialization code)\r./kernel/msm-3.18/kernel/power/snapshot.c:1880: info-\u003eversion_code = LINUX_VERSION_CODE; ","date":"2022-08-19","objectID":"https://daizelai.github.io/posts/linux/linuxsearch/:2:0","tags":["原创","linux","linux搜索"],"title":"搜索查找记录","uri":"https://daizelai.github.io/posts/linux/linuxsearch/"},{"categories":["原创","linux"],"content":"四、gpio查找 gpio查找其实也是在文件内容中查找。 # grep -rn \"gpio99\" kernel/msm-3.18/arch/arm64/boot/dts/qcom/\r# grep -rn \"tlmm 99\" kernel/msm-3.18/arch/arm64/boot/dts/qcom/\r# grep -rn \"\u0026msm_gpio\" kernel/msm-3.18/arch/arm64/boot/dts/qcom/ 查找示例： $ grep -rn \"gpio99\" kernel/msm-3.18/arch/arm64/boot/dts/qcom/\rkernel/msm-3.18/arch/arm64/boot/dts/qcom/msm8953-pinctrl.dtsi:470: /*pins = \"gpio99\";*/\rkernel/msm-3.18/arch/arm64/boot/dts/qcom/msm8953-pinctrl.dtsi:475: /*pins = \"gpio99\";*/\rkernel/msm-3.18/arch/arm64/boot/dts/qcom/msm8953-pinctrl.dtsi:936: /*pins = \"gpio98\", \"gpio99\";*/\rkernel/msm-3.18/arch/arm64/boot/dts/qcom/msm8953-pinctrl.dtsi:942: /*pins = \"gpio98\", \"gpio99\";*/\rkernel/msm-3.18/arch/arm64/boot/dts/qcom/msm8953-pinctrl.dtsi:951: /*pins = \"gpio98\", \"gpio99\";*/\rkernel/msm-3.18/arch/arm64/boot/dts/qcom/msm8953-pinctrl.dtsi:957: /*pins = \"gpio98\", \"gpio99\";*/\r$ ","date":"2022-08-19","objectID":"https://daizelai.github.io/posts/linux/linuxsearch/:3:0","tags":["原创","linux","linux搜索"],"title":"搜索查找记录","uri":"https://daizelai.github.io/posts/linux/linuxsearch/"},{"categories":["原创","linux"],"content":"五、文件查找 查找 # find . -name Android.mk 按文件类型查找： # find ./device/qcom/ -type f -name splash.img\r./device/qcom/common/display/logo/splash.img\r./device/qcom/common/display/gbcom/splash.img\r# 示例： # find ./vendor/ -type f -name generate_extra_images.mk ./vendor/qcom/build/tasks/generate_extra_images.mk\r# ","date":"2022-08-19","objectID":"https://daizelai.github.io/posts/linux/linuxsearch/:4:0","tags":["原创","linux","linux搜索"],"title":"搜索查找记录","uri":"https://daizelai.github.io/posts/linux/linuxsearch/"},{"categories":["java","bit"],"content":"Java位运算","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"Java位运算（按位与、按位或、异或） ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:0:0","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"一、位运算 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:1:0","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"1.1.描述 位即二进制位或bit位 所有运算到计算中底层中都会变成位运算，位运算可以提高程序的效率,而且我们在研究JDK或者某个框架的源码时，会发现很多地方都用到了位运算！ 例如我们在对数组进行排序时会大量用到交换两个数的值，如何提高排序效率呢 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:1:1","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"1.2.用第三者 /** * 通过第三个变量交换 */ public static void exchangeNumByTemp(int num1, int num2){ // 创建第三个临时变量 int temp = num1; num1 = num2; num2 = temp; } ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:1:2","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"1.3.用按位异或 /** * 通过按位异或交换 */ public static void exchangeNumByXor(int num1, int num2){ num1 = num1 ^ num2; num2 = num1 ^ num2; num1 = num1 ^ num2; } 用按位异或的效率要高于前者。 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:1:3","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"二、位运算符的种类 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:2:0","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"2.2.运算符列表 1.\u0026：按位与 2.|：按位或 3.^：按位异或 4.~：按位取反 5.«：左移 6.»：右移 7.»\u003e：无符号右移 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:2:1","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"三、常用位运算解析 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:0","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.1.按位与（\u0026） 参加运算的两个数，按二进制位进行与运算。 运算规则：两个数的二进制同为1，结果才为1，否则为0 负数按照补码形式进行与运算 即0 \u0026 0 = 0,0 \u0026 1 = 0,1 \u0026 1 = 1 例如：3 \u0026 5 0011 \u0026 0101 = 0001 所以3\u00265的值为1 示例2： 定义：针对二进制，只要有一个为0，就为0。 2 \u0026 5 = 0 2的二进制：00000000 00000000 00000000 00000010 5的二进制：00000000 00000000 00000000 00000101 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:1","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.2.按位或运算符（|） 参加运算的两个数，按二进制位进行或运算 运算规则：两个数的二进制只要一个为1就为1 即0 | 0 = 0,0 | 1 = 1,1 | 1 = 1 例如：3 | 5 0011 | 0101 = 0111 所以3|5的值为7 示例2: 定义：针对二进制，只要有一个为1，就为1。 2 | 5 = 7 2的二进制：00000000 00000000 00000000 00000010 5的二进制：00000000 00000000 00000000 00000101 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:2","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.3.异或运算符（^） 参加运算的两个数，按二进制位进行异或运算 运算规则：两个数的二进制值不同，结果为1 即0 ^ 0 = 0,0 ^ 1 = 1,1 ^ 1 = 0 例如：3 ^ 5 0011 ^ 0101 = 0110 所以3^5的值为6 示例2： 定义：针对二进制，相同的为0，不同的为1。 2 ^ 5 = 7 2的二进制：00000000 00000000 00000000 00000010 5的二进制：00000000 00000000 00000000 00000101 2 ^ 3 = 1 2的二进制：00000000 00000000 00000000 00000010 3的二进制：00000000 00000000 00000000 00000011 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:3","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.4.~(按位非) 定义：按位取反运算符翻转操作数的每一位，即0变成1，1变成0。 ~8 = -9 8的二进制：00000000 00000000 00000000 00000100 ~8的二进制：11111111 11111111 11111111 11110111 因为高位是1，所以该数为负数。负数的补码是其绝对值的原码取反，末尾再加1。 末尾减1得反码：11111111 11111111 11111111 11110110 将反码取反：00000000 00000000 00000000 00001001 = 9 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:4","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.5.«(向左位移) 定义：针对二进制，转换成二进制后向左移动3位，后面用0补齐。 3 « 1 = 6 3的二进制：00000000 00000000 00000000 00000011 3左移后进制数：00000000 00000000 00000000 00000110 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:5","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.6.»(向右位移) 定义：针对二进制，转换成二进制后向右移动3位。 3 » 1 = 1 3的二进制：00000000 00000000 00000000 00000011 3右移后进制数：00000000 00000000 00000000 00000001 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:6","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["java","bit"],"content":"3.7.»\u003e(无符号右移) 定义：忽略符号位，空位都以0补齐。 -1 »\u003e 1 = 2147483647 -1的二进制(补码表示法)：11111111 11111111 11111111 11111111 右移后：01111111 11111111 11111111 11111111 ","date":"2022-05-20","objectID":"https://daizelai.github.io/posts/java/javabit/:3:7","tags":["java","bit"],"title":"Java位运算","uri":"https://daizelai.github.io/posts/java/javabit/"},{"categories":["原创","windows10","NTP服务器"],"content":"windows10搭建本地NTP服务器","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/windows/windowsntp/","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/windows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"windows10搭建本地NTP服务器 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/windows/windowsntp/:0:0","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/windows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"一、描述 因二开业务需要，将在本地Windows10笔记本上面搭建一个本地NTP服务器，用于车载台SC60终端中的车载台APP的NTP时间同步服务器。 by daizelai on 2021/12/1 11:03 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/windows/windowsntp/:1:0","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/windows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"二、搭建 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/windows/windowsntp/:2:0","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/windows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.1.启用NTP服务器 先打开注册表，使用win+r命令并输入regedit。 打开注册表[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer] Enabled值修改为1，这里默认值为0，1为启用NTP服务器。 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/windows/windowsntp/:2:1","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/windows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.2.修改时间源可靠性 打开注册表中[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\Config\\AnnounceFlags] 把AnnounceFlags默认的值10修改为5，5的意思就是自身为可靠的时间源，注意这里的10是十进制，如果是十六进制的话是字母a。 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/windows/windowsntp/:2:2","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/windows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.3.设置NTP服务器为开机启动 使用Win+r命令打开服务窗口，输入services.msc，找到Windows Time服务，启动并设置开机启动 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/windows/windowsntp/:2:3","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/windows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.4.重启NTP服务 使用快捷键Win+X，打开Windows PowerShell(管理员)，然后输入命令重启NTP服务器，让修改生效。 Windows PowerShell\r版权所有 (C) Microsoft Corporation。保留所有权利。\r尝试新的跨平台 PowerShell https://aka.ms/pscore6\rPS C:\\WINDOWS\\system32\u003e net stop w32time\rWindows Time 服务正在停止.\rWindows Time 服务已成功停止。\rPS C:\\WINDOWS\\system32\u003e net start w32time\rWindows Time 服务正在启动 .\rWindows Time 服务已经启动成功。\rPS C:\\WINDOWS\\system32\u003e 当然也可以直接在services.msc服务窗口，停止启动NTP服务。 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/windows/windowsntp/:2:4","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/windows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.5.检测命令 检测命令 w32tm /stripchart /computer:ntp_server_address 检测NTP服务器是否可用。 PS C:\\WINDOWS\\system32\u003e w32tm /stripchart /computer:127.0.0.1\r正在跟踪 127.0.0.1 [127.0.0.1:123]。\r当前时间是 2021/12/1 10:57:53。\r10:57:53, d:+00.0002170s o:+00.0000605s [ * ]\rPS C:\\WINDOWS\\system32\u003e w32tm /stripchart /computer:192.168.42.139\r正在跟踪 192.168.42.139 [192.168.42.139:123]。\r当前时间是 2021/12/1 10:58:00。\r10:58:00, d:+00.0001460s o:+00.0000538s [ * ]\r10:58:02, d:+00.0005158s o:+00.0001161s [ * ]\r10:58:04, d:+00.0002701s o:+00.0000668s [ * ]\r10:58:06, d:+00.0002298s o:+00.0000449s [ * ]\rPS C:\\WINDOWS\\system32\u003e ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/windows/windowsntp/:2:5","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/windows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.6.配置防火墙 在实际使用当中，发现SC60车载台APP中并不能请求到本地的NTP服务器以获取时间，这个时间只需要配置一条防火墙规则就可以了。 控制面板—\u003e系统和安全—\u003ewindows防火墙—\u003e高级设置—\u003e入站规则(右键)—\u003e新建规则—\u003e端口—\u003e下一步—-\u003eUDP—-\u003e特定本地端口：123(不要换别的) 一直点下一步，直到下面这个页面填写名称：NTP，完成。 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/windows/windowsntp/:2:6","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/windows/windowsntp/"},{"categories":["原创","windows10","NTP服务器"],"content":"2.7.其它机器进行验证 这个是其它linux服务器使用这个NTP进行时间校准使用的。 # ntpdate -u 192.168.42.139 ","date":"2021-12-01","objectID":"https://daizelai.github.io/posts/windows/windowsntp/:2:7","tags":["原创","windows10","NTP服务器","NTP"],"title":"windows10搭建本地NTP服务器","uri":"https://daizelai.github.io/posts/windows/windowsntp/"},{"categories":["原创","SC60","单编"],"content":"源码编译单个系统app","date":"2021-09-06","objectID":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/","tags":["原创","SC60","单编"],"title":"源码编译单个系统app","uri":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/"},{"categories":["原创","SC60","单编"],"content":"源码编译单个系统app ","date":"2021-09-06","objectID":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/:0:0","tags":["原创","SC60","单编"],"title":"源码编译单个系统app","uri":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/"},{"categories":["原创","SC60","单编"],"content":"一、描述 在SC60源码中直接编译单个系统app。 by daizelai on 2021/09/06 16:48 ","date":"2021-09-06","objectID":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/:1:0","tags":["原创","SC60","单编"],"title":"源码编译单个系统app","uri":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/"},{"categories":["原创","SC60","单编"],"content":"二、编译方法 ","date":"2021-09-06","objectID":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/:2:0","tags":["原创","SC60","单编"],"title":"源码编译单个系统app","uri":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/"},{"categories":["原创","SC60","单编"],"content":"路径 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ pwd\r/home/android_SC20/daizelai/androidsc60/sc60_android_7.1.2_qcom_sz14 ","date":"2021-09-06","objectID":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/:2:1","tags":["原创","SC60","单编"],"title":"源码编译单个系统app","uri":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/"},{"categories":["原创","SC60","单编"],"content":"编译 使用mmm命令编译，但有一个前提，必须是完整编译过一次系统才能使用mmm，如果没有编译过，或者使用过make clean立即执行mmm file命令是无法执行的。 ......\rBUILD_ID=N2G47H\rOUT_DIR=out\r============================================\rUnknown option: -C\rusage: git [--version] [--help] [-c name=value]\r[--exec-path[=\u003cpath\u003e]] [--html-path] [--man-path] [--info-path]\r[-p|--paginate|--no-pager] [--no-replace-objects] [--bare]\r[--git-dir=\u003cpath\u003e] [--work-tree=\u003cpath\u003e] [--namespace=\u003cname\u003e]\r\u003ccommand\u003e [\u003cargs\u003e]\rmake: Entering directory `/home/android_SC20/daizelai/androidsc60/sc60_android_7.1.2_qcom_sz14'\rRunning kati to generate build-efc28e71d8f1fdd3f3f8f083ddc7d1fe.ninja...\rNo need to regenerate ninja file\rStarting build with ninja\rninja: Entering directory `.' ninja: error: 'out/target/common/obj/JAVA_LIBRARIES/core-junit_intermediates/classes.dex.toc', needed by 'out/target/common/obj/JAVA\r_LIBRARIES/settings-logtags_intermediates/classes.jack', missing and no known rule to make it make: *** [ninja_wrapper] Error 1\rmake: Leaving directory `/home/android_SC20/daizelai/androidsc60/sc60_android_7.1.2_qcom_sz14'\r^[[0;31m#### make failed to build some targets (1 seconds) ####^[[00m 执行mmm命令开始编译。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ mmm /home/android_SC20/daizelai/androidsc60/sc60_android_7.1.2_qcom_sz14/packages/apps/Settings/\r============================================\rPLATFORM_VERSION_CODENAME=REL\rPLATFORM_VERSION=7.1.2\rTARGET_PRODUCT=msm8953_64\rTARGET_BUILD_VARIANT=userdebug\rTARGET_BUILD_TYPE=release\rTARGET_BUILD_APPS=\rTARGET_ARCH=arm64\rTARGET_ARCH_VARIANT=armv8-a\rTARGET_CPU_VARIANT=generic\rTARGET_2ND_ARCH=arm\rTARGET_2ND_ARCH_VARIANT=armv7-a-neon\rTARGET_2ND_CPU_VARIANT=cortex-a53\rHOST_ARCH=x86_64\rHOST_2ND_ARCH=x86\rHOST_OS=linux\rHOST_OS_EXTRA=Linux-3.10.0-1127.13.1.el7.x86_64-x86_64-with-centos-7.8.2003-Core\rHOST_CROSS_OS=windows\rHOST_CROSS_ARCH=x86\rHOST_CROSS_2ND_ARCH=x86_64\rHOST_BUILD_TYPE=release\rBUILD_ID=N2G47H\rOUT_DIR=out\r============================================\rUnknown option: -C\rusage: git [--version] [--help] [-c name=value]\r[--exec-path[=\u003cpath\u003e]] [--html-path] [--man-path] [--info-path]\r[-p|--paginate|--no-pager] [--no-replace-objects] [--bare]\r[--git-dir=\u003cpath\u003e] [--work-tree=\u003cpath\u003e] [--namespace=\u003cname\u003e]\r\u003ccommand\u003e [\u003cargs\u003e]\rmake: Entering directory `/home/android_SC20/daizelai/androidsc60/sc60_android_7.1.2_qcom_sz14'\rRunning kati to generate build-efc28e71d8f1fdd3f3f8f083ddc7d1fe.ninja...\rout/build-efc28e71d8f1fdd3f3f8f083ddc7d1fe.ninja is missing, regenerating...\r============================================\rPLATFORM_VERSION_CODENAME=REL\rPLATFORM_VERSION=7.1.2\rTARGET_PRODUCT=msm8953_64\rTARGET_BUILD_VARIANT=userdebug\rTARGET_BUILD_TYPE=release\rTARGET_BUILD_APPS=\rTARGET_ARCH=arm64\rTARGET_ARCH_VARIANT=armv8-a\rTARGET_CPU_VARIANT=generic\rTARGET_2ND_ARCH=arm\rTARGET_2ND_ARCH_VARIANT=armv7-a-neon\rTARGET_2ND_CPU_VARIANT=cortex-a53\rHOST_ARCH=x86_64\rHOST_2ND_ARCH=x86\rHOST_OS=linux\rHOST_OS_EXTRA=Linux-3.10.0-1127.13.1.el7.x86_64-x86_64-with-centos-7.8.2003-Core\rHOST_CROSS_OS=windows\rHOST_CROSS_ARCH=x86\rHOST_CROSS_2ND_ARCH=x86_64\rHOST_BUILD_TYPE=release\rBUILD_ID=N2G47H\rOUT_DIR=out\r============================================\r*** Overlay change detected, clean shared intermediate files...\r*** rm -rf out/target/common/obj/APPS/Settings_intermediates\r*** Obsolete generated java files detected, clean intermediate files...\r*** rm -rf out/target/common/obj/APPS/Settings_intermediates/src\rPRODUCT_COPY_FILES device/qcom/common/media/media_profiles.xml:system/etc/media_profiles.xml ignored.\rPRODUCT_COPY_FILES device/qcom/common/media/media_codecs.xml:system/etc/media_codecs.xml ignored.\rNo private recovery resources for TARGET_DEVICE msm8953_64\r616+0 records in\r616+0 records out\r630784 bytes (631 kB) copied, 0.0145401 s, 43.4 MB/s\rvendor/qcom/build/tasks/generate_extra_images.mk:55: warning: overriding commands for target `out/target/product/msm8953_64/root/persist'\rvendor/qcom/build/tasks/generate_extra_images.mk:50: warning: ignoring old commands for target `out/target/product/msm8953_64/root/pe","date":"2021-09-06","objectID":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/:2:2","tags":["原创","SC60","单编"],"title":"源码编译单个系统app","uri":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/"},{"categories":["原创","SC60","单编"],"content":"测试 可以在编译控制日志中发现Settings.apk。 [100% 16/16] Install: out/target/product/msm8953_64/system/priv-app/Settings/Settings.apk 可以看到Settings.apk已经存在了 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ls -lh out/target/product/msm8953_64/system/priv-app/Settings/\rtotal 19M\rdrwxrwxr-x 3 android_SC20 android_SC20 4.0K Sep 6 14:31 oat\r-rw-rw-r-- 1 android_SC20 android_SC20 19M Sep 6 16:54 Settings.apk\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2021-09-06","objectID":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/:2:3","tags":["原创","SC60","单编"],"title":"源码编译单个系统app","uri":"https://daizelai.github.io/posts/sc60/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E7%B3%BB%E7%BB%9Fapp/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"SC60版本包升级注意事项 ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:0:0","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"一、描述 by daizelai on 2021/08/11 14:00 本文主要记录了SC60制作版本时需要注意的几点，比如如何修改版本号、产品型号、默认的软件集成列表等。 ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:1:0","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"二、编译前的源码修改【老】 ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:2:0","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"2.1.系统版本号 当前系统的版本号，固定台和车载台的版本号是不一样的。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff build/tools/buildinfo.sh\rdiff --git a/build/tools/buildinfo.sh b/build/tools/buildinfo.sh\rindex 406ce53..1ef8f22 100755\r--- a/build/tools/buildinfo.sh\r+++ b/build/tools/buildinfo.sh\r@@ -15,7 +15,7 @@ echo \"ro.build.version.sdk=$PLATFORM_SDK_VERSION\"\recho \"ro.build.version.preview_sdk=$PLATFORM_PREVIEW_SDK_VERSION\"\recho \"ro.build.version.codename=$PLATFORM_VERSION_CODENAME\"\recho \"ro.build.version.all_codenames=$PLATFORM_VERSION_ALL_CODENAMES\"\r-echo \"ro.build.version.release=FX300-ANDROID-7.1-R0001\"\r+echo \"ro.build.version.release=FX300-ANDROID-7.1-R0002\"\recho \"ro.build.quectelversion.release=01.$QUECTEL_VERSION\"\recho \"ro.build.version.security_patch=$PLATFORM_SECURITY_PATCH\"\recho \"ro.build.version.base_os=$PLATFORM_BASE_OS\"\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:2:1","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"2.2.产品型号 产品型号，分为车载台和固定台，并且每条SC60产品线可能型号不同。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff device/qcom/msm8953_64/msm8953_64.mk diff --git a/device/qcom/msm8953_64/msm8953_64.mk b/device/qcom/msm8953_64/msm8953_64.mk\rindex 8c69907..1dbcb4b 100755\r--- a/device/qcom/msm8953_64/msm8953_64.mk\r+++ b/device/qcom/msm8953_64/msm8953_64.mk\r@@ -34,7 +34,9 @@ $(call inherit-product, device/qcom/common/common64.mk)\rPRODUCT_NAME := msm8953_64\rPRODUCT_DEVICE := msm8953_64\rPRODUCT_BRAND := Android\r-PRODUCT_MODEL := msm8953 for arm64\r+#modify product model by daizelai on 2021/08/10 18:38\r+#PRODUCT_MODEL := msm8953 for arm64\r+PRODUCT_MODEL := BT-TX300\rPRODUCT_BOOT_JARS += tcmiface\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:2:2","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"三、编译前的源码修改【新】 ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:3:0","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"3.1.产品型号 产品型号，分为车载台和固定台，并且每条SC60产品线可能型号不同，比如。 车载台产品型号BT-TX300。 固定台产品型号BT-FX300。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ cp /home/android_SC20/daizelai/sc60/version/fx300_sz_msm8953_64.mk device/qcom/msm8953_64/msm8953_64.mk\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff device/qcom/msm8953_64/msm8953_64.mk diff --git a/device/qcom/msm8953_64/msm8953_64.mk b/device/qcom/msm8953_64/msm8953_64.mk\rindex 1dbcb4b..f467427 100755\r--- a/device/qcom/msm8953_64/msm8953_64.mk\r+++ b/device/qcom/msm8953_64/msm8953_64.mk\r@@ -36,7 +36,7 @@ PRODUCT_DEVICE := msm8953_64\rPRODUCT_BRAND := Android\r#modify product model by daizelai on 2021/08/10 18:38\r#PRODUCT_MODEL := msm8953 for arm64\r-PRODUCT_MODEL := BT-TX300\r+PRODUCT_MODEL := BT-FX300\rPRODUCT_BOOT_JARS += tcmiface\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:3:1","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"3.2.系统版本号 当前系统的版本号，固定台和车载台的版本号是不一样的，且每次升级版本，版本号需要加1。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ date\rThu Sep 15 11:10:20 CST 2022\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff build/core/Makefile\rdiff --git a/build/core/Makefile b/build/core/Makefile\rindex 020f461..3dc16b3 100755\r--- a/build/core/Makefile\r+++ b/build/core/Makefile\r@@ -182,7 +182,7 @@ OEM_THUMBPRINT_PROPERTIES := $(filter $(KNOWN_OEM_THUMBPRINT_PROPERTIES),\\\r#endif\r# WZS2train.last.ver=R0015\r-BUILD_DISPLAY_ID := \"TX300-ANDROID-7.1-R0015\"\r+BUILD_DISPLAY_ID := \"TX300-ANDROID-7.1-R0017\"\r# Accepts a whitespace separated list of product locales such as\r# (en_US en_AU en_GB...) and returns the first locale in the list with\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ 修改为 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff build/core/Makefile\rdiff --git a/build/core/Makefile b/build/core/Makefile\rindex 020f461..d5a6fec 100755\r--- a/build/core/Makefile\r+++ b/build/core/Makefile\r@@ -182,7 +182,7 @@ OEM_THUMBPRINT_PROPERTIES := $(filter $(KNOWN_OEM_THUMBPRINT_PROPERTIES),\\\r#endif\r# WZS2train.last.ver=R0015\r-BUILD_DISPLAY_ID := \"TX300-ANDROID-7.1-R0015\"\r+BUILD_DISPLAY_ID := \"FX300-ANDROID-7.1-R0017\"\r# Accepts a whitespace separated list of product locales such as\r# (en_US en_AU en_GB...) and returns the first locale in the list with\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:3:2","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"3.3.默认集成的软件 默认深圳14号线集成车载台APP软件。 这里可以修改默认系统集成的软件列表，比如： 深圳14号的集成SubwaySystem。 温州S2号线的集成MetroSystem。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff device/qcom/common/base.mk\rdiff --git a/device/qcom/common/base.mk b/device/qcom/common/base.mk\rindex 8b40167..c0d21c3 100755\r--- a/device/qcom/common/base.mk\r+++ b/device/qcom/common/base.mk\r@@ -711,7 +711,7 @@ FSTMAN += fstman.ini\rPRODUCT_PACKAGES := \\\rgooglepinyin \\\rLauncher98 \\\r- MetroSystem \\\r+ SubwaySystem \\\rTrainCheck \\\rAccountAndSyncSettings \\\rDeskClock \\\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:3:3","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"3.4.外接受话器类型 每次做版本，根据版本类型不同，需要修改此项配置。 深圳手柄版本，修改AUDIO_PARAMETER_VALUE_ON判断为true。 温州手咪版本，修改AUDIO_PARAMETER_VALUE_ON判断为false。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ date Wed Sep 21 17:08:20 CST 2022 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff hardware/qcom/audio/hal/audio_hw.c diff --git a/hardware/qcom/audio/hal/audio_hw.c b/hardware/qcom/audio/hal/audio_hw.c index 5538a01..39f52a9 100644 --- a/hardware/qcom/audio/hal/audio_hw.c +++ b/hardware/qcom/audio/hal/audio_hw.c @@ -3962,11 +3962,13 @@ static int adev_set_parameters(struct audio_hw_device *dev, const char *kvpairs) if (ret \u003e= 0) { /* When set to false, HAL should select shoubing mode */ if (strcmp(value, AUDIO_PARAMETER_VALUE_ON) == 0){ - adev-\u003ehandmi_mode = true; + /* WzS2 is false by default by daizelai on 2022/09/20 10:01 */ + adev-\u003ehandmi_mode = true; } else { ALOGD(\"route device to shobing mode\"); - adev-\u003ehandmi_mode = false; + /* WzS2 is true by default by daizelai on 2022/09/20 10:01 */ + adev-\u003ehandmi_mode = false; } ALOGD(\"lzq value = %s adev-\u003ehandmi_mode = %d\", value, adev-\u003ehandmi_mode); } [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:3:4","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"四、刷机注意事项 ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:4:0","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"4.1.刷BP版本 如果是新板子，必须先刷BP版本，然后再刷自己的镜像版本。 ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:4:1","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"4.2.刷机工具应用splash.img 如果是第一次刷的话。 版本镜像制作出来以后，需要配置splash.img，让开机画面生效。 ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:4:2","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","车载台","版本制作","系统升级"],"content":"4.3.说明 最新应该从R0015版本开始，不需要单独刷splash.img了。 ","date":"2021-08-11","objectID":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/:4:3","tags":["原创","车载台","SC60","版本制作","系统升级"],"title":"版本包升级注意事项","uri":"https://daizelai.github.io/posts/sc60/sc60%E7%89%88%E6%9C%AC%E5%8C%85%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"categories":["原创","SC60","制作安装包"],"content":"6. 制作OTA升级包二 ","date":"2021-06-07","objectID":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/:0:0","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包","制作升级包"],"title":"制作OTA升级包二","uri":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/"},{"categories":["原创","SC60","制作安装包"],"content":"一、描述 本文第二次记录了SC60系统的OTA升级包，以前制作OTA升级包的全过程，最后把制作好的update.zip通过命令的形式升级到SC60终端设备上去。 关键字： 制作update包，制作update.zip包，编译update包，编译update.zip包。 SC60制作update包，制作update升级包，制作update.zip升级包,SC60系统OTA包。 ","date":"2021-06-07","objectID":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/:1:0","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包","制作升级包"],"title":"制作OTA升级包二","uri":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/"},{"categories":["原创","SC60","制作安装包"],"content":"二、编译前工作 制作OTA升级包之前，需要全编译系统。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ pwd\r/home/android_SC20/daizelai/androidsc60/sc60_android_7.1.2_qcom_sz14\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ source build/envsetup.sh\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ lunch msm8953_64-userdebug\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ make clean \u0026\u0026 make -j 20 ","date":"2021-06-07","objectID":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/:2:0","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包","制作升级包"],"title":"制作OTA升级包二","uri":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/"},{"categories":["原创","SC60","制作安装包"],"content":"三、编译OTA升级包 ","date":"2021-06-07","objectID":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/:3:0","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包","制作升级包"],"title":"制作OTA升级包二","uri":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/"},{"categories":["原创","SC60","制作安装包"],"content":"3.1.编译OTA版本 其实通过命令make dist -j 20编译出来下面的路径中的文件就是OTA升级包，可以直接拿去系统升级。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ make dist -j 20\r......\rusing prebuilt boot.img from IMAGES...\rboot size (28646696) is 42.69% of limit (67108864)\rLoading radio filesmap...\rLoading radio target...\rwarning radio-update: no radio images in input target_files\rrunning: openssl pkcs8 -in build/target/product/security/testkey.pk8 -inform DER -nocrypt\rrunning: java -Xmx2048m -Djava.library.path=out/host/linux-x86/lib64 -jar out/host/linux-x86/framework/signapk.jar -w build/target/product/security/testkey.x509.pem build/target/product/security/testkey.pk8 /tmp/tmpzfnbJo out/target/product/msm8953_64/msm8953_64-ota-eng.android_SC20.zip\rdone.\r[100% 10243/10243] Dist: out/dist/msm8953_64-ota-eng.android_SC20.zip\r#### make completed successfully (23:44 (mm:ss)) ####\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ 最终会生成如下两个文件，都可以直接使用。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ls -alh ./out/target/product/msm8953_64/msm8953_64-ota-eng.android_SC20.zip -rw-rw-r-- 1 android_SC20 android_SC20 757M Jun 7 09:50 ./out/target/product/msm8953_64/msm8953_64-ota-eng.android_SC20.zip\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ls -alh ./out/dist/msm8953_64-ota-eng.android_SC20.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 757M Jun 7 09:50 ./out/dist/msm8953_64-ota-eng.android_SC20.zip\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14] ","date":"2021-06-07","objectID":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/:3:1","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包","制作升级包"],"title":"制作OTA升级包二","uri":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/"},{"categories":["原创","SC60","制作安装包"],"content":"3.2.编译OTA版本 除了上面的升级包使用名，也可以用msm8953_64-target_files-eng.android_SC20.zip制作整包： 查看编译出来的文件。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ pwd\r/home/android_SC20/daizelai/androidsc60/sc60_android_7.1.2_qcom_sz14\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ls -alh ./out/dist/\rtotal 4.5G\rdrwxrwxr-x 3 android_SC20 android_SC20 4.0K Jun 7 09:50 .\rdrwxrwxr-x 5 android_SC20 android_SC20 20K Jun 7 09:39 ..\r-rwxrwxr-x 1 android_SC20 android_SC20 13M Jun 7 09:30 adb\r-rw-rw-r-- 1 android_SC20 android_SC20 14 Jun 7 09:30 android-info.txt\r-rw-r--r-- 1 android_SC20 android_SC20 9.6K Jun 7 09:34 build.prop\r-rw-rw-r-- 1 android_SC20 android_SC20 5.0K Jun 7 09:30 com.android.qti.qpay.jar\r-rwxrwxr-x 1 android_SC20 android_SC20 8.2M Jun 7 09:30 fastboot\r-rwxrwxr-x 1 android_SC20 android_SC20 3.6K Jun 7 09:30 filesmap\r-rw-rw-r-- 1 android_SC20 android_SC20 52M Jun 7 09:31 gpl_source.tgz\r-rw-rw-r-- 1 android_SC20 android_SC20 364K Jun 7 09:35 installed-files.txt\r-rwxrwxr-x 1 android_SC20 android_SC20 8.1M Jun 7 09:29 libconscrypt_openjdk_jni.so\r-rwxrwxr-x 1 android_SC20 android_SC20 340K Jun 7 09:30 libf2fs_fmt_host_dyn.so\rdrwxrwxr-x 3 android_SC20 android_SC20 4.0K Jun 7 09:30 logs\r-rwxrwxr-x 1 android_SC20 android_SC20 32K Jun 7 09:30 mkbootfs\r-rw-rw-r-- 1 android_SC20 android_SC20 143M Jun 7 09:40 msm8953_64-apps-eng.android_SC20.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 774M Jun 7 09:46 msm8953_64-img-eng.android_SC20.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 757M Jun 7 09:50 msm8953_64-ota-eng.android_SC20.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 1.3G Jun 7 09:44 msm8953_64-symbols-eng.android_SC20.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 1.6G Jun 7 09:44 msm8953_64-target_files-eng.android_SC20.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 30M Jun 7 09:34 otatools.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 141K Jun 7 09:34 package-stats.txt\r-rw-rw-r-- 1 android_SC20 android_SC20 2.0M Jun 7 09:30 ramdisk.img\r-rw-rw-r-- 1 android_SC20 android_SC20 2.0M Jun 7 09:29 signapk.jar\r-rw-rw-r-- 1 android_SC20 android_SC20 102K Jun 7 09:34 wigig_manager.jar\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ 执行命令列表： 删除旧update.zip：ls -lh update.zip 删除旧版本包：ls msm8953_64-target_files-eng.android_SC20.zip 查看版本包：ls -lh out/target/product/msm8953_64/obj/PACKAGING/target_files_intermediates/msm8953_64-target_files-eng.android_SC20.zip 复制版本包：cp out/target/product/msm8953_64/obj/PACKAGING/target_files_intermediates/msm8953_64-target_files-eng.android_SC20.zip . 编译update.zip：./build/tools/releasetools/ota_from_target_files -v --block -p out/host/linux-x86 -k ./build/target/product/security/testkey -v msm8953_64-target_files-eng.android_SC20.zip update.zip 开始手动编译OTA升级包。 复制文件 先复制make dist -j 20命令编译出来的out/target/product/msm8953_64/obj/PACKAGING/target_files_intermediates/msm8953_64-target_files-eng.android_SC20.zip文件到源码根目录下ota目录。 这里查看一下ota目录下有没有同名文件，如果有请删除。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ls msm8953_64-target_files-eng.android_SC20.zip\rls: cannot access msm8953_64-target_files-eng.android_SC20.zip: No such file or directory\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ls -lh out/target/product/msm8953_64/obj/PACKAGING/target_files_intermediates/msm8953_64-target_files-eng.android_SC20.zip -rw-rw-r-- 1 android_SC20 android_SC20 1.6G Jun 7 09:44 out/target/product/msm8953_64/obj/PACKAGING/target_files_intermediates/msm8953_64-target_files-eng.android_SC20.zip 复制msm8953_64-target_files-eng.android_SC20.zip到源码根目录下ota目录。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ cp out/target/product/msm8953_64/obj/PACKAGING/target_files_intermediates/msm8953_64-target_files-eng.android_SC20.zip . [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ls -lh msm8953_64-target_files-eng.android_SC20.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 1.6G Jun 7 10:03 msm8953_64-target_files-eng.android_SC20.zip 再来看一下ota目录下有没有将要生成的同名的update.zip包，有则删除。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ls -lh update.zip\rls: ca","date":"2021-06-07","objectID":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/:3:2","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包","制作升级包"],"title":"制作OTA升级包二","uri":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/"},{"categories":["原创","SC60","制作安装包"],"content":"四、安装版本 升级版本 adb root\radb push update.zip /data/update.zip\radb shell\recho \"--update_package=/data/update.zip\" \u003e /cache/recovery/command\rsync\rreboot recovery ","date":"2021-06-07","objectID":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/:4:0","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包","制作升级包"],"title":"制作OTA升级包二","uri":"https://daizelai.github.io/posts/sc60/6.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85%E4%BA%8C/"},{"categories":["原创","SC60","OTA升级包"],"content":"制作OTA升级包","date":"2021-06-01","objectID":"https://daizelai.github.io/posts/sc60/5.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85/","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包"],"title":"制作OTA升级包","uri":"https://daizelai.github.io/posts/sc60/5.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85/"},{"categories":["原创","SC60","OTA升级包"],"content":"5. 制作OTA升级包 ","date":"2021-06-01","objectID":"https://daizelai.github.io/posts/sc60/5.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85/:0:0","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包"],"title":"制作OTA升级包","uri":"https://daizelai.github.io/posts/sc60/5.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85/"},{"categories":["原创","SC60","OTA升级包"],"content":"一、描述 本文记录了如何制作SC60系统的OTA升级包，以前制作OTA升级包的全过程。 关键字： 制作update包，制作update.zip包，编译update包，编译update.zip包。 SC60制作update包，制作update升级包，制作update.zip升级包。 ","date":"2021-06-01","objectID":"https://daizelai.github.io/posts/sc60/5.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85/:1:0","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包"],"title":"制作OTA升级包","uri":"https://daizelai.github.io/posts/sc60/5.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85/"},{"categories":["原创","SC60","OTA升级包"],"content":"二、编译前工作 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ pwd\r/home/android_SC20/daizelai/androidsc60/sc60_android_7.1.2_qcom_sz14\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ source build/envsetup.sh\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ lunch msm8953_64-userdebug\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ make clean \u0026\u0026 make -j 20 ","date":"2021-06-01","objectID":"https://daizelai.github.io/posts/sc60/5.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85/:2:0","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包"],"title":"制作OTA升级包","uri":"https://daizelai.github.io/posts/sc60/5.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85/"},{"categories":["原创","SC60","OTA升级包"],"content":"三、编译版本 编译版本 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ make dist -j 20\r......\rmax stashed blocks: 0 (0 bytes), limit: 214748364 bytes (0.00%)\rusing prebuilt boot.img from IMAGES...\rboot size (28642600) is 42.68% of limit (67108864)\rLoading radio filesmap...\rLoading radio target...\rwarning radio-update: no radio images in input target_files\rrunning: openssl pkcs8 -in build/target/product/security/testkey.pk8 -inform DER -nocrypt\rrunning: java -Xmx2048m -Djava.library.path=out/host/linux-x86/lib64 -jar out/host/linux-x86/framework/signapk.jar -w build/target/product/security/testkey.x509.pem build/target/product/security/testkey.pk8 /tmp/tmpjNysO3 out/target/product/msm8953_64/msm8953_64-ota-eng.android_SC20.zip\rdone.\r[100% 57222/57222] Dist: out/dist/msm8953_64-ota-eng.android_SC20.zip\r#### make completed successfully (01:00:23 (hh:mm:ss)) ####\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ pwd\r/home/android_SC20/daizelai/androidsc60/sc60_android_7.1.2_qcom_sz14\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ls build/tools/releasetools/ota_from_target_files\rbuild/tools/releasetools/ota_from_target_files\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ 查看编译出来的文件 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ls -l out/dist/\rtotal 4837452\r-rwxrwxr-x 1 android_SC20 android_SC20 13614080 May 31 17:42 adb\r-rw-rw-r-- 1 android_SC20 android_SC20 14 May 31 17:37 android-info.txt\r-rw-r--r-- 1 android_SC20 android_SC20 9809 May 31 17:37 build.prop\r-rw-rw-r-- 1 android_SC20 android_SC20 5082 May 31 17:07 com.android.qti.qpay.jar\r-rwxrwxr-x 1 android_SC20 android_SC20 8517928 May 31 17:42 fastboot\r-rwxrwxr-x 1 android_SC20 android_SC20 3655 May 31 17:37 filesmap\r-rw-rw-r-- 1 android_SC20 android_SC20 54318991 May 31 17:06 gpl_source.tgz\r-rw-rw-r-- 1 android_SC20 android_SC20 374888 May 31 17:38 installed-files.txt\r-rwxrwxr-x 1 android_SC20 android_SC20 8405360 May 31 17:04 libconscrypt_openjdk_jni.so\r-rwxrwxr-x 1 android_SC20 android_SC20 347632 May 31 17:42 libf2fs_fmt_host_dyn.so\rdrwxrwxr-x 3 android_SC20 android_SC20 4096 May 31 17:14 logs\r-rwxrwxr-x 1 android_SC20 android_SC20 31776 May 31 17:42 mkbootfs\r-rw-rw-r-- 1 android_SC20 android_SC20 185513149 May 31 17:50 msm8953_64-apps-eng.android_SC20.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 836119767 May 31 17:56 msm8953_64-img-eng.android_SC20.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 818408292 May 31 18:00 msm8953_64-ota-eng.android_SC20.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 1331049032 May 31 17:53 msm8953_64-symbols-eng.android_SC20.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 1661282367 May 31 17:54 msm8953_64-target_files-eng.android_SC20.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 31161102 May 31 17:39 otatools.zip\r-rw-rw-r-- 1 android_SC20 android_SC20 146460 May 31 17:37 package-stats.txt\r-rw-rw-r-- 1 android_SC20 android_SC20 2059276 May 31 17:37 ramdisk.img\r-rw-rw-r-- 1 android_SC20 android_SC20 2016888 May 31 17:04 signapk.jar\r-rw-rw-r-- 1 android_SC20 android_SC20 103788 May 31 17:42 wigig_manager.jar\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2021-06-01","objectID":"https://daizelai.github.io/posts/sc60/5.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85/:3:0","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包"],"title":"制作OTA升级包","uri":"https://daizelai.github.io/posts/sc60/5.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85/"},{"categories":["原创","SC60","OTA升级包"],"content":"四、制作update.zip版本 制作ota_update.zip包，时间大概需要5分钟。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ./build/tools/releasetools/ota_from_target_files out/dist/msm8953_64-target_files-eng.android_SC20.zip ota_update.zip\runzipping target target-files...\r(using device-specific extensions from target_files)\rloaded device-specific extensions from /tmp/targetfiles-RFJrwd/META/releasetools.py\rusing prebuilt recovery.img from IMAGES...\rusing prebuilt boot.img from IMAGES...\rputting script in bin/install-recovery.sh\rLoading radio filesmap...\rLoading radio target...\rwarning radio-update: no radio images in input target_files\rdone.\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ date\rTue Jun 1 11:22:27 CST 2021\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ls -alh ota_update.zip -rw-rw-r-- 1 android_SC20 android_SC20 748M Jun 1 11:19 ota_update.zip\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2021-06-01","objectID":"https://daizelai.github.io/posts/sc60/5.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85/:4:0","tags":["原创","SC60","制作安装包","OTA版本包","OTA升级包"],"title":"制作OTA升级包","uri":"https://daizelai.github.io/posts/sc60/5.-%E5%88%B6%E4%BD%9Cota%E5%8D%87%E7%BA%A7%E5%8C%85/"},{"categories":["原创","excel"],"content":"设置excel单元格下拉框过程记录","date":"2021-05-31","objectID":"https://daizelai.github.io/posts/windows/excel/","tags":["原创","excel","excel下拉框"],"title":"设置excel单元格下拉框","uri":"https://daizelai.github.io/posts/windows/excel/"},{"categories":["原创","excel"],"content":"设置excel单元格下拉框 ","date":"2021-05-31","objectID":"https://daizelai.github.io/posts/windows/excel/:0:0","tags":["原创","excel","excel下拉框"],"title":"设置excel单元格下拉框","uri":"https://daizelai.github.io/posts/windows/excel/"},{"categories":["原创","excel"],"content":"一、描述 by daizelai on 2021/05/31 09:36 在excel中设置单元格下拉框。 ","date":"2021-05-31","objectID":"https://daizelai.github.io/posts/windows/excel/:1:0","tags":["原创","excel","excel下拉框"],"title":"设置excel单元格下拉框","uri":"https://daizelai.github.io/posts/windows/excel/"},{"categories":["原创","excel"],"content":"二、设置excel单元格下拉框文字选择 选中要设置下拉框的单元格，点击数据–\u003e有效性。 设置标签页面配置下拉选项，允许处设置“序列”，来源设置下拉选项为“通过,不通过”。 ","date":"2021-05-31","objectID":"https://daizelai.github.io/posts/windows/excel/:2:0","tags":["原创","excel","excel下拉框"],"title":"设置excel单元格下拉框","uri":"https://daizelai.github.io/posts/windows/excel/"},{"categories":["原创","excel"],"content":"三、设置excel单元格下拉框文字颜色 选中要设置下拉框的单元格，设置下拉选项的颜色，点击开始–\u003e条件格式–\u003e突出显示单元格规则–\u003e文本包含。 文版包含中有设置字体颜色，填充颜色，边框颜色。 ","date":"2021-05-31","objectID":"https://daizelai.github.io/posts/windows/excel/:3:0","tags":["原创","excel","excel下拉框"],"title":"设置excel单元格下拉框","uri":"https://daizelai.github.io/posts/windows/excel/"},{"categories":["原创","SC60","android","按键"],"content":"在android中添加实体按键","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"20210518_1310SC60添加实体按键 ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:0:0","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"一、描述 添加按键功能开发。 android系统增加按键功能。 ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:1:0","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"二、首次添加一个PTT按键 ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:2:0","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"2.1.文件列表 实现（由下往上-\u003e(kernel-\u003eframeworks)） 先列举下该功能实现所涉及到的文件 device/qcom/msm8953_64/gpio-keys.kl frameworks/base/core/java/android/view/KeyEvent.java frameworks/base/core/res/res/values/attrs.xml frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java frameworks/native/include/android/keycodes.h b/include/android/keycodes.h frameworks/native/include/input/InputEventLabels.h kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-mtp.dtsi kernel/msm-3.18/include/uapi/linux/input.h ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:2:1","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"2.2.kernel注册gpio_key上报的key_value 2.2.1配置一个PTT按钮 找到平台对应内核dtsi配置文件，我这里的路径如下。 路径：\\sc60_android_7.1.2_qcom_sz14\\kernel\\msm-3.18\\arch\\arm\\boot\\dts\\qcom\\msm8953-mtp.dtsi 在文件中的gpio_keys里面增加如下代码。 ptt_button {\rlabel = \"ptt_button\";\rgpios = \u003c\u0026tlmm 96 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c603\u003e;\rdebounce-interval = \u003c15\u003e;\r}; 2.2.2.新增key value 路径：\\sc60_android_7.1.2_qcom_sz14\\kernel\\msm-3.18\\include\\uapi\\linux\\input.h #define KEY_CUSTOM_PTT 603 ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:2:2","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"2.3.frameworks native层转换kernel上报的key value值 路径：sc60_android_7.1.2_qcom_sz14\\frameworks\\native\\include\\android\\keycodes.h 在枚举中增加 enum { ...... AKEYCODE_PTT = 603 } 路径：sc60_android_7.1.2_qcom_sz14\\frameworks\\native\\include\\input\\InputEventLabels.h 在static const InputEventLabel KEYCODES[] = {中增加 static const InputEventLabel KEYCODES[] = { ...... DEFINE_KEYCODE(PTT), { NULL, 0 } } 完成这两步后，驱动上报的key value值603经过frameworks native层的处理到frameworks java层就会是我们在keyevent中得到的值了 ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:2:3","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"2.4.frameworks java层 配置keyevent 值，并且修改gpio_keys.kl映射文件 路径：frameworks\\base\\core\\res\\res\\values\\attrs.xml 在\u003cattr name=\"keycode\"\u003e里面添加 \u003cattr name=\"keycode\"\u003e ...... \u003cenum name=\"KEYCODE_KEYCODE_PTT\" value=\"603\" /\u003e \u003c/attr\u003e 路径：sc60_android_7.1.2_qcom_sz14\\frameworks\\base\\core\\java\\android\\view\\KeyEvent.java 增加如下代码： [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff frameworks/base/core/java/android/view/KeyEvent.java diff --git a/frameworks/base/core/java/android/view/KeyEvent.java b/frameworks/base/core/java/android/view/KeyEvent.java index b73acda..049cb3c 100644 --- a/frameworks/base/core/java/android/view/KeyEvent.java +++ b/frameworks/base/core/java/android/view/KeyEvent.java @@ -804,6 +804,8 @@ public class KeyEvent extends InputEvent implements Parcelable { public static final int KEYCODE_SYSTEM_NAVIGATION_LEFT = 282; /** Key code constant: Consumed by the system for navigation right */ public static final int KEYCODE_SYSTEM_NAVIGATION_RIGHT = 283; + + public static final int KEYCODE_KEYCODE_PTT = 603; private static final int LAST_KEYCODE = KEYCODE_SYSTEM_NAVIGATION_RIGHT; @@ -1857,6 +1859,7 @@ public class KeyEvent extends InputEvent implements Parcelable { case KeyEvent.KEYCODE_SYSTEM_NAVIGATION_DOWN: case KeyEvent.KEYCODE_SYSTEM_NAVIGATION_LEFT: case KeyEvent.KEYCODE_SYSTEM_NAVIGATION_RIGHT: + case KeyEvent.KEYCODE_KEYCODE_PTT: return true; } @@ -1873,6 +1876,7 @@ public class KeyEvent extends InputEvent implements Parcelable { case KeyEvent.KEYCODE_STEM_1: case KeyEvent.KEYCODE_STEM_2: case KeyEvent.KEYCODE_STEM_3: + case KeyEvent.KEYCODE_KEYCODE_PTT: return true; } return false; [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ 路径：device/qcom/msm8953_64/gpio-keys.kl 添加PTT定义。 # Copyright (c) 2014, The Linux Foundation. All rights reserved.\r#\r# Redistribution and use in source and binary forms, with or without\r# modification, are permitted provided that the following conditions are\r# met:\r# * Redistributions of source code must retain the above copyright\r# notice, this list of conditions and the following disclaimer.\r# * Redistributions in binary form must reproduce the above\r# copyright notice, this list of conditions and the following\r# disclaimer in the documentation and/or other materials provided\r# with the distribution.\r# * Neither the name of The Linux Foundation nor the names of its\r# contributors may be used to endorse or promote products derived\r# from this software without specific prior written permission.\r#\r# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY EXPRESS OR IMPLIED\r# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT\r# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS\r# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\r# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\r# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\r# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\rkey 115 VOLUME_UP\rkey 114 VOLUME_DOWN\rkey 102 HOME\rkey 528 FOCUS\rkey 766 CAMERA\rkey 603 PTT 确定key在kernel注册的是什么节点，通过cat proc/bus/input/devices命令查看。 D:\\soft\\adb\u003eadb shell msm8953_64:/ $ cat proc/bus/input/devices cat proc/bus/input/devices I: Bus=0000 Vendor=0000 Product=0000 Version=0000 N: Name=\"qpnp_pon\" P: Phys=qpnp_pon/input0 S: Sysfs=/devices/virtual/input/input0 U: Uniq= H: Handlers=event0 B: PROP=40 B: EV=3 B: KEY=14000000000000 0 I: Bus=0018 Vendor=0000 Product=0000 Version=0000 N: Name=\"fts_ts\" P: Phys= S: Sysfs=/devices/soc/78b7000.i2c/i2c-3/3-0038/input/input1 U: Uniq= H: Handlers=mdss_fb kgsl event1 B: PROP=2 B: EV=b B: KEY=400 0 0 100040000800 0 0 B: ABS=661800000000000 I: Bus=0019 Vendor=0001 Product=0001 Version=0100 N: Name=\"gpio-keys\" P","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:2:4","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"2.6.frameworks java层根据keyevent事件处理新增按键事件 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java\rdiff --git a/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java b/frameworks/base/services/core/java/com/\rindex 82e739b..a6b3f95 100755\r--- a/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java\r+++ b/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java\r@@ -5784,6 +5784,12 @@ public class PhoneWindowManager implements WindowManagerPolicy {\r+ \" policyFlags=\" + Integer.toHexString(policyFlags));\r}\r+ Intent intentKey = new Intent(\"com.quectel.key.intercept\");\r+ Bundle bundle = new Bundle();\r+ bundle.putParcelable(\"keyevent\",event);\r+ intentKey.putExtras(bundle);\r+ mContext.sendBroadcast(intentKey);\r+\r// Basic policy based on interactive state.\rint result;\rboolean isWakeKey = (policyFlags \u0026 WindowManagerPolicy.FLAG_WAKE) != 0\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ 2.6.1.何时需要执行make update-api命令 添加系统API或者修改@hide的API后，需要执行 make update-api，然后再make 修改公共api后，需要 make update-api 2.6.1.1.在修改完系统Api或部分公共Api后（常见于修改Intent.java、KeyEvent.java等等），执行源码编译时会有如下提示 see build/core/apicheck_msg_current.txt\r******************************\rYou have tried to change the API from what has been previously approved.\rTo make these errors go away, you have two choices:\r1) You can add \"@hide\" javadoc comments to the methods, etc. listed in the\rerrors above.\r2) You can update current.txt by executing the following command:\rmake update-api\rTo submit the revised current.txt to the main Android repository,\ryou will need approval.\r****************************** 2.6.1.2.错误信息表明是由于API错误导致 谷歌对于所有的类和API，分为开方和非开放两种，而开放的类和API，可以通过“Javadoc标签”与源码同步生成“程序的开发文档”；当我们修改或者添加一个新的API时，我们有两种方案可以避免出现上述错误. 其一是将该接口加上 非公开的标签：/*{@hide}/； 再者可以在修改后执行：make update-api(公开)，将修改内容与API的doc文件更新到一致。 2.6.1.3.解决办法： 执行： make update -api ; 修改后相应API文件后，在base库下面会产生“.current.txt”文件的差异，提交时将该差异一并提交审核即可。 1\u003e执行： make update -api ; 2\u003e修改后相应API文件后，在base库下面会产生“.current.txt”文件的差异，提交时将该差异一并提交审核即可。 make update-api ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:2:5","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"2.7.修改 本次我是手动修改的，尴尬。 frameworks/base/api/current.txt ...... field public static final int KEYCODE_SYSTEM_NAVIGATION_UP = 280; // 0x118 field public static final int KEYCODE_KEYCODE_PTT = 603; ...... frameworks/base/api/system-current.txt field public static final int KEYCODE_SYSTEM_NAVIGATION_RIGHT = 283; // 0x11b field public static final int KEYCODE_SYSTEM_NAVIGATION_UP = 280; // 0x118 field public static final int KEYCODE_KEYCODE_PTT = 603; frameworks/base/api/test-current.txt field public static final int KEYCODE_SYSTEM_NAVIGATION_RIGHT = 283; // 0x11b field public static final int KEYCODE_SYSTEM_NAVIGATION_UP = 280; // 0x118 field public static final int KEYCODE_KEYCODE_PTT = 603; ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:2:6","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"2.8.测试效果 使用adb进去之后，按住面板上面的PTT按钮可以看到是有反应了，十六进制025b就是十进制的603. msm8953_64:/ $ getevent\rgetevent\radd device 1: /dev/input/event4\rname: \"msm8953-snd-card-mtp Button Jack\"\radd device 2: /dev/input/event3\rname: \"msm8953-snd-card-mtp Headset Jack\"\radd device 3: /dev/input/event0\rname: \"qpnp_pon\"\rcould not get driver version for /dev/input/mice, Not a typewriter\radd device 4: /dev/input/event2\rname: \"gpio-keys\"\radd device 5: /dev/input/event1\rname: \"fts_ts\"\r/dev/input/event2: 0001 025b 00000001\r/dev/input/event2: 0000 0000 00000000\r/dev/input/event2: 0001 025b 00000000\r/dev/input/event2: 0000 0000 00000000 注意看这里的/dev/input/event2对应的是gpio-keys。 ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:2:7","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"2.9.添加PTT按键的代码记录 改动的文件列表如下所示： [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ date\rTue May 18 13:44:38 CST 2021\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git status\r# On branch develop\r# Changes not staged for commit:\r# (use \"git add/rm \u003cfile\u003e...\" to update what will be committed)\r# (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory)\r#\r# modified: device/qcom/msm8953_64/gpio-keys.kl\r# modified: frameworks/base/api/current.txt\r# modified: frameworks/base/api/system-current.txt\r# modified: frameworks/base/api/test-current.txt\r# modified: frameworks/base/core/java/android/view/KeyEvent.java\r# modified: frameworks/base/core/res/res/values/attrs.xml\r# modified: frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java\r# modified: frameworks/native/include/android/keycodes.h\r# modified: frameworks/native/include/input/InputEventLabels.h\r# modified: hardware/qcom/audio/configs/msm8953/mixer_paths_mtp.xml\r# modified: kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-mtp.dtsi\r# modified: kernel/msm-3.18/include/uapi/linux/input.h 具体的改动如下所示： [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff\rdiff --git a/device/qcom/msm8953_64/gpio-keys.kl b/device/qcom/msm8953_64/gpio-keys.kl\rindex 079fcd2..c952cc4 100755\r--- a/device/qcom/msm8953_64/gpio-keys.kl\r+++ b/device/qcom/msm8953_64/gpio-keys.kl\r@@ -30,3 +30,4 @@ key 114 VOLUME_DOWN\rkey 102 HOME\rkey 528 FOCUS\rkey 766 CAMERA\r+key 603 PTT\rdiff --git a/frameworks/base/api/current.txt b/frameworks/base/api/current.txt\rindex 8655d89..6d89cef 100644\r--- a/frameworks/base/api/current.txt\r+++ b/frameworks/base/api/current.txt\r@@ -41593,6 +41593,7 @@ package android.view {\rfield public static final int KEYCODE_SYSTEM_NAVIGATION_LEFT = 282; // 0x11a\rfield public static final int KEYCODE_SYSTEM_NAVIGATION_RIGHT = 283; // 0x11b\rfield public static final int KEYCODE_SYSTEM_NAVIGATION_UP = 280; // 0x118\r+ field public static final int KEYCODE_KEYCODE_PTT = 603;\rfield public static final int KEYCODE_T = 48; // 0x30\rfield public static final int KEYCODE_TAB = 61; // 0x3d\rfield public static final int KEYCODE_TV = 170; // 0xaa\rdiff --git a/frameworks/base/api/system-current.txt b/frameworks/base/api/system-current.txt\rindex 6b6f7e9..7ed5c27 100644\r--- a/frameworks/base/api/system-current.txt\r+++ b/frameworks/base/api/system-current.txt\r@@ -44771,6 +44771,7 @@ package android.view {\rfield public static final int KEYCODE_SYSTEM_NAVIGATION_LEFT = 282; // 0x11a\rfield public static final int KEYCODE_SYSTEM_NAVIGATION_RIGHT = 283; // 0x11b\rfield public static final int KEYCODE_SYSTEM_NAVIGATION_UP = 280; // 0x118\r+ field public static final int KEYCODE_KEYCODE_PTT = 603;\rfield public static final int KEYCODE_T = 48; // 0x30\rfield public static final int KEYCODE_TAB = 61; // 0x3d\rfield public static final int KEYCODE_TV = 170; // 0xaa\rdiff --git a/frameworks/base/api/test-current.txt b/frameworks/base/api/test-current.txt\rindex fcbd1b5..ef17487 100644\r--- a/frameworks/base/api/test-current.txt\r+++ b/frameworks/base/api/test-current.txt\r@@ -41679,6 +41679,7 @@ package android.view {\rfield public static final int KEYCODE_SYSTEM_NAVIGATION_LEFT = 282; // 0x11a\rfield public static final int KEYCODE_SYSTEM_NAVIGATION_RIGHT = 283; // 0x11b\rfield public static final int KEYCODE_SYSTEM_NAVIGATION_UP = 280; // 0x118\r+ field public static final int KEYCODE_KEYCODE_PTT = 603;\rfield public static final int KEYCODE_T = 48; // 0x30\rfield public static final int KEYCODE_TAB = 61; // 0x3d\rfield public static final int KEYCODE_TV = 170; // 0xaa\rdiff --git a/frameworks/base/core/java/android/view/KeyEvent.java b/frameworks/base/core/java/android/view/KeyEvent.java\rindex b73acda..2623c3e 100644\r--- a/frameworks/base/core/java/android/view/KeyEvent.java\r+++ b/frameworks/base/core/java/android/view/KeyEvent.java\r@@ -804,8 +804,10 @@ public class KeyEvent extends InputEvent implements Parcelable {\rpublic static final int KEYCODE_SYSTEM_NAVIGATION_LEFT = 282;\r/*","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:2:8","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"三、第二次添加剩下实体按键 by daizelai on 2021/05/20 10:25 ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:3:0","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"3.1.测试gpio可用状态 by daizelai on 2021/05/24 13:37 在开发按键功能之前先确定所有的gpio是可用的，先使用双头usb线连接笔记本和SC60设备，然后通过如下命令进入设备命令行。 # adb root\r# adb remount\r# adb shell 通过命令来查看是否可控制gpio电平的高低切换状态。 # cd /sys/class/gpio\r# echo 33 \u003e export\r# ls\r# cd gpio33\r# cat direction\r# cat value D:\\soft\\adb\u003eadb shell\rmsm8953_64:/sys/class/gpio # ls\rls\rexport gpiochip1022 gpiochip667 gpiochip795 gpiochip923\rgpio36 gpiochip571 gpiochip699 gpiochip827 gpiochip955\rgpiochip0 gpiochip603 gpiochip731 gpiochip859 gpiochip987\rgpiochip1019 gpiochip635 gpiochip763 gpiochip891 unexport\rmsm8953_64:/sys/class/gpio # echo 33 \u003e export\recho 33 \u003e export\rmsm8953_64:/sys/class/gpio # ls\rls\rexport gpiochip0 gpiochip571 gpiochip667 gpiochip763 gpiochip859 gpiochip955\rgpio33 gpiochip1019 gpiochip603 gpiochip699 gpiochip795 gpiochip891 gpiochip987\rgpio36 gpiochip1022 gpiochip635 gpiochip731 gpiochip827 gpiochip923 unexport\rmsm8953_64:/sys/class/gpio #\rmsm8953_64:/sys/class/gpio # cat gpio33/direction\rcat gpio33/direction\rin\rmsm8953_64:/sys/class/gpio #\rmsm8953_64:/sys/class/gpio # cat gpio33/value\rcat gpio33/value\r1\rmsm8953_64:/sys/class/gpio # cd gpio33\rcd gpio33\rmsm8953_64:/sys/class/gpio/gpio33 # echo 0 \u003e value\recho 0 \u003e value\r1|msm8953_64:/sys/class/gpio/gpio33 # cat value\rcat value\r1 分别查看按下按键和松开按键时gpio33的value值。 msm8953_64:/sys/class/gpio # cat gpio33/value\rcat gpio33/value\r1 如果可以切换比如未按下是gpio33/value是1，按下去时gpio33/value是0，说明该gpio是可以控制的，可以正常使用。 本次gpio33是无法控制的，是因为被SC60的副屏占用了，释放掉副屏对gpio33的配置即可。 路径1：kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-nopmi-panel-camera.dtsi #include \u003cdt-bindings/gpio/gpio.h\u003e\r#include \u003cdt-bindings/clock/msm-clocks-8953.h\u003e\r#include \"msm8953-mdss-panels.dtsi\"\r\u0026tlmm{\r//rid add for pwm\r// gpio_clk {\r// gpio_clk_default: gpio_clk_default {\r// mux {\r// pins = \"gpio33\";\r// function = \"gp0_clk_a\";\r// };\r// config {\r// pins = \"gpio33\";\r// drive-strength = \u003c8\u003e;\r// bias-pull-up;\r// };\r// };\r//\r// gpio_clk_sleep: gpio_clk_sleep {\r// mux {\r// pins = \"gpio33\";\r// function = \"gp0_clk_a\";\r// };\r// config {\r// pins = \"gpio33\";\r// drive-strength = \u003c2\u003e;\r// bias-pull-down;\r// };\r// };\r// };\r};\r\u0026soc {\r//barnett:add dsi1 bridge for dual mipi dsi\rqcom,dsi1_bridge {\rcompatible = \"qcom,dsi1_bridge\";\rinstance_id = \u003c0\u003e;\rmdss-dsi-bl-pmic-pwm-frequency = \u003c100\u003e;\rmdss-dsi-bl-pmic-bank-select = \u003c0\u003e;\rmdss-dsi-bl-max-level = \u003c4095\u003e;\r};\r////barnett:add for pwm\r// qcom,gpioclk {\r// compatible = \"qcom,gpio_clk\";\r// clocks = \u003c\u0026clock_gcc clk_gcc_camss_gp0_clk\u003e;\r// clock-names = \"gpio_clk\";\r// pinctrl-names = \"clk_default\", \"clk_sleep\";\r// pinctrl-0 = \u003c\u0026gpio_clk_default\u003e;\r// pinctrl-1 = \u003c\u0026gpio_clk_sleep\u003e;\r// };\r};\r...... 路径2：kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-pinctrl.dtsi ......\r////barnett add for pwm\r// gpio_clk {\r// gpio_clk_default: gpio_clk_default {\r// mux {\r// pins = \"gpio33\";\r// function = \"gp0_clk_a\";\r// };\r// config {\r// pins = \"gpio33\";\r// drive-strength = \u003c8\u003e;\r// bias-pull-up;\r// };\r// };\r// gpio_clk_sleep: gpio_clk_sleep {\r// mux {\r// pins = \"gpio33\";\r// function = \"gp0_clk_a\";\r// };\r// config {\r// pins = \"gpio33\";\r// drive-strength = \u003c2\u003e;\r// bias-pull-down;\r// };\r// };\r// };\r...... ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:3:1","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"3.2.kernel注册gpio_key上报的key_value 配置内核dtsi文件 找到平台对应内核dtsi配置文件，我这里的路径如下。 路径：\\sc60_android_7.1.2_qcom_sz14\\kernel\\msm-3.18\\arch\\arm\\boot\\dts\\qcom\\msm8953-mtp.dtsi 在文件中的gpio_keys里面增加如下代码。 // add key button by daizelai\rsos_button {\rlabel = \"sos_button\";\rgpios = \u003c\u0026tlmm 90 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c605\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rcall_button {\rlabel = \"call_button\";\rgpios = \u003c\u0026tlmm 36 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c601\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rregister_button {\rlabel = \"register_button\";\rgpios = \u003c\u0026tlmm 45 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c602\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rcancel_button {\rlabel = \"cancel_button\";\rgpios = \u003c\u0026tlmm 43 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c604\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rrecord_button {\rlabel = \"record_button\";\rgpios = \u003c\u0026tlmm 33 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c600\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rptt_button {\rlabel = \"ptt_button\";\rgpios = \u003c\u0026tlmm 96 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c603\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rgbpanicbtn_button {\rlabel = \"gbpanicbtn_button\";\rgpios = \u003c\u0026tlmm 3 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c607\u003e;\rdebounce-interval = \u003c15\u003e;\r}; 效果如下 \u0026soc {\rgpio-clock {\rcompatible = \"qcom,fct_gpio_clk\";\rpwm-gpio = \u003c36\u003e;\r};\rgpio_keys {\rcompatible = \"gpio-keys\";\rinput-name = \"gpio-keys\";\rpinctrl-names = \"tlmm_gpio_key_active\",\"tlmm_gpio_key_suspend\";\rpinctrl-0 = \u003c\u0026gpio_key_active\u003e;\rpinctrl-1 = \u003c\u0026gpio_key_suspend\u003e;\rcamera_snapshot {\rlabel = \"camera_snapshot\";\rgpios = \u003c\u0026tlmm 86 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c0x2fe\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rvol_up {\rlabel = \"volume_up\";\rgpios = \u003c\u0026tlmm 85 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c115\u003e;\rdebounce-interval = \u003c15\u003e;\r};\r// add key button by daizelai\rsos_button {\rlabel = \"sos_button\";\rgpios = \u003c\u0026tlmm 90 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c605\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rcall_button {\rlabel = \"call_button\";\rgpios = \u003c\u0026tlmm 36 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c601\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rregister_button {\rlabel = \"register_button\";\rgpios = \u003c\u0026tlmm 45 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c602\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rcancel_button {\rlabel = \"cancel_button\";\rgpios = \u003c\u0026tlmm 43 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c604\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rrecord_button {\rlabel = \"record_button\";\rgpios = \u003c\u0026tlmm 33 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c600\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rptt_button {\rlabel = \"ptt_button\";\rgpios = \u003c\u0026tlmm 96 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c603\u003e;\rdebounce-interval = \u003c15\u003e;\r};\rgbpanicbtn_button {\rlabel = \"gbpanicbtn_button\";\rgpios = \u003c\u0026tlmm 3 0x1\u003e;\rlinux,input-type = \u003c1\u003e;\rlinux,code = \u003c607\u003e;\rdebounce-interval = \u003c15\u003e;\r};\r};\r/*barnett-\u003e rm improvetouch\rhbtp {\rcompatible = \"qcom,hbtp-input\";\rvcc_ana-supply = \u003c\u0026pm8953_l10\u003e;\rvcc_dig-supply = \u003c\u0026pm8953_l5\u003e;\rqcom,afe-load = \u003c50000\u003e;\rqcom,afe-vtg-min = \u003c2850000\u003e;\rqcom,afe-vtg-max = \u003c2850000\u003e;\rqcom,dig-load = \u003c15000\u003e;\rqcom,dig-vtg-min = \u003c1800000\u003e;\rqcom,dig-vtg-max = \u003c1800000\u003e;\r};\r-\u003ebarnett*/\r}; ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:3:2","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"3.3.新增key value 路径：\\sc60_android_7.1.2_qcom_sz14\\kernel\\msm-3.18\\include\\uapi\\linux\\input.h #define KEY_MICMUTE 248 /* Mute / unmute the microphone */ #define KEY_CUSTOM_METRORECORD 600 #define KEY_CUSTOM_METROCALL 601 #define KEY_CUSTOM_REGISTER 602 #define KEY_CUSTOM_PTT 603 #define KEY_CUSTOM_CANCEL 604 #define KEY_CUSTOM_SOS 605 #define KEY_CUSTOM_GBPANICBTN 607 ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:3:3","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"3.4.frameworks native层转换kernel上报的key value值 在枚举中增加 路径：sc60_android_7.1.2_qcom_sz14/frameworks/native/include/android/keycodes.h AKEYCODE_METRORECORD = 600, AKEYCODE_METROCALL = 601, AKEYCODE_REGISTER = 602, AKEYCODE_PTT = 603, AKEYCODE_CANCEL = 604, AKEYCODE_SOS = 605, AKEYCODE_GBPANICBTN = 607 效果如下： enum { ...... AKEYCODE_METRORECORD = 600, AKEYCODE_METROCALL = 601, AKEYCODE_REGISTER = 602, AKEYCODE_PTT = 603, AKEYCODE_CANCEL = 604, AKEYCODE_SOS = 605, AKEYCODE_GBPANICBTN = 607 // NOTE: If you add a new keycode here you must also add it to several other files. // Refer to frameworks/base/core/java/android/view/KeyEvent.java for the full list. }; #ifdef __cplusplus } #endif #endif // _ANDROID_KEYCODES_H /** @} */ DEFINE_KEYCODE 路径：sc60_android_7.1.2_qcom_sz14/frameworks/native/include/input/InputEventLabels.h 在static const InputEventLabel KEYCODES[] = {中增加 static const InputEventLabel KEYCODES[] = {\r......\rDEFINE_KEYCODE(METRORECORD),\rDEFINE_KEYCODE(METROCALL),\rDEFINE_KEYCODE(REGISTER),\rDEFINE_KEYCODE(PTT),\rDEFINE_KEYCODE(CANCEL),\rDEFINE_KEYCODE(SOS),\rDEFINE_KEYCODE(GBPANICBTN),\r{ NULL, 0 }\r} 完成这两步后，驱动上报的key value值603经过frameworks native层的处理到frameworks java层就会是我们在keyevent中得到的值了 ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:3:4","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"3.5.frameworks java层配置keyevent值，并且修改gpio_keys.kl映射文件 路径：frameworks/base/core/res/res/values/attrs.xml \u003cattr name=\"keycode\"\u003e \u003cenum name=\"KEYCODE_SYSTEM_NAVIGATION_RIGHT\" value=\"283\" /\u003e \u003cenum name=\"KEYCODE_METRORECORD\" value=\"600\" /\u003e \u003cenum name=\"KEYCODE_METROCALL\" value=\"601\" /\u003e \u003cenum name=\"KEYCODE_REGISTER\" value=\"602\" /\u003e \u003cenum name=\"KEYCODE_KEYCODE_PTT\" value=\"603\" /\u003e \u003cenum name=\"KEYCODE_CANCEL\" value=\"604\" /\u003e \u003cenum name=\"KEYCODE_SOS\" value=\"605\" /\u003e \u003c/attr\u003e 路径：frameworks/base/core/java/android/view/KeyEvent.java /** Key code constant: Consumed by the system for navigation right */ public static final int KEYCODE_SYSTEM_NAVIGATION_RIGHT = 283; /** Key code constant: PLAY */ public static final int KEYCODE_METRORECORD = 600; /** Key code constant: CALL*/ public static final int KEYCODE_METROCALL = 601; /** Key code constant: REGISTER*/ public static final int KEYCODE_REGISTER = 602; /** Key code constant: PTT*/ public static final int KEYCODE_KEYCODE_PTT = 603; /** Key code constant: CANCEL*/ public static final int KEYCODE_CANCEL = 604; /** Key code constant: SOS */ public static final int KEYCODE_SOS = 605; /** Key code constant: GBPANICBTN*/ public static final int KEYCODE_GBPANICBTN = 607; private static final int LAST_KEYCODE = KEYCODE_GBPANICBTN; ...... /** Is this a system key? System keys can not be used for menu shortcuts. * @hide */ public static final boolean isSystemKey(int keyCode) { switch (keyCode) { case KeyEvent.KEYCODE_MENU: case KeyEvent.KEYCODE_SOFT_RIGHT: case KeyEvent.KEYCODE_HOME: case KeyEvent.KEYCODE_BACK: case KeyEvent.KEYCODE_CALL: case KeyEvent.KEYCODE_ENDCALL: case KeyEvent.KEYCODE_VOLUME_UP: case KeyEvent.KEYCODE_VOLUME_DOWN: case KeyEvent.KEYCODE_VOLUME_MUTE: case KeyEvent.KEYCODE_MUTE: case KeyEvent.KEYCODE_POWER: case KeyEvent.KEYCODE_HEADSETHOOK: case KeyEvent.KEYCODE_MEDIA_PLAY: case KeyEvent.KEYCODE_MEDIA_PAUSE: case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE: case KeyEvent.KEYCODE_MEDIA_STOP: case KeyEvent.KEYCODE_MEDIA_NEXT: case KeyEvent.KEYCODE_MEDIA_PREVIOUS: case KeyEvent.KEYCODE_MEDIA_REWIND: case KeyEvent.KEYCODE_MEDIA_RECORD: case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD: case KeyEvent.KEYCODE_CAMERA: case KeyEvent.KEYCODE_FOCUS: case KeyEvent.KEYCODE_SEARCH: case KeyEvent.KEYCODE_BRIGHTNESS_DOWN: case KeyEvent.KEYCODE_BRIGHTNESS_UP: case KeyEvent.KEYCODE_MEDIA_AUDIO_TRACK: case KeyEvent.KEYCODE_SYSTEM_NAVIGATION_UP: case KeyEvent.KEYCODE_SYSTEM_NAVIGATION_DOWN: case KeyEvent.KEYCODE_SYSTEM_NAVIGATION_LEFT: case KeyEvent.KEYCODE_SYSTEM_NAVIGATION_RIGHT: case KeyEvent.KEYCODE_METRORECORD: case KeyEvent.KEYCODE_METROCALL: case KeyEvent.KEYCODE_REGISTER: case KeyEvent.KEYCODE_KEYCODE_PTT: case KeyEvent.KEYCODE_CANCEL: case KeyEvent.KEYCODE_SOS: case KeyEvent.KEYCODE_GBPANICBTN: return true; } return false; } /** @hide */ public static final boolean isWakeKey(int keyCode) { switch (keyCode) { case KeyEvent.KEYCODE_BACK: case KeyEvent.KEYCODE_MENU: case KeyEvent.KEYCODE_WAKEUP: case KeyEvent.KEYCODE_PAIRING: case KeyEvent.KEYCODE_STEM_1: case KeyEvent.KEYCODE_STEM_2: case KeyEvent.KEYCODE_STEM_3: case KeyEvent.KEYCODE_METRORECORD: case KeyEvent.KEYCODE_METROCALL: case KeyEvent.KEYCODE_REGISTER: case KeyEvent.KEYCODE_KEYCODE_PTT: case KeyEvent.KEYCODE_CANCEL: case KeyEvent.KEYCODE_SOS: case KeyEvent.KEYCODE_GBPANICBTN: return true; } return false; } 路径：device/qcom/msm8953_64/gpio-keys.kl 添加PTT定义。 .....\rkey 600 METRORECORD\rkey 601 METROCALL\rkey 602 REGISTER\rkey 603 PTT\rkey 604 CANCEL\rkey 605 SOS\rkey 607 GBPANICBTN 确定key在kernel注册的是什么节点，通过cat proc/bus/input/devices命令查看。 D:\\soft\\adb\u003eadb shell\rmsm8953_64:/ $ cat proc/bus/input/devices\rcat proc/bus/input/devices\rI: Bus=0000 Vendor=0000 Product=0000 Version=0000\rN: Name=\"qpnp_pon\"\rP: Phys=qpnp_pon/input0\rS: Sysfs=/devices/virtual/input/input0\rU: Uniq=\rH: Handlers=event0\rB: PROP=40\rB: EV=3\rB: KEY=14000000000000 0\rI: Bus=0018 Vendor=0000 Product=0000 Version=0000\rN: Name=\"fts_ts\"\rP: Phys=\rS: Sysfs=/devices/soc/78b7000.i2c/i2c-3/3-0038/input/input1\rU: Uniq=\rH: Han","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:3:5","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"3.6.frameworks java层根据keyevent事件处理新增按键事件 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java\rdiff --git a/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java b/frameworks/base/services/core/java/com/\rindex 82e739b..a6b3f95 100755\r--- a/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java\r+++ b/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java\r@@ -5784,6 +5784,12 @@ public class PhoneWindowManager implements WindowManagerPolicy {\r+ \" policyFlags=\" + Integer.toHexString(policyFlags));\r}\r+ Intent intentKey = new Intent(\"com.quectel.key.intercept\");\r+ Bundle bundle = new Bundle();\r+ bundle.putParcelable(\"keyevent\",event);\r+ intentKey.putExtras(bundle);\r+ mContext.sendBroadcast(intentKey);\r+\r// Basic policy based on interactive state.\rint result;\rboolean isWakeKey = (policyFlags \u0026 WindowManagerPolicy.FLAG_WAKE) != 0\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:3:6","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"3.7.执行make update-api命令 3.7.1.执行时机 何时需要执行make update-api命令 添加系统API或者修改@hide的API后，需要执行 make update-api，然后再make 修改公共api后，需要 make update-api 3.7.2.在修改完系统Api或部分公共Api后（常见于修改Intent.java、KeyEvent.java等等），执行源码编译时会有如下提示 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ make clean \u0026\u0026 make -j 20\r......\r[ 6% 4855/72724] Checking API: checktestapi-current\rFAILED: /bin/bash -c \"(( out/host/linux-x86/bin/apicheck -JXmx1024m -J\\\"classpath /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.252.b09-2.el7_8.x86_64/bin/../lib/tools.jar:out/host/linux-x86/framework/doclava.jar:out/host/linux-x86/framework/jsilver.jar\\\" -error 2 -error 3 -error 4 -error 5 -error 6 -error 7 -error 8 -error 9 -error 10 -error 11 -error 12 -error 13 -error 14 -error 15 -error 16 -error 17 -error 18 -error 19 -error 20 -error 21 -error 23 -error 24 -error 25 -error 26 -error 27 frameworks/base/api/test-current.txt out/target/common/obj/PACKAGING/test-api.txt frameworks/base/api/test-removed.txt out/target/common/obj/PACKAGING/test-removed.txt || ( cat build/core/apicheck_msg_current.txt ; exit 38 ) ) ) \u0026\u0026 (mkdir -p out/target/common/obj/PACKAGING/ ) \u0026\u0026 (touch out/target/common/obj/PACKAGING/checktestapi-current-timestamp )\"\rout/target/common/obj/PACKAGING/test-api.txt:41513: error 5: Added public field android.view.KeyEvent.KEYCODE_CANCEL\rout/target/common/obj/PACKAGING/test-api.txt:41563: error 5: Added public field android.view.KeyEvent.KEYCODE_GBPANICBTN\rout/target/common/obj/PACKAGING/test-api.txt:41605: error 5: Added public field android.view.KeyEvent.KEYCODE_METROCALL\rout/target/common/obj/PACKAGING/test-api.txt:41606: error 5: Added public field android.view.KeyEvent.KEYCODE_METROPLAY\rout/target/common/obj/PACKAGING/test-api.txt:41658: error 5: Added public field android.view.KeyEvent.KEYCODE_REGISTER\rout/target/common/obj/PACKAGING/test-api.txt:41673: error 5: Added public field android.view.KeyEvent.KEYCODE_SOS\r******************************\rYou have tried to change the API from what has been previously approved.\rTo make these errors go away, you have two choices:\r1) You can add \"@hide\" javadoc comments to the methods, etc. listed in the\rerrors above.\r2) You can update current.txt by executing the following command:\rmake update-api\rTo submit the revised current.txt to the main Android repository,\ryou will need approval.\r******************************\r[ 6% 4855/72724] host C++: libLLVMCore \u003c= external/llvm/lib/IR/Function.cpp\rninja: build stopped: subcommand failed.\rmake: *** [ninja_wrapper] Error 1\r#### make failed to build some targets (05:10 (mm:ss)) ####\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ 3.7.3.错误信息表明是由于API错误导致 谷歌对于所有的类和API，分为开方和非开放两种，而开放的类和API，可以通过“Javadoc标签”与源码同步生成“程序的开发文档”；当我们修改或者添加一个新的API时，我们有两种方案可以避免出现上述错误. 其一是将该接口加上 非公开的标签：/*{@hide}/； 再者可以在修改后执行：make update-api(公开)，将修改内容与API的doc文件更新到一致。 3.7.4.解决办法： 1\u003e执行： make update-api ; 2\u003e修改后相应API文件后，在base库下面会产生“.current.txt”文件的差异，提交时将该差异一并提交审核即可。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ make update-api\r......\r[ 99% 1908/1909] Copying current.txt\rCopying removed.txt\r[100% 1909/1909] Copying system-current.txt\rCopying system-removed.txt\r#### make completed successfully (09:08 (mm:ss)) ####\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ ","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:3:7","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"3.8.所有文件修改 注意修改的文件msm8953-nopmi-panel-camera.dtsi和msm8953-pinctrl.dtsi文件里有部分修改是去掉副屏使用gpio33的，不然回放按键[gpio33]无法生效 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-pinctrl.dtsi\rdiff --git a/kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-pinctrl.dtsi b/kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-pinctrl.dt\rindex bf36e0d..9dcb494 100755\r--- a/kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-pinctrl.dtsi\r+++ b/kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-pinctrl.dtsi\r@@ -1734,31 +1734,31 @@\r};\r};\r};\r-//barnett add for pwm\r- gpio_clk {\r- gpio_clk_default: gpio_clk_default {\r- mux {\r- pins = \"gpio33\";\r- function = \"gp0_clk_a\";\r- };\r- config {\r- pins = \"gpio33\";\r- drive-strength = \u003c8\u003e;\r- bias-pull-up;\r- };\r- };\r- gpio_clk_sleep: gpio_clk_sleep {\r- mux {\r- pins = \"gpio33\";\r- function = \"gp0_clk_a\";\r- };\r- config {\r- pins = \"gpio33\";\r- drive-strength = \u003c2\u003e;\r- bias-pull-down;\r- };\r- };\r- };\r+////barnett add for pwm\r+// gpio_clk {\r+// gpio_clk_default: gpio_clk_default {\r+// mux {\r+// pins = \"gpio33\";\r+// function = \"gp0_clk_a\";\r+// };\r+// config {\r+// pins = \"gpio33\";\r+// drive-strength = \u003c8\u003e;\r+// bias-pull-up;\r+// };\r+// };\r+// gpio_clk_sleep: gpio_clk_sleep {\r+// mux {\r+// pins = \"gpio33\";\r+// function = \"gp0_clk_a\";\r+// };\r+// config {\r+// pins = \"gpio33\";\r+// drive-strength = \u003c2\u003e;\r+// bias-pull-down;\r+// };\r+// };\r+// };\r/* add pingrp for touchscreen */\rpmx_ts_int_active {\rts_int_active: ts_int_active {\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-mtp.dtsi\rdiff --git a/kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-mtp.dtsi b/kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-mtp.dtsi\rindex f991509..57ffdc9 100755\r--- a/kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-mtp.dtsi\r+++ b/kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-mtp.dtsi\r@@ -296,6 +296,63 @@\rlinux,code = \u003c115\u003e;\rdebounce-interval = \u003c15\u003e;\r};\r+\r+ // add key button by daizelai\r+ sos_button {\r+ label = \"sos_button\";\r+ gpios = \u003c\u0026tlmm 90 0x1\u003e;\r+ linux,input-type = \u003c1\u003e;\r+ linux,code = \u003c605\u003e;\r+ debounce-interval = \u003c15\u003e;\r+ };\r+\r+ call_button {\r+ label = \"call_button\";\r+ gpios = \u003c\u0026tlmm 36 0x1\u003e;\r+ linux,input-type = \u003c1\u003e;\r+ linux,code = \u003c601\u003e;\r+ debounce-interval = \u003c15\u003e;\r+ };\r+\r+ register_button {\r+ label = \"register_button\";\r+ gpios = \u003c\u0026tlmm 45 0x1\u003e;\r+ linux,input-type = \u003c1\u003e;\r+ linux,code = \u003c602\u003e;\r+ debounce-interval = \u003c15\u003e;\r+ };\r+\r+ cancel_button {\r+ label = \"cancel_button\";\r+ gpios = \u003c\u0026tlmm 43 0x1\u003e;\r+ linux,input-type = \u003c1\u003e;\r+ linux,code = \u003c604\u003e;\r+ debounce-interval = \u003c15\u003e;\r+ };\r+\r+ record_button {\r+ label = \"record_button\";\r+ gpios = \u003c\u0026tlmm 33 0x1\u003e;\r+ linux,input-type = \u003c1\u003e;\r+ linux,code = \u003c600\u003e;\r+ debounce-interval = \u003c15\u003e;\r+ };\r+\r+ ptt_button {\r+ label = \"ptt_button\";\r+ gpios = \u003c\u0026tlmm 96 0x1\u003e;\r+ linux,input-type = \u003c1\u003e;\r+ linux,code = \u003c603\u003e;\r+ debounce-interval = \u003c15\u003e;\r+ };\r+\r+ gbpanicbtn_button {\r+ label = \"gbpanicbtn_button\";\r+ gpios = \u003c\u0026tlmm 3 0x1\u003e;\r+ linux,input-type = \u003c1\u003e;\r+ linux,code = \u003c607\u003e;\r+ debounce-interval = \u003c15\u003e;\r+ };\r};\r/*barnett-\u003e rm improvetouch\rhbtp {\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git diff kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-nopmi-panel-camera.dtsi\rdiff --git a/kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-nopmi-panel-camera.dtsi b/kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953\rindex ebccecc..0cabb7b 100755\r--- a/kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-nopmi-panel-camera.dtsi\r+++ b/kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-nopmi-panel-camera.dtsi\r@@ -18,31 +18,31 @@\r\u0026tlmm{\r//rid add for pwm\r- gpio_clk {\r- gpio_clk_default: gpio_clk_default {\r- mux {\r- pins = \"gpio33\";\r- function = \"gp0_clk_a\";\r- };\r- config {\r- pins = \"gpio33\";\r- drive-strength = \u003c8\u003e;\r- bias-pull-up;\r- };\r- };\r-\r- gpio_clk_sleep: gpio_clk_sleep {\r- mux {\r- pins = \"gpio33\";\r- function = \"gp0_clk_a\";\r- };\r- config {","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:3:8","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","SC60","android","按键"],"content":"3.9.代码提交 一开始是把所有修改的文件都add的，后面又撤销并分开提交的。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git add kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-mtp.dtsi kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-nopmi-panel-camera.dtsi kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-pinctrl.dtsi\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git add device/qcom/msm8953_64/gpio-keys.kl frameworks/base/api/current.txt frameworks/base/api/system-current.txt frameworks/base/api/test-current.txt frameworks/base/core/java/android/view/KeyEvent.java frameworks/base/core/res/res/values/attrs.xml frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java frameworks/native/include/android/keycodes.h frameworks/native/include/input/InputEventLabels.h kernel/msm-3.18/include/uapi/linux/input.h 一共add了这么多文件。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git status\r# On branch develop\r# Changes to be committed:\r# (use \"git reset HEAD \u003cfile\u003e...\" to unstage)\r#\r# modified: device/qcom/msm8953_64/gpio-keys.kl\r# modified: frameworks/base/api/current.txt\r# modified: frameworks/base/api/system-current.txt\r# modified: frameworks/base/api/test-current.txt\r# modified: frameworks/base/core/java/android/view/KeyEvent.java\r# modified: frameworks/base/core/res/res/values/attrs.xml\r# modified: frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java\r# modified: frameworks/native/include/android/keycodes.h\r# modified: frameworks/native/include/input/InputEventLabels.h\r# modified: kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-mtp.dtsi\r# modified: kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-nopmi-panel-camera.dtsi\r# modified: kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-pinctrl.dtsi\r# modified: kernel/msm-3.18/include/uapi/linux/input.h 撤销add的文件 git add 添加 多余文件\r这样的错误是由于， 有的时候 可能\rgit add . （空格+ 点） 表示当前目录所有文件，不小心就会提交其他文件\rgit add 如果添加了错误的文件的话 撤销操作 git status 先看一下add 中的文件\rgit reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了\rgit reset HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了 git reset HEAD device/qcom/msm8953_64/gpio-keys.kl\rgit reset HEAD frameworks/base/api/current.txt\rgit reset HEAD frameworks/base/api/system-current.txt\rgit reset HEAD frameworks/base/api/test-current.txt\rgit reset HEAD frameworks/base/core/java/android/view/KeyEvent.java\rgit reset HEAD frameworks/base/core/res/res/values/attrs.xml\rgit reset HEAD frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java\rgit reset HEAD frameworks/native/include/android/keycodes.h\rgit reset HEAD frameworks/native/include/input/InputEventLabels.h kernel代码提交。 [android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git reset HEAD frameworks/native/include/android/keycodes.h\r...非kernel全部撤销...\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git commit -m \"[all]button module in kernel\"\r[develop a6d947c] [all]button module in kernel\r4 files changed, 123 insertions(+), 59 deletions(-)\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git status\r# On branch develop\r# Changes to be committed:\r# (use \"git reset HEAD \u003cfile\u003e...\" to unstage)\r#\r# modified: kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-mtp.dtsi\r# modified: kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-nopmi-panel-camera.dtsi\r# modified: kernel/msm-3.18/arch/arm/boot/dts/qcom/msm8953-pinctrl.dtsi\r# modified: kernel/msm-3.18/include/uapi/linux/input.h\r[android_SC20@localhost sc60_android_7.1.2_qcom_sz14]$ git push origin develop\rCounting objects: 31, done.\rDelta compression using up to 40 threads.\rCompressing objects: 100% (15/15), done.\rWriting objects: 100% (16/16), 1.72 KiB | 0 bytes/s, done.\rTotal 16 (delta 14), reused 0 (delta 0)\rremote: Checking connectivity: 16, done.\rremote:\rremote: To create a merge request for develop, visit:\rremote: http://gitlab.gbcom.com.cn/daizelai/sc60_android_7.1.2_qcom_sc14/","date":"2021-05-18","objectID":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/:3:9","tags":["原创","SC60","android","按键"],"title":"SC60添加实体按键","uri":"https://daizelai.github.io/posts/sc60/20210518_1310sc60%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E6%8C%89%E9%94%AE/"},{"categories":["原创","room","数据库"],"content":"快速解决room升级数据库添加新表SQL语句冲突问题","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"一、描述 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:1:0","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"1.1.前言 创建一张ROOM新表在升级数据库解决冲突问题。 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:1:1","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"1.2.表实体类 调度命令DispatchOrder表实体类。 package com.gbcom.library_base.db import androidx.room.ColumnInfo import androidx.room.Entity import androidx.room.PrimaryKey /** * 调度命令表 * @author daizelai@gbcom.com.cn * @date 2022/09/29 13:45 */ @Entity(tableName = \"metro_dispatch_order\") data class DispatchOrder( /** * 主键 */ @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") val id: Long = 0 ) { /** * 发令处所编号 */ @ColumnInfo(name = \"sender_id\") var senderID: Int = 0 /** * 发令人姓名 */ @ColumnInfo(name = \"sender\") var sender: String? = null /** * 调度命令内容 */ @ColumnInfo(name = \"order_info\") var orderInfo: String? = null /** * 调度命令编号,不到6位时后面补空格 */ @ColumnInfo(name = \"order_no\") var orderNo: Int = 0 /** * 总包数 */ @ColumnInfo(name = \"total_pkg_num\") var totalPkgNum: Int = 0 /** * 本包号 */ @ColumnInfo(name = \"pkg_index\") var pkgIndex: Int = 0 /** * 消息类型：默认为0为工单调度命令 */ @ColumnInfo(name = \"type\") var type: Int = 0 /** * 置顶:默认 * 0不置顶，1已置顶 */ @ColumnInfo(name = \"to_top\") var toTop: Int = 0 /** * 创建时间 */ @ColumnInfo(name = \"create_time\") var createTime: Long = 0 /** * 浏览状态：先放上来，后面看需求是否需要实现，0未读，1已读，2回执状态，工单才有回执状态 */ @ColumnInfo(name = \"status\") var status: Int = 0 /** * 确保唯一性，每台设备的登录用户只看到这个IdentityID的那些记录 // @Ignore表示不想持久化 */ @ColumnInfo(name = \"identity_id\") var identityID: String = \"\" override fun toString(): String { return \"DispatchOrder(id=$id, senderID=$senderID, sender=$sender, orderInfo=$orderInfo, orderNo=$orderNo, totalPkgNum=$totalPkgNum, pkgIndex=$pkgIndex, type=$type, toTop=$toTop, createTime=$createTime, status=$status, identityID='$identityID')\" } } ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:1:2","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"二、升级数据库 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:2:0","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"2.1.卸载设备APK PS C:\\Users\\daizelai\u003e adb uninstall com.gbcom.metrosystem Success PS C:\\Users\\daizelai\u003e ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:2:1","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"2.2.清除数据 手动在设备中，设置应用中找到中兴车台Demo，停止应用，清除数据。 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:2:2","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"2.3.使用上一个数据库版本 2.3.1.版本号回退上一个版本 如果当前想要添加一个调度命令表，那么数据库就要进行升级，数据库版本号由7修改为8，但由于冲突，先让version版本号保持在未升级前的7。 package com.gbcom.library_base.db /** * 项目数据表 * @author daizelai@gbcom.com.cn * @date 2021/10/26 13:28 */ @Database( entities = [AppConfig::class, Ats::class, StationAts::class, DisCfg::class, PredefinedSMS::class, TrainBrdGroup::class, TrainPos::class, Station::class, StationBrdZone::class, Call::class, Message::class, SelfTest:: class, Log::class, FileInfo::class], version = 7, exportSchema = false ) abstract class AppDatabase : RoomDatabase() { ...... } **当应用清除数据库，把新添加的表实体类配置进来，然后运行APP，这个时候运行APP后，新添加的表就已经创建好了。**后面可以把APP的数据库导出去，通过Navicat等工具导出SQL。 package com.gbcom.library_base.db /** * 项目数据表 * @author daizelai@gbcom.com.cn * @date 2021/10/26 13:28 */ @Database( entities = [AppConfig::class, Ats::class, StationAts::class, DisCfg::class, PredefinedSMS::class, TrainBrdGroup::class, TrainPos::class, Station::class, StationBrdZone::class, Call::class, Message::class, SelfTest:: class, Log::class, FileInfo::class, DispatchOrder::class], version = 7, exportSchema = false ) abstract class AppDatabase : RoomDatabase() { ...... } 2.3.2.注释刚刚写好的升级语句 如果已经写好了数据加升级语句 /** * 调度命令 * @author daizelai@gbcom.com.cn * @date 2022/09/29 15:30 */ // abstract fun dispatchOrderDao(): DispatchOrderDao 2.3.3.注释调用此Dao的地方 package com.gbcom.library_base.udp /** * 与主机API接口交互类 * @author daizelai * @date 2021/12/01 11:35 */ class MasterApiReceive private constructor() { ...... /** * DBA转发APP调度命令 * @author daizelai@gbcom.com.cn * @date 2022/09/28 19:12 */ private fun parseCirSendDispatchOrderData(data: String) { try { val moshi: Moshi = Moshi.Builder().build() val jsonAdapter = moshi.adapter(MasterCirDispatchOrder::class.java) val mMasterData = jsonAdapter.fromJson(\"\"\"$data\"\"\") mMasterData?.let { Log.d(TAG, \"parseCirSendDispatchOrderData: data=\" + it.msgInfo.toString()) } val dispatchOrder = DispatchOrder() mMasterData?.msgInfo?.let { dispatchOrder.senderID = it.senderID dispatchOrder.sender = it.sender dispatchOrder.orderInfo = it.orderInfo dispatchOrder.orderNo = it.orderNo dispatchOrder.totalPkgNum = it.totalPkgNum dispatchOrder.pkgIndex = it.pkgIndex dispatchOrder.type = 0 dispatchOrder.toTop = 0 dispatchOrder.createTime = DateUtils.getCurrentTimeMillis() // 默认为未回执 dispatchOrder.status = 0 dispatchOrder.identityID = ZTEUtils.getUserId()!! } Log.d(TAG, \"parseCirSendDispatchOrderData: dispatchOrder == $dispatchOrder\") // TODO: 2022/9/28 跟DIS一样，这里直接入库 if (dispatchOrder != null) { // 自动签收 UdpMasterRepository.INSTANCE.cirAutoRecvDispatchOrderReq( dispatchOrder.senderID, dispatchOrder.orderNo!!, \"\", dispatchOrder.pkgIndex ) - // 数据入库 - val dispatchOrderDao: DispatchOrderDao = - AppDatabase.getInstance(BaseApp.instance()).dispatchOrderDao() - dispatchOrderDao.insertDispatchOrder(dispatchOrder) +// // 数据入库 +// val dispatchOrderDao: DispatchOrderDao = +// AppDatabase.getInstance(BaseApp.instance()).dispatchOrderDao() +// dispatchOrderDao.insertDispatchOrder(dispatchOrder) } } catch (e: Exception) { Log.d(TAG, \"parseCirSendDispatchOrderData: e=${e.message}\") e.printStackTrace() } } } 注释 package com.gbcom.message.mvvm.viewmodel class DispatchOrderViewModel(application: Application) : BaseViewModel(application) { - private val mDispatchOrderDao by lazy { - AppDatabase.getInstance(application).dispatchOrderDao() - } - private val mDispatchOrderRepository by lazy { - DispatchOrderRepository.getInstance( - mDispatchOrderDao - ) - } - - val flow = Pager( - /* - PagingConfig( - // 每页显示的数据的大小 - pageSize = 60, - // 开启占位符 - enablePlaceholders = true, - // 预刷新的距离，距离最后一个 item 多远时加载数据 - prefetchDistance = 3, - //初始化加载数量，默认为 pageSize * 3 - initialLoadSize = 60, - //一次应在内存中保存的最大数据,这个数字将会触发，滑动加载更多的数据 - maxSize = 200 - ) - */ - config = PagingConfig( - // 每页显示的数据的大小 - pageSize = BaseConstant.MSG_LIST_PAGE_SIZE, - // 开启占位符 - enablePlaceholders = true, - // 预刷新的距离，距离最后一个 item 多远时加载数据 - prefetchDistance = 2, - // 初始化加载数量，默认为 pageSize * 3 - initialLoadSize = BaseConstant.MSG_LIST_PAGE_S","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:2:3","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","room","数据库"],"content":"2.4.拿到SQL 导出数据库，比如使用Navicat打开，并导出新增加的表的SQL语句。 此时，把SQL语句直接赋值到APP项目中使用就可以了，ROOM版本号修改7为8，MIGATION_6_7后面增加MIGATION_7_8。 package com.gbcom.library_base.db /** * 项目数据表 * @author daizelai@gbcom.com.cn * @date 2021/10/26 13:28 */ @Database( entities = [AppConfig::class, Ats::class, StationAts::class, DisCfg::class, PredefinedSMS::class, TrainBrdGroup::class, TrainPos::class, Station::class, StationBrdZone::class, Call::class, Message::class, SelfTest:: class, Log::class, FileInfo::class, DispatchOrder::class], - version = 7, + version = 8, exportSchema = false ) abstract class AppDatabase : RoomDatabase() { ...... /** * 调度命令 * @author daizelai@gbcom.com.cn * @date 2022/09/29 15:30 */ + abstract fun dispatchOrderDao(): DispatchOrderDao companion object { @Volatile private var INSTANCE: AppDatabase? = null ...... /** * 创建调度命令表 * @author daizelai@gbcom.com.cn * @date 2022/09/29 14:18 */ var MIGATION_7_8: Migration = object : Migration(7, 8) { override fun migrate(database: SupportSQLiteDatabase) { + database.execSQL( + \"CREATE TABLE `metro_dispatch_order` (\" + + \"`sender_id` INTEGER NOT NULL, \" + + \"`sender` TEXT, \" + + \"`order_info` TEXT, \" + + \"`order_no` TEXT, \" + + \"`total_pkg_num` INTEGER NOT NULL, \" + + \"`pkg_index` INTEGER NOT NULL, \" + + \"`type` INTEGER NOT NULL, \" + + \"`to_top` INTEGER NOT NULL, \" + + \"`create_time` INTEGER NOT NULL, \" + + \"`status` INTEGER NOT NULL, \" + + \"`receipt` INTEGER NOT NULL, \" + + \"`identity_id` TEXT NOT NULL, \" + + \"`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL);\" ) } } fun getInstance(context: Context): AppDatabase = INSTANCE ?: synchronized(this) { INSTANCE ?: buildDatabase(context).also { INSTANCE = it } } private fun buildDatabase(context: Context) = Room.databaseBuilder( context.applicationContext, AppDatabase::class.java, \"Metro.db\" ) // 5.增加Migrations .addMigrations( MIGATION_1_2, MIGATION_2_3, MIGATION_3_4, MIGATION_4_5, MIGATION_5_6, - MIGATION_6_7 + MIGATION_6_7, + MIGATION_7_8 ) // 出现异常问题 重建数据表，同时数据也会丢失。 // .fallbackToDestructiveMigration() .build() } } ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/:2:4","tags":["原创","room","数据库","数据库升级"],"title":"快速解决room升级数据库添加新表SQL语句冲突问题","uri":"https://daizelai.github.io/posts/room/20220929_1505%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3room%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%A8sql%E8%AF%AD%E5%8F%A5%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/room/"},{"categories":["原创","android studio"],"content":"android studio默认打开上一次的状态","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/"},{"categories":["原创","android studio"],"content":" 20220930_1207as默认打开上一次的状态 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/:0:0","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/"},{"categories":["原创","android studio"],"content":"一、描述 by daizelai on 2022/09/30 12:08 as默认打开上一次的状态，但是如果你是复制一个项目为另一个新项目，这样使用as打开这两个项目时，会发现，as打开的上一次状态都是一样的。 本文主要讲述了如何各自打开各自的上一次状态。 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/:1:0","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/"},{"categories":["原创","android studio"],"content":"二、开始 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/:2:0","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/"},{"categories":["原创","android studio"],"content":"2.1.配置打开上一次状态 File Settings… Appearance \u0026 Behavior System Settings Startup/Shutdown Reopen last project on startup ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/:2:1","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/"},{"categories":["原创","android studio"],"content":"2.2.修改各自上一次状态 打开AndroidStudio的project视图方式，找到workspace.xml然后删除。 然后关闭Android Studio后，重启Android Studio，这样就能把工作状态保存了。 这样即使是直接把项目复制成新的项目，然后再打开新的项目，布局也是自己上次打开的状态了。 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/:2:2","tags":["原创","android","android studio"],"title":"as默认打开上一次的状态","uri":"https://daizelai.github.io/posts/as/20220930_1207as%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E7%8A%B6%E6%80%81/as/"},{"categories":["原创","android studio"],"content":"解决android studio运行项目的The project uses Gradle 4.6 which is incompatible with Java 11 or newer问题","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/%E6%96%B0windows%E5%AE%89%E8%A3%85as%E5%90%8E%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAjava%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/as/","tags":["原创","app编译","as环境问题","android studio"],"title":"新Windows安装AS后运行已开发项目提示JAVA兼容问题","uri":"https://daizelai.github.io/posts/as/%E6%96%B0windows%E5%AE%89%E8%A3%85as%E5%90%8E%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAjava%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/as/"},{"categories":["原创","android studio"],"content":"新Windows安装AS后运行已开发项目提示JAVA兼容问题 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/%E6%96%B0windows%E5%AE%89%E8%A3%85as%E5%90%8E%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAjava%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/as/:0:0","tags":["原创","app编译","as环境问题","android studio"],"title":"新Windows安装AS后运行已开发项目提示JAVA兼容问题","uri":"https://daizelai.github.io/posts/as/%E6%96%B0windows%E5%AE%89%E8%A3%85as%E5%90%8E%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAjava%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/as/"},{"categories":["原创","android studio"],"content":"一、描述 笔记本重新安装Windows10系统了，所有软件都要重新安装，安装了jdk8，然后下载安装了Android Studio，运行WH19项目，在控制台提示如下错误。 打开项目并sync后，在Android Studio的控制台提示如下错误。 Unable to start the daemon process.\rThe project uses Gradle 4.6 which is incompatible with Java 11 or newer.\rPossible solution:\r- Upgrade Gradle wrapper to 7.2 version and re-import the project ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/%E6%96%B0windows%E5%AE%89%E8%A3%85as%E5%90%8E%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAjava%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/as/:1:0","tags":["原创","app编译","as环境问题","android studio"],"title":"新Windows安装AS后运行已开发项目提示JAVA兼容问题","uri":"https://daizelai.github.io/posts/as/%E6%96%B0windows%E5%AE%89%E8%A3%85as%E5%90%8E%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAjava%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/as/"},{"categories":["原创","android studio"],"content":"二、根目录build.gradle 下面是我的build.gradle // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { repositories { google() jcenter() // maven{ url'http://maven.aliyun.com/nexus/content/groups/public/' } // maven{ url'http://maven.aliyun.com/nexus/content/repositories/jcenter'} maven { url 'http://central.maven.org/maven2/' } } dependencies { classpath 'com.android.tools.build:gradle:3.2.0' // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } allprojects { repositories { google() jcenter() // maven{ url'http://maven.aliyun.com/nexus/content/groups/public/' } // maven{ url'http://maven.aliyun.com/nexus/content/repositories/jcenter'} maven { url 'https://jitpack.io' } maven { url \"https://maven.google.com\" } flatDir { dirs '../app/libs'; } } // 【framework】如果引入framework.jar需要使用 gradle.projectsEvaluated { tasks.withType(JavaCompile) { options.compilerArgs.add('-Xbootclasspath/p:app/libs/framework.jar') } } } task clean(type: Delete) { delete rootProject.buildDir } ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/%E6%96%B0windows%E5%AE%89%E8%A3%85as%E5%90%8E%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAjava%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/as/:2:0","tags":["原创","app编译","as环境问题","android studio"],"title":"新Windows安装AS后运行已开发项目提示JAVA兼容问题","uri":"https://daizelai.github.io/posts/as/%E6%96%B0windows%E5%AE%89%E8%A3%85as%E5%90%8E%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAjava%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/as/"},{"categories":["原创","android studio"],"content":"三、gradle-wrapper.properties 下面是我的gradle-wrapper.properties 路径：E:\\develop\\WH19-MetroSystem\\gradle\\wrapper\\gradle-wrapper.properties distributionBase=GRADLE_USER_HOME\rdistributionPath=wrapper/dists\rdistributionUrl=https\\://services.gradle.org/distributions/gradle-4.6-all.zip\rzipStoreBase=GRADLE_USER_HOME\rzipStorePath=wrapper/dists ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/%E6%96%B0windows%E5%AE%89%E8%A3%85as%E5%90%8E%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAjava%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/as/:3:0","tags":["原创","app编译","as环境问题","android studio"],"title":"新Windows安装AS后运行已开发项目提示JAVA兼容问题","uri":"https://daizelai.github.io/posts/as/%E6%96%B0windows%E5%AE%89%E8%A3%85as%E5%90%8E%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAjava%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/as/"},{"categories":["原创","android studio"],"content":"四、问题解决 解决问题 ","date":"2019-03-31","objectID":"https://daizelai.github.io/posts/as/%E6%96%B0windows%E5%AE%89%E8%A3%85as%E5%90%8E%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAjava%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/as/:4:0","tags":["原创","app编译","as环境问题","android studio"],"title":"新Windows安装AS后运行已开发项目提示JAVA兼容问题","uri":"https://daizelai.github.io/posts/as/%E6%96%B0windows%E5%AE%89%E8%A3%85as%E5%90%8E%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAjava%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/as/"},{"categories":["原创","ubuntu","ssh"],"content":"在虚拟机中安装ubuntu系统后不能连接SSH问题修复。","date":"2016-11-04","objectID":"https://daizelai.github.io/posts/linux/ubuntu/ubuntu%E7%9A%84%E4%B8%8D%E8%83%BD%E8%BF%9E%E6%8E%A5ssh%E9%97%AE%E9%A2%98/","tags":["原创","ubuntu","ssh"],"title":"ubuntu的不能连接SSH问题","uri":"https://daizelai.github.io/posts/linux/ubuntu/ubuntu%E7%9A%84%E4%B8%8D%E8%83%BD%E8%BF%9E%E6%8E%A5ssh%E9%97%AE%E9%A2%98/"},{"categories":["原创","ubuntu","ssh"],"content":"一、问题描述 ubuntu的不能连接SSH问题。 安装好ubuntu系统中，网络也配置好可以ping通主机。使用SSH不能连接，提示： The remote system refused the connection. ","date":"2016-11-04","objectID":"https://daizelai.github.io/posts/linux/ubuntu/ubuntu%E7%9A%84%E4%B8%8D%E8%83%BD%E8%BF%9E%E6%8E%A5ssh%E9%97%AE%E9%A2%98/:1:0","tags":["原创","ubuntu","ssh"],"title":"ubuntu的不能连接SSH问题","uri":"https://daizelai.github.io/posts/linux/ubuntu/ubuntu%E7%9A%84%E4%B8%8D%E8%83%BD%E8%BF%9E%E6%8E%A5ssh%E9%97%AE%E9%A2%98/"},{"categories":["原创","ubuntu","ssh"],"content":"二、获取root权限 为了方便配置，先取得系统的root权限。 sudo su - root 获取root用户权限 ","date":"2016-11-04","objectID":"https://daizelai.github.io/posts/linux/ubuntu/ubuntu%E7%9A%84%E4%B8%8D%E8%83%BD%E8%BF%9E%E6%8E%A5ssh%E9%97%AE%E9%A2%98/:2:0","tags":["原创","ubuntu","ssh"],"title":"ubuntu的不能连接SSH问题","uri":"https://daizelai.github.io/posts/linux/ubuntu/ubuntu%E7%9A%84%E4%B8%8D%E8%83%BD%E8%BF%9E%E6%8E%A5ssh%E9%97%AE%E9%A2%98/"},{"categories":["原创","ubuntu","ssh"],"content":"三、安装ssh 使用如下命令安装ssh apt-get install openssh-server apt-get install openssh-client 安装openssh-server 我这边不用安装openssh-client了。 安装openssh-server 安装ssh时出现问题： dpkg 被中断,您必须手工运行 sudo dpkg --configure -a解决此问题。 提示截图： 安装openssh-server 导致这个问题的主要原因是因为/var/lib/dpkg/updates文件下的文件有问题，可能是其他软件安装过程或是其他原因导致的，这里删除掉然后重建即可。 sudo rm /var/lib/dpkg/updates/* sudo apt-get update sudo apt-get upgrade update操作 upgrade操作 sudo apt-get update 指令会重新建立这些资料，所以不必担心删除后会出问题； sudo apt-get upgrade 会更新你的电脑里面已安装的软件的明细，根据软件的明细更新软件到最新版。 PS：“dpkg ”是“Debian Packager ”的简写。为 “Debian” 专门开发的套件管理系统，方便软件的安装、更新及移除。所有源自“Debian”的“Linux ”发行版都使用 “dpkg” 普通用法： 1、dpkg -i 安装一个 Debian 包裹文件，如你手动下载的文件。 2、dpkg -c 列出 的内容。 3、dpkg -I 从 中提取包裹信息。 4、dpkg -r 移除一个已安装的包裹。 5、dpkg -P 完全清除一个已安装的包裹。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。 6、dpkg -L 列出 安装的所有文件清单。同时请看 dpkg -c 来检查一个 .deb 文件的内容。 7、dpkg -s 显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .deb 文件中提取的包裹信息。 8、dpkg-reconfigure 重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)。 查看一下安装情况 查看安装情况 ","date":"2016-11-04","objectID":"https://daizelai.github.io/posts/linux/ubuntu/ubuntu%E7%9A%84%E4%B8%8D%E8%83%BD%E8%BF%9E%E6%8E%A5ssh%E9%97%AE%E9%A2%98/:3:0","tags":["原创","ubuntu","ssh"],"title":"ubuntu的不能连接SSH问题","uri":"https://daizelai.github.io/posts/linux/ubuntu/ubuntu%E7%9A%84%E4%B8%8D%E8%83%BD%E8%BF%9E%E6%8E%A5ssh%E9%97%AE%E9%A2%98/"},{"categories":["原创","ubuntu","ssh"],"content":"四、使用SecureCRT连接ssh 启动ssh service ssh start 查看是否启动 ps -e | grep ssh 可以连通SSH了，但输入用户名和密码后却提示这样。 连通SSH之disconnected问题 这是因为SecureCRT配置中的用户名和你登录时候输入的用户名不相符，改一下就可以： 选项 -\u003e 会话选项 -\u003e Connection -\u003e SSH2 -\u003e Username 配置SecureCRT 修改后登录正常，这样可以禁用服务器的ROOT登录了。 ","date":"2016-11-04","objectID":"https://daizelai.github.io/posts/linux/ubuntu/ubuntu%E7%9A%84%E4%B8%8D%E8%83%BD%E8%BF%9E%E6%8E%A5ssh%E9%97%AE%E9%A2%98/:4:0","tags":["原创","ubuntu","ssh"],"title":"ubuntu的不能连接SSH问题","uri":"https://daizelai.github.io/posts/linux/ubuntu/ubuntu%E7%9A%84%E4%B8%8D%E8%83%BD%E8%BF%9E%E6%8E%A5ssh%E9%97%AE%E9%A2%98/"},{"categories":["原创","ubuntu","virtualbox"],"content":"在虚拟机中安装ubuntu系统后，如何在virtualbox中全屏显示ubuntu系统。","date":"2016-11-02","objectID":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA/","tags":["原创","ubuntu","virtualbox"],"title":"virtualbox之ubuntu全屏显示","uri":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA/"},{"categories":["原创","ubuntu","virtualbox"],"content":"一、描述 virtualbox安装好ubuntu后调分辨率 ","date":"2016-11-02","objectID":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA/:1:0","tags":["原创","ubuntu","virtualbox"],"title":"virtualbox之ubuntu全屏显示","uri":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA/"},{"categories":["原创","ubuntu","virtualbox"],"content":"二、开始 在virtualbox安装好ubuntu后，显示的界面是800*600的分辨率，下面给出需要全屏显示的解决办法： 1.启动Ubuntu后，安装Virtualbox增强功能（在虚拟机的“设备”菜单里可以点击） 安装Virtualbox增强功能 正在安装中。 安装Virtualbox增强功能 2.安装增强功能完成后，选中虚拟机菜单上的“视图” -\u003e “自动调整显示尺寸”。 安装Virtualbox增强功能 3.点击虚拟机菜单上的“视图” -\u003e “显示全屏”(快捷键：右Ctrl + F) 4.重启系统后就可以了，记得需要点一下虚拟机中“视图”下的“无缝模式”和“视图”下的“全屏模式”，此时缩小放大虚拟机窗口就会正常的变了。 ","date":"2016-11-02","objectID":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA/:2:0","tags":["原创","ubuntu","virtualbox"],"title":"virtualbox之ubuntu全屏显示","uri":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA/"},{"categories":["原创","ubuntu","virtualbox"],"content":"在virtualbox虚拟机中安装ubuntu系统。","date":"2016-11-01","objectID":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/","tags":["原创","ubuntu","virtualbox"],"title":"virtualbox之ubuntu安装","uri":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/"},{"categories":["原创","ubuntu","virtualbox"],"content":"一、ubuntu版本介绍 Desktop是桌面操作系统版本; Server是服务器端操作系统版本; Cloud应该是云端操作系统版本。 ","date":"2016-11-01","objectID":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/:1:0","tags":["原创","ubuntu","virtualbox"],"title":"virtualbox之ubuntu安装","uri":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/"},{"categories":["原创","ubuntu","virtualbox"],"content":"二、系统下载 作为PC机，我们下载Desktop版本。 LTS = Long Term Support Long Term Support：长时间支持版本（三年） ，一般的版本支持为18个月。Ubuntu定期并有计划的不断发布其新版本,Ubuntu 一直坚持每6个月发布一个新的版本。 下载Ubuntu 16.04.1 LTS 下载最新的LTS版本的Ubuntu，适用于台式电脑和笔记本电脑。 LTS代表长期支持 - 这意味着五年的免费安全和维护更新，保证。 Ubuntu 16.04 LTS发行说明 推荐系统要求： 2 GHz双核处理器或更好 2 GB系统内存 25 GB可用硬盘空间 DVD驱动器或安装程序媒体的USB端口 互联网接入是有帮助的 ","date":"2016-11-01","objectID":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/:2:0","tags":["原创","ubuntu","virtualbox"],"title":"virtualbox之ubuntu安装","uri":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/"},{"categories":["原创","ubuntu","virtualbox"],"content":"三、安装系统 ","date":"2016-11-01","objectID":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/:3:0","tags":["原创","ubuntu","virtualbox"],"title":"virtualbox之ubuntu安装","uri":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/"},{"categories":["原创","ubuntu","virtualbox"],"content":"3.1.创建虚拟电脑 创建虚拟电脑 创建虚拟电脑 创建虚拟电脑 创建虚拟电脑 ","date":"2016-11-01","objectID":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/:3:1","tags":["原创","ubuntu","virtualbox"],"title":"virtualbox之ubuntu安装","uri":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/"},{"categories":["原创","ubuntu","virtualbox"],"content":"3.2.安装前的准备 点击启动后，在弹出的框中选择之前下载的ubuntu系统文件后。 启动虚拟电脑 点击启动按钮，效果如下 启动虚拟电脑 ","date":"2016-11-01","objectID":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/:3:2","tags":["原创","ubuntu","virtualbox"],"title":"virtualbox之ubuntu安装","uri":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/"},{"categories":["原创","ubuntu","virtualbox"],"content":"3.3.安装系统 现在来到了安装界面，选择我们熟悉的中文语言，点击install Ubuntu 安装中文ubuntu 来到此界面，需要注意的是，这里全部都不选择，我第一次全部选择安装后启动系统只看到桌面壁纸了。 安装中文ubuntu 点击继续后来到安装类型界面，这里选择“清除整个磁盘并安装Ubuntu”，点击现在安装 此处，选择“清除整个磁盘并安装Ubuntu”或“其他选项”，就可以实现，傻瓜化的，不用关心如何分区，而直接安装Ubuntu的。 而与此相对的，如果选择“给新安装的Ubuntu使用LVM”，则是需要去关心，Linux类系统的各种分区，各种挂载点，设置不用的挂载点，不同的大小，以实现，尤其是和软件开发等相关的，一些特定目的。 安装类型 接着很快就来到选择时区界面，默认选择shanghai 然后来到键盘布局页面，我图方便就选择汉语-汉语.: 现在我们可以设置用户名和密码了。 设置用户名和密码 然后就是去安装系统了，首先是复制文件以及安装系统操作，因为前面我勾选了下载更新文件，所以还会下载一些文件的。 安装中。。。 安装中。。。 安装完毕 这里没有上面11,12下载文件了，只要不到1个小时应该，因为查问题没记时间。 安装成功 现在就可以登录ubuntu系统喽。 ","date":"2016-11-01","objectID":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/:3:3","tags":["原创","ubuntu","virtualbox"],"title":"virtualbox之ubuntu安装","uri":"https://daizelai.github.io/posts/virtualbox/virtualbox%E4%B9%8Bubuntu%E5%AE%89%E8%A3%85/"},{"categories":["原创","linux","磁盘挂载"],"content":"centos下面删除挂载的磁盘后的问题解决,centos下面删除挂载的磁盘sdb后,sdc也不能访问了","date":"2016-11-01","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E7%A3%81%E7%9B%98sdc%E5%8F%98%E4%B8%BAsdb%E5%90%8E/","tags":["原创","linux","磁盘挂载"],"title":"linux之磁盘sdc变为sdb后","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E7%A3%81%E7%9B%98sdc%E5%8F%98%E4%B8%BAsdb%E5%90%8E/"},{"categories":["原创","linux","磁盘挂载"],"content":"一、场景 vm virtualBox安装了centos系统后，因为空间满了，就添加了块新磁盘，通过fdisk可看可以得到为sdb、sdc，后来因为不需要sdb磁盘把移除了，哪知道系统启动后，就不能上网了，SSH也不能连接了，使用df -h查看sdc挂载的/diskc也没有了，通过fdisk -l 查看sdc变为sdb了。 启动系统后变乱码的问题 使用df查看发现磁盘sdb和磁盘sdc都看不到了。 磁盘sda和sdb都看不到了 整个就不能使用了。 ","date":"2016-11-01","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E7%A3%81%E7%9B%98sdc%E5%8F%98%E4%B8%BAsdb%E5%90%8E/:1:0","tags":["原创","linux","磁盘挂载"],"title":"linux之磁盘sdc变为sdb后","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E7%A3%81%E7%9B%98sdc%E5%8F%98%E4%B8%BAsdb%E5%90%8E/"},{"categories":["原创","linux","磁盘挂载"],"content":"二、分析 网上的解决方案(没试过，因为我是centos7)： 查询磁盘设备的UUID标识代码 [root@localhost wwwroot]# ls -la /dev/disk/by-id 总用量 0 drwxr-xr-x. 2 root root 280 11月 1 11:12 . drwxr-xr-x. 5 root root 100 11月 1 11:12 .. lrwxrwxrwx. 1 root root 9 11月 1 11:12 ata-VBOX_CD-ROM_VB2-01700376 -\u003e ../../sr0 lrwxrwxrwx. 1 root root 9 11月 1 11:12 ata-VBOX_HARDDISK_VB56600bb8-22ac4f1f -\u003e ../../sda lrwxrwxrwx. 1 root root 10 11月 1 11:12 ata-VBOX_HARDDISK_VB56600bb8-22ac4f1f-part1 -\u003e ../../sda1 lrwxrwxrwx. 1 root root 10 11月 1 11:12 ata-VBOX_HARDDISK_VB56600bb8-22ac4f1f-part2 -\u003e ../../sda2 lrwxrwxrwx. 1 root root 9 11月 1 11:12 ata-VBOX_HARDDISK_VB61d9c9c9-e019bfdb -\u003e ../../sdb lrwxrwxrwx. 1 root root 10 11月 1 11:12 dm-name-centos-docker--poolmeta -\u003e ../../dm-2 lrwxrwxrwx. 1 root root 10 11月 1 11:12 dm-name-centos-root -\u003e ../../dm-0 lrwxrwxrwx. 1 root root 10 11月 1 11:12 dm-name-centos-swap -\u003e ../../dm-1 lrwxrwxrwx. 1 root root 10 11月 1 11:12 dm-uuid-LVM-mIvijZfEdaPjASZ4OCLaHtVz3nVOcmfTbNENZwLJNatD6Qe5I8tUmTLemOJyEb9b -\u003e ../../dm-0 lrwxrwxrwx. 1 root root 10 11月 1 11:12 dm-uuid-LVM-mIvijZfEdaPjASZ4OCLaHtVz3nVOcmfTKw0whD3LINFsYsExI9BIq94HGRBo2nvw -\u003e ../../dm-2 lrwxrwxrwx. 1 root root 10 11月 1 11:12 dm-uuid-LVM-mIvijZfEdaPjASZ4OCLaHtVz3nVOcmfTnKFBBONN26qqHc3iqMN7it3HMZOrAk97 -\u003e ../../dm-1 lrwxrwxrwx. 1 root root 10 11月 1 11:12 lvm-pv-uuid-JcZgrG-0oo0-iRlg-EzNC-I3ld-74GV-1oHWkq -\u003e ../../sda2 找到了磁盘设备唯一的UUID代码后，就可以加到/etc/grub.conf和/etc/fstab中，这样即使初始的系统盘sda变成了sdb，但Linux和文件系统的启动加载都是按照UUID来的，所以上层也不会受到影响 在 /etc/grub.conf系统启动入口中做以下更改： kernel /boot/vmlinuz-3.10.0-3 root=/dev/disk/by-id/ata-VBOX_HARDDISK_VB61d9c9c9-e019bfdb 在 /etc/fstab文件系统启动入口中做以下更改： /dev/disk/by-id/ata-VBOX_HARDDISK_VB61d9c9c9-e019bfdb / ext4 1 1 ","date":"2016-11-01","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E7%A3%81%E7%9B%98sdc%E5%8F%98%E4%B8%BAsdb%E5%90%8E/:2:0","tags":["原创","linux","磁盘挂载"],"title":"linux之磁盘sdc变为sdb后","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E7%A3%81%E7%9B%98sdc%E5%8F%98%E4%B8%BAsdb%E5%90%8E/"},{"categories":["原创","linux","磁盘挂载"],"content":"三、我的解决方案 重新挂载一下sdc为sdb就可以了。 重新挂载一下sdc为sdb ","date":"2016-11-01","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E7%A3%81%E7%9B%98sdc%E5%8F%98%E4%B8%BAsdb%E5%90%8E/:3:0","tags":["原创","linux","磁盘挂载"],"title":"linux之磁盘sdc变为sdb后","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E7%A3%81%E7%9B%98sdc%E5%8F%98%E4%B8%BAsdb%E5%90%8E/"},{"categories":["mysql","数据库"],"content":"mysql数据库乱码解决方案，修改mysql数据编码。","date":"2016-10-28","objectID":"https://daizelai.github.io/posts/mysql/character/","tags":["原创","mysql","数据库","数据库乱码"],"title":"mysql乱码","uri":"https://daizelai.github.io/posts/mysql/character/"},{"categories":["mysql","数据库"],"content":"一、查看mysql服务端情况 1.查看mysql默认的编码配置 mysql\u003e show variables like 'char%'; mysql\u003e SHOW VARIABLES LIKE 'character%'; +--------------------------+----------------------------+ | Variable_name | Value | +--------------------------+----------------------------+ | character_set_client | utf8 | | character_set_connection | utf8 | | character_set_database | latin1 | | character_set_filesystem | binary | | character_set_results | utf8 | | character_set_server | latin1 | | character_set_system | utf8 | | character_sets_dir | /usr/share/mysql/charsets/ | +--------------------------+----------------------------+ 8 rows in set (0.00 sec) 2.查看某(we7)数据库的编码格式 mysql\u003e show create database we7; +----------+--------------------------------------------------------------+ | Database | Create Database | +----------+--------------------------------------------------------------+ | we7 | CREATE DATABASE `we7` /*!40100 DEFAULT CHARACTER SET utf8 */ | +----------+--------------------------------------------------------------+ 1 row in set (0.01 sec) 默认创建数据库时指定编码，强烈建议使用utf8。 CREATE DATABASE `we7` CHARACTER SET 'utf8' COLLATE 'utf8_general_ci'; 3.查看某(ims_rule)表的编码格式 mysql\u003e show create table ims_rule; CREATE TABLE `ims_rule` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `uniacid` int(10) unsigned NOT NULL, `name` varchar(50) NOT NULL, `module` varchar(50) NOT NULL, `displayorder` int(10) unsigned NOT NULL, `status` tinyint(1) unsigned NOT NULL, PRIMARY KEY (`id`) ) ENGINE=MyISAM AUTO_INCREMENT=216 DEFAULT CHARSET=utf8 1 row in set (0.03 sec) 创建表时使用utf8编码 CREATE TABLE `ims_rule` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, ) ENGINE=MyISAM DEFAULT CHARSET=utf8; ","date":"2016-10-28","objectID":"https://daizelai.github.io/posts/mysql/character/:1:0","tags":["原创","mysql","数据库","数据库乱码"],"title":"mysql乱码","uri":"https://daizelai.github.io/posts/mysql/character/"},{"categories":["mysql","数据库"],"content":"二、修改mysql编码 1.设置mysql编码 SET NAMES utf8 SET NAMES gbk 相当于 SET character_set_client='utf8'; SET character_set_connection='utf8'; SET character_set_results='utf8'; 2.或者修改mysql配置文件 我这次是这样修改成功的，因为确定了是服务端的问题，修改后记得要重启mysql服务哦。 # vi /etc/my.inf [client] default-character-set=utf8 [mysql] default-character-set=utf8 [mysqld] default-character-set=utf8 3.修改数据库的编码 // 修改数据库的编码 ALTER DATABASE `we7` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; // 修改表的编码 ALTER TABLE `ims_rule` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; // 修改数据库为gbk ALTER DATABASE `db_name` DEFAULT CHARACTER SET gbk COLLATE gbk_chinese_ci; ","date":"2016-10-28","objectID":"https://daizelai.github.io/posts/mysql/character/:2:0","tags":["原创","mysql","数据库","数据库乱码"],"title":"mysql乱码","uri":"https://daizelai.github.io/posts/mysql/character/"},{"categories":["mysql","数据库"],"content":"三、代码端 记得在代码端也要使用相同的编码格式，这里需要使用utf8，否则还是乱码的。 ","date":"2016-10-28","objectID":"https://daizelai.github.io/posts/mysql/character/:3:0","tags":["原创","mysql","数据库","数据库乱码"],"title":"mysql乱码","uri":"https://daizelai.github.io/posts/mysql/character/"},{"categories":["原创","虚拟机","virtualbox"],"content":"给VM VirtualBox磁盘扩充容量。","date":"2016-10-27","objectID":"https://daizelai.github.io/posts/virtualbox/vmbox%E6%89%A9%E5%AE%B9/","tags":["原创","virtualbox","虚拟机"],"title":"vmbox扩容","uri":"https://daizelai.github.io/posts/virtualbox/vmbox%E6%89%A9%E5%AE%B9/"},{"categories":["原创","虚拟机","virtualbox"],"content":"windows下面命令扩容虚拟机容量（这一招没用） 使用VM VirtualBox安装的CentOS最近空间满了， 想要添加一些空间。使用VBoxManage命令来添加空间。 首先cmd来到VirtualBox的安装目录，发现有VBoxManage.exe命令文件，就可以按下面的命令来操作。 F:\\soft\\VBox\\App\\VirtualBox\u003eVBoxManage modifyhd F:\\PortableApps\\VirtualBoxPortab le\\VMs\\centos_7\\centos_7.vdi --resize 19000 0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100% 扩容失败问题如下。 F:\\soft\\VBox\\App\\VirtualBox\u003eVBoxManage modifyhd F:\\PortableApps\\VirtualBoxPortab le\\VMs\\centos_7\\centos_7.vdi --resize 16000 0%... Progress state: VBOX_E_NOT_SUPPORTED VBoxManage.exe: error: Resize medium operation for this format is not implemente d yet! 首先虚拟系统的扩展名必须为vdi，如果是vmdk的话，需要转换为vdi，我这里就是vdi就不管了。 我这里的错误是因为我的虚拟机的空间就是16G，所以当然扩容不成功了。 扩容前的空间大小为16G 通过VBoxManage list hdds就可以看到我们克隆的文件了 F:\\soft\\VBox\\App\\VirtualBox\u003eVBoxManage list hdds UUID: 56600bb8-bb8d-4ec4-97ff-10e11f4fac22 Parent UUID: base State: locked read Type: normal (base) Location: F:\\PortableApps\\VirtualBoxPortable\\VMs\\centos_7\\centos_7.vdi Storage format: VDI Capacity: 19000 MBytes Encryption: disabled UUID: d0f331ec-eff9-4bc5-8691-e05cfa36d0b4 Parent UUID: 56600bb8-bb8d-4ec4-97ff-10e11f4fac22 State: created Type: normal (differencing) Location: F:\\PortableApps\\VirtualBoxPortable\\VMs\\centos_7\\Snapshots/{d0f33 1ec-eff9-4bc5-8691-e05cfa36d0b4}.vdi Storage format: VDI Capacity: 8192 MBytes Encryption: disabled UUID: 8c4dee1d-d0eb-41d5-8033-23c484ec89ae Parent UUID: 56600bb8-bb8d-4ec4-97ff-10e11f4fac22 State: locked read Type: normal (differencing) Location: F:\\PortableApps\\VirtualBoxPortable\\VMs\\centos_7\\Snapshots/{8c4de e1d-d0eb-41d5-8033-23c484ec89ae}.vdi Storage format: VDI Capacity: 8192 MBytes Encryption: disabled UUID: 1794a92b-b5d9-49cb-a02d-8eff36216b3b Parent UUID: 8c4dee1d-d0eb-41d5-8033-23c484ec89ae State: locked write Type: normal (differencing) Location: F:\\PortableApps\\VirtualBoxPortable\\VMs\\centos_7\\Snapshots\\{1794a 92b-b5d9-49cb-a02d-8eff36216b3b}.vdi Storage format: VDI Capacity: 8192 MBytes Encryption: disabled 添加磁盘（直接添加新虚拟盘成功） 在打开虚拟机–选个系统–右击–设置–存储–控制器SATA–右边的添加虚拟硬盘–选择克隆的文件就行了。 我这里选择使用现有的虚拟盘，然后手动选择本身虚拟系统centos_7.vdi，不另外添加文件时，后面通过fdisk /dev/sda分区时报错No free sectors available。 然后我这里就选择创建新的虚拟盘 添加虚拟盘 确定后我们可以看到空间已经增大。 添加虚拟盘后效果 挂载新磁盘，通过LVM来扩展分区 进入系统后发现，空间还是以前一样大。 [root@localhost ~]# df -h 文件系统 容量 已用 可用 已用% 挂载点 /dev/mapper/centos-root 6.7G 4.8G 2.0G 72% / devtmpfs 361M 0 361M 0% /dev tmpfs 371M 0 371M 0% /dev/shm tmpfs 371M 5.0M 366M 2% /run tmpfs 371M 0 371M 0% /sys/fs/cgroup /dev/sda1 497M 164M 334M 33% /boot tmpfs 75M 0 75M 0% /run/user/0 使用fdisk -l查看系统分区情况。 可以看到我们已经创建的分区，sda1 sda2的什么，也可以ls /dev/来查看。如果有第二块硬盘会看到sdb [root@localhost ~]# fdisk -l 磁盘 /dev/sda：8589 MB, 8589934592 字节，16777216 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘标签类型：dos 磁盘标识符：0x000bf8c7 设备 Boot Start End Blocks Id System /dev/sda1 * 2048 1026047 512000 83 Linux /dev/sda2 1026048 16777215 7875584 83 Linux 磁盘 /dev/mapper/centos-root：7159 MB, 7159676928 字节，13983744 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘 /dev/mapper/centos-swap：859 MB, 859832320 字节，1679360 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘 /dev/mapper/centos-docker--poolmeta：8 MB, 8388608 字节，16384 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘 /dev/mapper/docker-253:0-13774-pool：107.4 GB, 107374182400 字节，209715200 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：65536 字节 / 65536 字节 下面创建将扩展的空间，创建新分区 使用fdisk -l可以看到新添加的sdb硬盘的。 [root@localhost ~]# fdisk -l 磁盘 /dev/sda：8589 MB, 8589934592 字节，16777216 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘标签类型：dos 磁盘标识符：0x000bf8c7 设备 Boot Start End Blocks Id System /dev/sda1 * 2048 1026047 512000 83 Linux /dev/sda2 1026048 16777215 7875584 83 Linux 磁盘 /dev/sdb：8589 MB, 8589934592 字节，16777216 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I","date":"2016-10-27","objectID":"https://daizelai.github.io/posts/virtualbox/vmbox%E6%89%A9%E5%AE%B9/:0:0","tags":["原创","virtualbox","虚拟机"],"title":"vmbox扩容","uri":"https://daizelai.github.io/posts/virtualbox/vmbox%E6%89%A9%E5%AE%B9/"},{"categories":["原创","lsof","linux"],"content":"linux之lsof的使用，可以根据端口查询进程。","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","lsof","linux"],"content":"一、安装lsof 先查看一下lsof命令是否存在。 [root@localhost lai]# lsof\r-bash: lsof: command not found\r[root@localhost lai]# whereis lsof\rlsof: 不存在的话，需要进行安装 [root@localhost lai]# yum -y install lsof\r[root@localhost lai]# whereis lsof\rlsof: /usr/sbin/lsof /usr/share/man/man8/lsof.8.gz\r[root@localhost lai]# lsof -i:80\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rhexo 2403 root 12u IPv4 19352 0t0 TCP *:http (LISTEN) 如果只是查看java进程的话，可以全用jps命令。jps是jdk提供的一个查看当前Java进程的小工具， 可以看做是JavaVirtual Machine Process Status Tool的缩写。 jps –q ：仅仅显示java进程号\rjps -mlv 10.60.0.83 :查看其他机器上的jvm进程，需要在待查看机器上启动jstatd ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:1:0","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","lsof","linux"],"content":"二、简单使用 ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:0","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","lsof","linux"],"content":"2.1.查找所有打开的文件 因为文件较多，这里使用head只显示前面几条内容 [root@localhost lai]# lsof | head\rCOMMAND PID TID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rsystemd 1 root cwd DIR 253,0 4096 128 /\rsystemd 1 root rtd DIR 253,0 4096 128 /\rsystemd 1 root txt REG 253,0 1494168 25320299 /usr/lib/systemd/systemd\rsystemd 1 root mem REG 253,0 20032 16818278 /usr/lib64/libuuid.so.1.3.0\rsystemd 1 root mem REG 253,0 252696 16993728 /usr/lib64/libblkid.so.1.1.0\rsystemd 1 root mem REG 253,0 90632 16850739 /usr/lib64/libz.so.1.2.7\rsystemd 1 root mem REG 253,0 19888 16850823 /usr/lib64/libattr.so.1.1.0\rsystemd 1 root mem REG 253,0 19520 17265237 /usr/lib64/libdl-2.17.so\rsystemd 1 root mem REG 253,0 153192 17265284 /usr/lib64/liblzma.so.5.0.99 FD列详解 cwd - Current working directory\rtxt - Text file\rmem - Memory Mapped file\rmmap - Memory Mapped device\rNumber - It represent the actual file descriptor. For example, 0u, 1w and 3r\rr 是读的意思，w 是写，u 代表读写 Type代表文件类型 REG - Regular file DIR - Directory\rCHR - Character special file\rFIFO - First in first out ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:1","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","lsof","linux"],"content":"2.2.列出所有侦听和已建立的网络连接 [root@localhost lai]# lsof -i\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rdhclient 645 root 6u IPv4 15146 0t0 UDP *:bootpc dhclient 645 root 20u IPv4 15102 0t0 UDP *:19897 dhclient 645 root 21u IPv6 15103 0t0 UDP *:24534 dhclient 646 root 6u IPv4 15157 0t0 UDP *:bootpc dhclient 646 root 20u IPv4 15099 0t0 UDP *:35689 dhclient 646 root 21u IPv6 15100 0t0 UDP *:19897 sshd 893 root 3u IPv4 16017 0t0 TCP *:ssh (LISTEN)\rsshd 893 root 4u IPv6 16026 0t0 TCP *:ssh (LISTEN)\rmysqld 2077 mysql 10u IPv6 17561 0t0 TCP *:mysql (LISTEN)\rmaster 2167 root 13u IPv4 17452 0t0 TCP localhost:smtp (LISTEN)\rmaster 2167 root 14u IPv6 17453 0t0 TCP localhost:smtp (LISTEN)\rsshd 2326 root 3u IPv4 18608 0t0 TCP localhost.localdomain:ssh-\u003e10.60.0.83:50275 (ESTABLISHED)\rhexo 2403 root 12u IPv4 19352 0t0 TCP *:http (LISTEN) ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:2","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","lsof","linux"],"content":"2.3.查找用户打开的文件 查看root用户打开的文件，这里只列出几条。 [root@localhost lai]# lsof -u root | head\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rsystemd 1 root cwd DIR 253,0 4096 128 /\rsystemd 1 root rtd DIR 253,0 4096 128 /\rsystemd 1 root txt REG 253,0 1494168 25320299 /usr/lib/systemd/systemd\rsystemd 1 root mem REG 253,0 20032 16818278 /usr/lib64/libuuid.so.1.3.0\rsystemd 1 root mem REG 253,0 252696 16993728 /usr/lib64/libblkid.so.1.1.0\rsystemd 1 root mem REG 253,0 90632 16850739 /usr/lib64/libz.so.1.2.7\rsystemd 1 root mem REG 253,0 19888 16850823 /usr/lib64/libattr.so.1.1.0\rsystemd 1 root mem REG 253,0 19520 17265237 /usr/lib64/libdl-2.17.so\rsystemd 1 root mem REG 253,0 153192 17265284 /usr/lib64/liblzma.so.5.0.99 ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:3","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","lsof","linux"],"content":"2.4.列出在某个端口运行的进程 我们来看一下80端口的进程是什么 [root@localhost lai]# lsof -i:80\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rhexo 2403 root 12u IPv4 19352 0t0 TCP *:http (LISTEN) ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:4","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","lsof","linux"],"content":"2.5.查看22-80端口之间所有的进程 [root@localhost lai]# lsof -i:22-80\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rdhclient 645 root 6u IPv4 15146 0t0 UDP *:bootpc dhclient 646 root 6u IPv4 15157 0t0 UDP *:bootpc sshd 893 root 3u IPv4 16017 0t0 TCP *:ssh (LISTEN)\rsshd 893 root 4u IPv6 16026 0t0 TCP *:ssh (LISTEN)\rmaster 2167 root 13u IPv4 17452 0t0 TCP localhost:smtp (LISTEN)\rmaster 2167 root 14u IPv6 17453 0t0 TCP localhost:smtp (LISTEN)\rsshd 2326 root 3u IPv4 18608 0t0 TCP localhost.localdomain:ssh-\u003e10.60.0.83:50275 (ESTABLISHED)\rhexo 2403 root 12u IPv4 19352 0t0 TCP *:http (LISTEN) ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:5","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","lsof","linux"],"content":"2.6.只列出使用 IPv4 的打开文件 貌似查出来的结果和上面2.4是一样的，呵呵！ [root@localhost lai]# lsof -i 4\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rdhclient 645 root 6u IPv4 15146 0t0 UDP *:bootpc dhclient 645 root 20u IPv4 15102 0t0 UDP *:19897 dhclient 646 root 6u IPv4 15157 0t0 UDP *:bootpc dhclient 646 root 20u IPv4 15099 0t0 UDP *:35689 sshd 893 root 3u IPv4 16017 0t0 TCP *:ssh (LISTEN)\rmaster 2167 root 13u IPv4 17452 0t0 TCP localhost:smtp (LISTEN)\rsshd 2326 root 3u IPv4 18608 0t0 TCP localhost.localdomain:ssh-\u003e10.60.0.83:50275 (ESTABLISHED)\rhexo 2403 root 12u IPv4 19352 0t0 TCP *:http (LISTEN) ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:6","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","lsof","linux"],"content":"2.7.只列出使用 IPv6 的打开文件 [root@localhost lai]# lsof -i 6\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rdhclient 645 root 21u IPv6 15103 0t0 UDP *:24534 dhclient 646 root 21u IPv6 15100 0t0 UDP *:19897 sshd 893 root 4u IPv6 16026 0t0 TCP *:ssh (LISTEN)\rmysqld 2077 mysql 10u IPv6 17561 0t0 TCP *:mysql (LISTEN)\rmaster 2167 root 14u IPv6 17453 0t0 TCP localhost:smtp (LISTEN) ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:7","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","lsof","linux"],"content":"2.8.根据进程pid列出打开的文件 [root@localhost lai]# ps -ef | grep python\rroot 892 1 0 08:56 ? 00:00:00 /usr/bin/python -Es /usr/sbin/tuned -l -P\rroot 2696 2347 0 09:56 pts/1 00:00:00 grep --color=auto python\r[root@localhost lai]# lsof -p 892 | head\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rtuned 892 root cwd DIR 253,0 4096 128 /\rtuned 892 root rtd DIR 253,0 4096 128 /\rtuned 892 root txt REG 253,0 7136 8664647 /usr/bin/python2.7\rtuned 892 root mem REG 253,0 68192 16850769 /usr/lib64/libbz2.so.1.0.6\rtuned 892 root mem REG 253,0 91496 17265291 /usr/lib64/libelf-0.163.so\rtuned 892 root mem REG 253,0 19888 16850823 /usr/lib64/libattr.so.1.1.0\rtuned 892 root mem REG 253,0 88720 16818313 /usr/lib64/libgcc_s-4.8.5-20150702.so.1\rtuned 892 root mem REG 253,0 297464 16850856 /usr/lib64/libdw-0.163.so\rtuned 892 root mem REG 253,0 20024 16850782 /usr/lib64/libcap.so.2.22 ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:8","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","lsof","linux"],"content":"2.9.根据进程名称列出打开的文件 [root@localhost lai]# lsof -c mysqld | head\rCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME\rmysqld_sa 1416 root cwd DIR 253,0 4096 2364161 /usr/local/mysql\rmysqld_sa 1416 root rtd DIR 253,0 4096 128 /\rmysqld_sa 1416 root txt REG 253,0 960392 9678252 /usr/bin/bash\rmysqld_sa 1416 root mem REG 253,0 61928 17265253 /usr/lib64/libnss_files-2.17.so\rmysqld_sa 1416 root mem REG 253,0 106065056 17282745 /usr/lib/locale/locale-archive\rmysqld_sa 1416 root mem REG 253,0 2112384 17265230 /usr/lib64/libc-2.17.so\rmysqld_sa 1416 root mem REG 253,0 19520 17265237 /usr/lib64/libdl-2.17.so\rmysqld_sa 1416 root mem REG 253,0 174520 16850722 /usr/lib64/libtinfo.so.5.9\rmysqld_sa 1416 root mem REG 253,0 164440 17557084 /usr/lib64/ld-2.17.so ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:9","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","lsof","linux"],"content":"2.10.只显示pid [root@localhost lai]# lsof -t -u mysql 2077 ","date":"2016-10-19","objectID":"https://daizelai.github.io/posts/linux/lsof/:2:10","tags":["原创","lsof","linux"],"title":"linux之lsof的使用","uri":"https://daizelai.github.io/posts/linux/lsof/"},{"categories":["原创","php","随机数"],"content":"php生成8位随机数,php生成指定长度的随机数。","date":"2016-10-18","objectID":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/","tags":["原创","php","随机数"],"title":"php生成8位随机数","uri":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["原创","php","随机数"],"content":"一、描述 在php中使用随机数 ","date":"2016-10-18","objectID":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/:1:0","tags":["原创","php","随机数"],"title":"php生成8位随机数","uri":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["原创","php","随机数"],"content":"二、随机数 ","date":"2016-10-18","objectID":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/:2:0","tags":["原创","php","随机数"],"title":"php生成8位随机数","uri":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["原创","php","随机数"],"content":"2.1.使用str_shuffle+substr产生8位随机数 $rand = substr(str_shuffle('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'),0,8); echo $rand; F97VObtg ","date":"2016-10-18","objectID":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/:2:1","tags":["原创","php","随机数"],"title":"php生成8位随机数","uri":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["原创","php","随机数"],"content":"2.2.使用rand+pow生成8位随机数 function generate_code($length = 4) { return rand(pow(10,($length-1)), pow(10,$length)-1); } echo generate_code(8); echo \"\u003cbr /\u003e\"; echo rand(pow(10,(8-1)), pow(10, 8)-1); 56469421 70479736 ","date":"2016-10-18","objectID":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/:2:2","tags":["原创","php","随机数"],"title":"php生成8位随机数","uri":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["原创","php","随机数"],"content":"2.3.使用mt_rand生成8位随机数 echo \"\u003cbr /\u003e\"; echo \"\u003cbr /\u003e\"; $a = mt_rand(10000000,99999999); $b = mt_rand(10000000,99999999); echo $a; echo \"\u003cbr /\u003e\"; echo $a.$b; 36816416 3681641615139555 ","date":"2016-10-18","objectID":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/:2:3","tags":["原创","php","随机数"],"title":"php生成8位随机数","uri":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["原创","php","随机数"],"content":"2.4.使用range生成不定长度的随机数 $tmp = range(1,30); echo implode(\"\", array_rand($tmp,10)); 051319212225262829 ","date":"2016-10-18","objectID":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/:2:4","tags":["原创","php","随机数"],"title":"php生成8位随机数","uri":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["原创","php","随机数"],"content":"2.5.使用rand生成不定长度的位随机数 echo rand(); echo \"\u003cbr /\u003e\"; echo rand(5, 15); 6135 8 ","date":"2016-10-18","objectID":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/:2:5","tags":["原创","php","随机数"],"title":"php生成8位随机数","uri":"https://daizelai.github.io/posts/php/php%E7%94%9F%E6%88%908%E4%BD%8D%E9%9A%8F%E6%9C%BA%E6%95%B0/"},{"categories":["原创","php","json"],"content":"php获取不到post的json数据的问题","date":"2016-10-17","objectID":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/","tags":["原创","php","json"],"title":"php获取不到post的json数据的问题","uri":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","php","json"],"content":"一、描述 php获取post方式的json数据 ","date":"2016-10-17","objectID":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/:1:0","tags":["原创","php","json"],"title":"php获取不到post的json数据的问题","uri":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","php","json"],"content":"二、开始 ","date":"2016-10-17","objectID":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/:2:0","tags":["原创","php","json"],"title":"php获取不到post的json数据的问题","uri":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","php","json"],"content":"2.1.在做平安wifi认证时，对方说会首先post过来数据，请求格式为json： { \"openid\": \"4100009820006\", \"openkey\": \"331224145d4a4bdb8e239cc57e6e010e\", \"ip\": \"127.0.0.1\", \"ssid\": \"testSSID\" } ","date":"2016-10-17","objectID":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/:2:1","tags":["原创","php","json"],"title":"php获取不到post的json数据的问题","uri":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","php","json"],"content":"2.2.但在test服务器看日志是没有数据的 [ 2016-10-17T15:27:49+08:00 ] /cmps/admin.php/api/login | ERR: array ( ) ","date":"2016-10-17","objectID":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/:2:2","tags":["原创","php","json"],"title":"php获取不到post的json数据的问题","uri":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","php","json"],"content":"2.3.在网关中抓包又是可以看到数据的 网关查看post报文 ","date":"2016-10-17","objectID":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/:2:3","tags":["原创","php","json"],"title":"php获取不到post的json数据的问题","uri":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","php","json"],"content":"2.4.问题解决 经过好长一段时间才找到了问题所在，原来在PHP中是不能直接获取post过来的json数据的，PHP 默认只识别 application/x-www.form-urlencoded 标准的数据类型，因此对型如 text/xml 或者 soap 或者 application/octet-stream 之类的内容无法解析，如果用 $_POST 数组来接收就会失败，故保留原型，交给 $GLOBALS[‘HTTP_RAW_POST_DATA’] 来接收。 可以通过下面两种方式来获取。 1.使用file_get_contents(\"php://input\") $post = file_get_contents(\"php://input\"); log::write(var_export($post,true)); 日志中查看结果： [ 2016-10-17T15:27:49+08:00 ] /cmps/admin.php/api/login | ERR: '{\"openid\":\"410003803000 8\",\"openkey\":\"b983a837a3204b89bc6585905cd7f6ef\",\"ip\":\"172.16.135.140\",\"ssid\":\"00000003\"}' 2.使用$GLOBALS['HTTP_RAW_POST_DATA'] log::write(var_export($GLOBALS['HTTP_RAW_POST_DATA'],true)); 日志中查看结果： [ 2016-10-17T15:27:49+08:00 ] /cmps/admin.php/api/login | ERR: '{\"openid\":\"410003803000 8\",\"openkey\":\"b983a837a3204b89bc6585905cd7f6ef\",\"ip\":\"172.16.135.140\",\"ssid\":\"00000003\"}' ","date":"2016-10-17","objectID":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/:2:4","tags":["原创","php","json"],"title":"php获取不到post的json数据的问题","uri":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","php","json"],"content":"2.5.正常post数据 正常的post方式的报文和上面json格式查看是不一样的，可以看到报文是在url下面那一行查看到的。 105 4.863426 10.60.0.37 115.29.9.167 TCP 493 52864 → 80 [PSH, ACK] Seq=213 Ack=26 Win=64215 Len=439 查询post方式的报文 ","date":"2016-10-17","objectID":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/:2:5","tags":["原创","php","json"],"title":"php获取不到post的json数据的问题","uri":"https://daizelai.github.io/posts/php/php%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0post%E7%9A%84json%E6%95%B0%E6%8D%AE%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","linux"],"content":"Linux下netstat使用手记，刚刚简单的看了一下windows下面使用netstat命令，这里主要是讲在linux环境下操作netstat命令的方法。","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"Linux下netstat命令的简单使用记录，这里以CentOS7为基础。 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:0:0","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"一、netstat命令说明 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:1:0","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"1.1.netstat常用参数介绍 netstat有很多参数，下面列表每个参数的说明。 -a或--all：显示所有连线中的Socket； -A\u003c网络类型\u003e或--\u003c网络类型\u003e：列出该网络类型连线中的相关地址； -c或--continuous：持续列出网络状态； -C或--cache：显示路由器配置的快取信息； -e或--extend：显示网络其他相关信息； -F或--fib：显示FIB； -g或--groups：显示多重广播功能群组组员名单； -h或--help：在线帮助； -i或--interfaces：显示网络界面信息表单； -l或--listening：显示监控中的服务器的Socket； -M或--masquerade：显示伪装的网络连线； -n或--numeric：直接使用ip地址，而不通过域名服务器； -N或--netlink或--symbolic：显示网络硬件外围设备的符号连接名称； -o或--timers：显示计时器； -p或--programs：显示正在使用Socket的程序识别码和程序名称； -r或--route：显示Routing Table； -s或--statistice：显示网络工作信息统计表； -t或--tcp：显示TCP传输协议的连线状况； -u或--udp：显示UDP传输协议的连线状况； -v或--verbose：显示指令执行过程； -V或--version：显示版本信息； -w或--raw：显示RAW传输协议的连线状况； -x或--unix：此参数的效果和指定\"-A unix\"参数相同； --ip或--inet：此参数的效果和指定\"-A inet\"参数相同。 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:1:1","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"二、netstat常用命令介绍 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:0","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.1.列出所有端口 netstat -a列出所有的端口，包括监听和未监听的，这里lai因为觉得太多了，只选其中一部分。 [root@localhost _posts]# netstat -a Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:http 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:ssh 0.0.0.0:* LISTEN tcp 0 0 localhost:smtp 0.0.0.0:* LISTEN tcp 0 52 localhost.localdoma:ssh 10.60.0.95:50661 ESTABLISHED tcp6 0 0 [::]:mysql [::]:* LISTEN tcp6 0 0 [::]:ssh [::]:* LISTEN tcp6 0 0 localhost:smtp [::]:* LISTEN udp 0 0 0.0.0.0:hid 0.0.0.0:* udp 0 0 0.0.0.0:32605 0.0.0.0:* udp 0 0 0.0.0.0:bootpc 0.0.0.0:* udp 0 0 0.0.0.0:bootpc 0.0.0.0:* udp6 0 0 [::]:32605 [::]:* udp6 0 0 [::]:9149 [::]:* raw6 0 0 [::]:ipv6-icmp [::]:* 7 raw6 0 0 [::]:ipv6-icmp [::]:* 7 Active UNIX domain sockets (servers and established) Proto RefCnt Flags Type State I-Node Path unix 12 [ ] DGRAM 6655 /dev/log unix 2 [ ACC ] STREAM LISTENING 17477 public/flush unix 2 [ ACC ] STREAM LISTENING 18565 /tmp/ssh-8fkRgZJdUc/agent.2336 unix 2 [ ACC ] STREAM LISTENING 11011 /run/systemd/private unix 2 [ ACC ] STREAM LISTENING 13574 /var/run/dbus/system_bus_socket unix 2 [ ACC ] STREAM LISTENING 17492 public/showq unix 2 [ ACC ] STREAM LISTENING 11025 /run/lvm/lvmetad.socket unix 2 [ ] DGRAM 11071 /run/systemd/shutdownd unix 2 [ ACC ] STREAM LISTENING 11078 /run/lvm/lvmpolld.socket unix 2 [ ACC ] SEQPACKET LISTENING 11093 /run/udev/control ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:1","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.2.列出所有TCP端口 使用netstat -at列出所有TCP端口，a是所有端口，t表示tcp的意思 [root@localhost _posts]# netstat -at Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:http 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:ssh 0.0.0.0:* LISTEN tcp 0 0 localhost:smtp 0.0.0.0:* LISTEN tcp 0 52 localhost.localdoma:ssh 10.60.0.95:50661 ESTABLISHED tcp6 0 0 [::]:mysql [::]:* LISTEN tcp6 0 0 [::]:ssh [::]:* LISTEN tcp6 0 0 localhost:smtp [::]:* LISTEN ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:2","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.3.列出所有 udp 端口 使用netstat -au列出所有TCP端口，a是所有端口，u表示udp的意思 [root@localhost _posts]# netstat -au Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State udp 0 0 0.0.0.0:hid 0.0.0.0:* udp 0 0 0.0.0.0:32605 0.0.0.0:* udp 0 0 0.0.0.0:bootpc 0.0.0.0:* udp 0 0 0.0.0.0:bootpc 0.0.0.0:* udp6 0 0 [::]:32605 [::]:* udp6 0 0 [::]:9149 [::]:* ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:3","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.4.列出所有处于监听状态的 Sockets netstat -l只显示监听端口。 [root@localhost _posts]# netstat -l Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:http 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:ssh 0.0.0.0:* LISTEN tcp 0 0 localhost:smtp 0.0.0.0:* LISTEN tcp6 0 0 [::]:mysql [::]:* LISTEN tcp6 0 0 [::]:ssh [::]:* LISTEN tcp6 0 0 localhost:smtp [::]:* LISTEN udp 0 0 0.0.0.0:hid 0.0.0.0:* udp 0 0 0.0.0.0:32605 0.0.0.0:* udp 0 0 0.0.0.0:bootpc 0.0.0.0:* udp 0 0 0.0.0.0:bootpc 0.0.0.0:* udp6 0 0 [::]:32605 [::]:* udp6 0 0 [::]:9149 [::]:* raw6 0 0 [::]:ipv6-icmp [::]:* 7 raw6 0 0 [::]:ipv6-icmp [::]:* 7 Active UNIX domain sockets (only servers) Proto RefCnt Flags Type State I-Node Path unix 2 [ ACC ] STREAM LISTENING 17477 public/flush unix 2 [ ACC ] STREAM LISTENING 18565 /tmp/ssh-8fkRgZJdUc/agent.2336 unix 2 [ ACC ] STREAM LISTENING 11011 /run/systemd/private unix 2 [ ACC ] STREAM LISTENING 13574 /var/run/dbus/system_bus_socket ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:4","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.5.列出所有处于监听状态的tcp端口 netstat -lt列出所有处于监听状态的tcp端口。 [root@localhost _posts]# netstat -lt Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:http 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:ssh 0.0.0.0:* LISTEN tcp 0 0 localhost:smtp 0.0.0.0:* LISTEN tcp6 0 0 [::]:mysql [::]:* LISTEN tcp6 0 0 [::]:ssh [::]:* LISTEN tcp6 0 0 localhost:smtp [::]:* LISTEN ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:5","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.6.列出所有处于监听状态的udp端口 netstat -lu列出所有处于监听状态的udp端口。 [root@localhost _posts]# netstat -lu Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State udp 0 0 0.0.0.0:hid 0.0.0.0:* udp 0 0 0.0.0.0:32605 0.0.0.0:* udp 0 0 0.0.0.0:bootpc 0.0.0.0:* udp 0 0 0.0.0.0:bootpc 0.0.0.0:* udp6 0 0 [::]:32605 [::]:* udp6 0 0 [::]:9149 [::]:* ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:6","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.7.列出所有处于监听状态的unix端口 netstat -lx列出所有处于监听状态的unix端口。 [root@localhost _posts]# netstat -lx Active UNIX domain sockets (only servers) Proto RefCnt Flags Type State I-Node Path unix 2 [ ACC ] STREAM LISTENING 17477 public/flush unix 2 [ ACC ] STREAM LISTENING 18565 /tmp/ssh-8fkRgZJdUc/agent.2336 unix 2 [ ACC ] STREAM LISTENING 11011 /run/systemd/private unix 2 [ ACC ] STREAM LISTENING 13574 /var/run/dbus/system_bus_socket ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:7","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.8.显示每个协议的统计信息 使用netstat -s显示所有端口的统计信息，-st显示TCP端口的统计信息，-su显示UDP端口的统计信息。 [root@localhost _posts]# netstat -s Ip: 33816 total packets received 0 forwarded 0 incoming packets discarded 33031 incoming packets delivered 3135 requests sent out Icmp: 3 ICMP messages received 0 input ICMP message failed. ICMP input histogram: echo requests: 3 48 ICMP messages sent 0 ICMP messages failed ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:8","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.9.在netstat输出中显示 PID 和进程名称 [root@localhost _posts]# netstat -pt Active Internet connections (w/o servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 52 localhost.localdoma:ssh 10.60.0.95:50661 ESTABLISHED 2336/sshd: root@pts ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:9","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.10.在netstat输出中不显示主机，端口和用户名(host, port or user) 使用netstat -n。将会使用数字代替那些名称。同样可以加速输出，因为不用进行比对查询。 [root@localhost _posts]# netstat -a Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:http 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:ssh 0.0.0.0:* LISTEN 使用netstat -an可以看到，http换成了80显示了。 [root@localhost _posts]# netstat -an Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:25 0.0.0.0:* LISTEN 如果不想显示其中一项的话，可以像下面这样操作： [root@localhost _posts]# netstat -a --numeric-ports [root@localhost _posts]# netstat -a --numeric-hosts [root@localhost _posts]# netstat -a --numeric-users ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:10","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.11.查看3306端口是否被占用 通过netstat -tnl | grep 3306命令查看3306端口是否已被占用。 [root@worker4 ~]# netstat -tnl | grep 3306 tcp 0 0 :::3306 :::* LISTEN 当然如果是root用户，还可以像下面这样使用，可以看到PID。 [root@worker4 ~]# netstat -pnl | grep 3306 tcp 0 0 :::3306 :::* LISTEN 1299/mysqld [root@work ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:11","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.12.显示路由信息 使用netstat -r可以显示路由的信息。 [root@localhost _posts]# netstat -r Kernel IP routing table Destination Gateway Genmask Flags MSS Window irtt Iface default gateway 0.0.0.0 UG 0 0 0 enp0s3 default gateway 0.0.0.0 UG 0 0 0 enp0s8 10.0.2.0 0.0.0.0 255.255.255.0 U 0 0 0 enp0s3 dc.gbcom.com.cn gateway 255.255.255.255 UGH 0 0 0 enp0s8 10.60.0.0 0.0.0.0 255.255.0.0 U 0 0 0 enp0s8 172.17.0.0 0.0.0.0 255.255.0.0 U 0 0 0 docker0 使用-rn参数显示数字格式，不查询主机名称，此命令同route -n命令输出结果一样。 [root@localhost _posts]# netstat -rn Kernel IP routing table Destination Gateway Genmask Flags MSS Window irtt Iface 0.0.0.0 10.0.2.2 0.0.0.0 UG 0 0 0 enp0s3 0.0.0.0 10.60.1.254 0.0.0.0 UG 0 0 0 enp0s8 10.0.2.0 0.0.0.0 255.255.255.0 U 0 0 0 enp0s3 10.1.1.249 10.60.1.254 255.255.255.255 UGH 0 0 0 enp0s8 10.60.0.0 0.0.0.0 255.255.0.0 U 0 0 0 enp0s8 172.17.0.0 0.0.0.0 255.255.0.0 U 0 0 0 docker0 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:12","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.13.持续输出netstat信息 netstat -c // 每隔一秒输出网络信息 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:13","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.14.显示系统不支持的地址族(Address Families) netstat --verbose // 显示系统不支持的地址族(Address Families) ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:14","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.15.找出程序运行的端口 使用netstat -ap | grep ssh我们可以看到SSH程序运行的端口为50661。 [root@localhost _posts]# netstat -ap | grep ssh tcp 0 0 0.0.0.0:ssh 0.0.0.0:* LISTEN 896/sshd tcp 0 52 localhost.localdoma:ssh 10.60.0.95:50661 ESTABLISHED 2336/sshd: root@pts tcp6 0 0 [::]:ssh [::]:* LISTEN 896/sshd unix 2 [ ACC ] STREAM LISTENING 18565 2336/sshd: root@pts /tmp/ssh-8fkRgZJdUc/agent.2336 unix 2 [ ] DGRAM 18558 2336/sshd: root@pts unix 3 [ ] STREAM CONNECTED 15920 896/sshd ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:15","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.16.找出运行在指定端口的进程 这里我们来试着查找一下使用80端口的进程是什么。 [root@localhost _posts]# netstat -an | grep ':80' tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:16","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"2.17.显示网络接口列表 使用netstat -i可以查看到网络接口的列表。 [root@localhost _posts]# netstat -i Kernel Interface table Iface MTU RX-OK RX-ERR RX-DRP RX-OVR TX-OK TX-ERR TX-DRP TX-OVR Flg docker0 1500 0 0 0 0 0 0 0 0 BMU enp0s3 1500 1 0 0 0 9 0 0 0 BMRU enp0s8 1500 202335 0 1 0 6884 0 0 0 BMRU lo 65536 0 0 0 0 0 0 0 0 LRU 如果加上-e参数的话，得到的结果和ifconfig命令是类似的。 [root@localhost _posts]# netstat -ie Kernel Interface table docker0: flags=4099\u003cUP,BROADCAST,MULTICAST\u003e mtu 1500 inet 172.17.0.1 netmask 255.255.0.0 broadcast 0.0.0.0 ether 02:42:32:a4:5c:15 txqueuelen 0 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 enp0s3: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e mtu 1500 inet 10.0.2.15 netmask 255.255.255.0 broadcast 10.0.2.255 inet6 fe80::a00:27ff:feb9:ac71 prefixlen 64 scopeid 0x20\u003clink\u003e ether 08:00:27:b9:ac:71 txqueuelen 1000 (Ethernet) RX packets 1 bytes 590 (590.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 9 bytes 966 (966.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 enp0s8: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e mtu 1500 inet 10.60.0.84 netmask 255.255.0.0 broadcast 10.60.255.255 inet6 fe80::a00:27ff:fe36:439f prefixlen 64 scopeid 0x20\u003clink\u003e ether 08:00:27:36:43:9f txqueuelen 1000 (Ethernet) RX packets 203172 bytes 17266502 (16.4 MiB) RX errors 0 dropped 1 overruns 0 frame 0 TX packets 6921 bytes 6129272 (5.8 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73\u003cUP,LOOPBACK,RUNNING\u003e mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10\u003chost\u003e loop txqueuelen 0 (Local Loopback) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:17","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"三、使用netstat进行IP和TCP分析 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:3:0","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"3.1.查看mysqld进程数 可以通过netstat -anpo | grep \"mysqld\" | wc -l 命令查看mysqld服务的进程数 [root@localhost _posts]# netstat -anpo | grep \"mysqld\" | wc -l 2 这里可以通过ps aux | grep mysqld命令查看对比一上，除却本身的grep进程，得到的结果也为2（3-1）。 [root@localhost _posts]# ps aux | grep mysqld root 1413 0.0 0.0 115248 204 ? S 09:16 0:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/usr/local/mysql/data --pid-file=/usr/local/mysql/data/localhost.localdomain.pid mysql 2102 0.0 30.0 978972 228272 ? Sl 09:16 0:07 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/usr/local/mysql/data/localhost.localdomain.err --pid-file=/usr/local/mysql/data/localhost.localdomain.pid root 2744 0.0 0.1 112664 976 pts/1 R+ 13:32 0:00 grep --color=auto mysqld [root@localhost _posts]# ps aux | grep mysqld | wc -l 3 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:3:1","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"3.2.查看连接某服务端口最多的的IP地址 通过netstat命令来查看一下访问80端口最多的IP地址是多少。 [root@worker4 ~]# netstat -ntu | grep :80 | awk '{print $5}' | cut -d: -f1 | awk '{++ip[$1]} END {for(i in ip) print ip[i],\"\\t\",i}' | sort -nr 13 1 127.0.0.1 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:3:2","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"3.3.TCP各种状态列表 查看TCP状态列表 [root@worker4 ~]# netstat -nt | grep -e 127.0.0.1 -e 0.0.0.0 -e ::: -v | awk '/^tcp/ {++state[$NF]} END {for(i in state) print i,\"\\t\",state[i]}' ESTABLISHED 12 TIME_WAIT 10 [root@worker4 ~]# netstat -n | awk '/^tcp/ {++S[$NF]};END {for(a in S) print a, S[a]}' ESTABLISHED 16 TIME_WAIT 24 [root@worker4 ~]# [root@worker4 ~]# netstat -n | awk '/^tcp/ {++state[$NF]}; END {for(key in state) print key,\"\\t\",state[key]}' ESTABLISHED 16 TIME_WAIT 24 [root@worker4 ~]# netstat -n | awk '/^tcp/ {++arr[$NF]};END {for(k in arr) print k,\"\\t\",arr[k]}' ESTABLISHED 16 TIME_WAIT 22 [root@worker4 ~]# [root@worker4 ~]# netstat -n |awk '/^tcp/ {print $NF}' |sort|uniq -c|sort -rn 24 TIME_WAIT 16 ESTABLISHED [root@worker4 ~]# netstat -ant | awk '{print $NF}' | grep -v '[a-z]' | sort | uniq -c 16 ESTABLISHED 29 LISTEN 24 TIME_WAIT 查看网络连接状态，这里是指所有的连接状态。 [root@worker4 ~]# netstat -nt |awk '{print $6}' |sort|uniq -c|sort -nr 22 TIME_WAIT 16 ESTABLISHED 1 Foreign 1 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:3:3","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"3.4.查找请求数大于20个IP（常用于查找攻来源） 方式一 [root@AY131018133441986ba1Z ~]# netstat -anlp|grep 80|grep tcp|awk '{print $5}'|awk -F: '{print $1}'|sort|uniq -c|sort -nr|head -n20 237 127.0.0.1 126 115.29.172.248 97 10.141.3.102 63 115.60.17.12 57 218.206.234.162 45 171.15.63.212 36 115.171.81.189 35 219.72.202.138 34 113.133.55.9 31 122.5.45.122 27 221.226.65.107 27 117.141.240.39 26 39.180.40.11 26 221.203.158.70 26 123.161.200.9 26 111.20.145.10 25 39.180.42.105 25 220.249.195.227 25 220.188.179.221 25 1.193.27.80 方式二 [root@AY131018133441986ba1Z ~]# netstat -ant |awk '/:80/{split($5,ip,\":\");++A[ip[1]]}END{for(i in A) print A[i],i}' |sort -rn|head -n20 153 115.29.172.248 60 221.226.65.107 53 218.206.234.162 52 113.133.55.9 44 115.171.81.189 43 171.15.63.212 37 219.72.202.138 35 223.85.196.193 34 221.203.158.70 30 61.185.32.68 28 183.237.188.141 28 180.168.191.195 27 101.4.137.78 25 39.190.27.130 25 39.180.42.105 25 39.180.40.11 25 36.149.116.233 25 36.149.116.138 25 220.249.195.227 25 218.205.57.7 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:3:4","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"3.5.查找较多time_wait连接 [root@worker4 ~]# netstat -n|grep TIME_WAIT|awk '{print $5}'|sort|uniq -c|sort -rn|head -n20 5 ::ffff:10.60.0.182:9000 2 10.60.1.7:27017 2 10.60.0.182:27017 1 ::ffff:127.0.0.1:39209 1 ::ffff:127.0.0.1:39206 1 ::ffff:127.0.0.1:39201 1 ::ffff:127.0.0.1:39198 1 ::ffff:127.0.0.1:39193 1 ::ffff:127.0.0.1:39189 1 ::ffff:127.0.0.1:39188 1 ::ffff:127.0.0.1:39183 1 ::ffff:127.0.0.1:39180 1 ::ffff:127.0.0.1:39173 1 ::ffff:127.0.0.1:39171 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:3:5","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"3.6.找查较多的SYN连接 因为本地没有SYN，所以去test上面执行了一把。 -bash-3.2# netstat -an | grep SYN | awk '{print $5}' | awk -F: '{print $1}' | sort | uniq -c | sort -nr | more 1 123.151.40.40 ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:3:6","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"3.7.根据端口列进程 [root@worker4 ~]# netstat -ntlp | grep 3306 | awk '{print $7}' | cut -d/ -f1 1299 [root@worker4 ~]# ps -ef | grep mysqld root 318 27378 0 16:03 pts/0 00:00:00 grep mysqld root 1083 1 0 Jul22 ? 00:00:00 /bin/sh /usr/bin/mysqld_safe --datadir=/var/lib/mysql --socket=/var/lib/mysql/mysql.sock --pid-file=/var/run/mysqld/mysqld.pid --basedir=/usr --user=mysql mysql 1299 1083 0 Jul22 ? 01:48:31 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib/mysql/plugin --user=mysql --log-error=/var/log/mysqld.log --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/lib/mysql/mysql.sock ","date":"2016-10-14","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:3:7","tags":["原创","linux","netstat"],"title":"Linux下netstat使用手记","uri":"https://daizelai.github.io/posts/linux/linux%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"windows下netstat使用手记，netstat的一些简单使用。","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":" windows下netstat命令的简单使用记录。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:0:0","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"一、windows下使用 windows下面查看所有端口，然后找到对应的端口和PID。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:1:0","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"1.1.查看netstat的帮助信息# D:\\server\\php5625\u003enetstat /? 显示协议统计和当前 TCP/IP 网络连接。 NETSTAT [-a] [-b] [-e] [-f] [-n] [-o] [-p proto] [-r] [-s] [-t] [interval] -a 显示所有连接和侦听端口。 -b 显示在创建每个连接或侦听端口时涉及的可执行程序。 在某些情况下，已知可执行程序承载多个独立的 组件，这些情况下，显示创建连接或侦听端口时涉 及的组件序列。此情况下，可执行程序的名称 位于底部[]中，它调用的组件位于顶部，直至达 到 TCP/IP。注意，此选项可能很耗时，并且在您没有 足够权限时可能失败。 -e 显示以太网统计。此选项可以与 -s 选项结合使用。 -f 显示外部地址的完全限定域名(FQDN)。 -n 以数字形式显示地址和端口号。 -o 显示拥有的与每个连接关联的进程 ID。 -p proto 显示 proto 指定的协议的连接；proto 可以是下列任 何一个: TCP、UDP、TCPv6 或 UDPv6。如果与 -s 选 项一起用来显示每个协议的统计，proto 可以是下列任 何一个: IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 UDPv6。 -r 显示路由表。 -s 显示每个协议的统计。默认情况下，显示 IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6 的统计；-p 选项可用于指定默认的子网。 -t 显示当前连接卸载状态。 interval 重新显示选定的统计，各个显示间暂停的间隔秒数。 按 CTRL+C 停止重新显示统计。如果省略，则 netstat 将打印当前的配置信息一次。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:1:1","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"1.2.使用netstat命令，通过参数ano来查看，如下所示。 D:\\server\\php5625\u003enetstat -ano 活动连接 协议 本地地址 外部地址 状态 PID TCP 0.0.0.0:80 0.0.0.0:0 LISTENING 1828 TCP 0.0.0.0:135 0.0.0.0:0 LISTENING 784 TCP 0.0.0.0:445 0.0.0.0:0 LISTENING 4 TCP 0.0.0.0:3306 0.0.0.0:0 LISTENING 2004 TCP 10.60.0.95:80 10.60.0.37:51285 TIME_WAIT 0 TCP 10.60.0.95:80 10.60.0.37:51291 TIME_WAIT 0 TCP 10.60.0.95:139 0.0.0.0:0 LISTENING 4 TCP 10.60.0.95:57064 10.60.0.251:22 ESTABLISHED 6728 TCP 10.60.0.95:57099 52.34.158.152:443 ESTABLISHED 6912 TCP 127.0.0.1:4300 0.0.0.0:0 LISTENING 6280 TCP 127.0.0.1:10000 0.0.0.0:0 LISTENING 4144 TCP 127.0.0.1:57143 127.0.0.1:12000 TIME_WAIT 0 TCP [::]:80 [::]:0 LISTENING 1828 TCP [::1]:57125 [::1]:3306 TIME_WAIT 0 TCP [::1]:57135 [::1]:3306 TIME_WAIT 0 TCP [::1]:57137 [::1]:3306 TIME_WAIT 0 UDP 0.0.0.0:12000 *:* 1928 UDP 0.0.0.0:49152 *:* 388 UDP 0.0.0.0:49158 *:* 2648 UDP 0.0.0.0:53701 *:* 3548 UDP 0.0.0.0:62334 *:* 6280 UDP 0.0.0.0:63011 *:* 6280 UDP 0.0.0.0:63012 *:* 6280 UDP 10.60.0.95:137 *:* 4 UDP 10.60.0.95:138 *:* 4 UDP [::]:12000 *:* 1928 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:1:2","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"二、windows下面查看端口占用情况 D:\\server\\php5625\u003enetstat -ano | findstr \"3306\" TCP 0.0.0.0:3306 0.0.0.0:0 LISTENING 2004 TCP [::]:3306 [::]:0 LISTENING 2004 TCP [::1]:57114 [::1]:3306 TIME_WAIT 0 TCP [::1]:57125 [::1]:3306 TIME_WAIT 0 最后一列2004为PID，可以看到3306端口被PID为2004占用。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:2:0","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"三、windows下查看该PID对应的进程名称 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:3:0","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"3.1.使用命令tasklist配全findstr使用 D:\\server\\php5625\u003etasklist | findstr \"2004\" mysqld.exe 2004 Services 0 46,056 K 通过查找，可以看到PID为2004对应的进程名字为mysqld.exe，也就是MySQL服务。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:3:1","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"3.2.通过任务管理器查看进程名称 打开任务管理器，在任务管理器中管理PID 在任务管理器中调出PID 通过上面查询到的PID，找出对应的应用程序名。 在任务管理器中查看进程名 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:3:2","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"四、netstat基础使用 netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:4:0","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"4.1.-a参数的使用 netstat -a ——本选项显示一个所有的有效连接信息列表，包括已建立的连接（ESTABLISHED ），也包括监听连接请求（LISTENING ）的那些连接，断开连接（CLOSE_WAIT ）或者处于联机等待状态的（TIME_WAIT ）等。 d:\\server\\php5625\u003enetstat -a 活动连接 Proto Local Address Foreign Address State 协议 本地地址 外部地址 状态 TCP 0.0.0.0:80 layne-PC:0 LISTENING TCP 0.0.0.0:135 layne-PC:0 LISTENING TCP 0.0.0.0:3306 layne-PC:0 LISTENING TCP 0.0.0.0:12000 layne-PC:0 LISTENING TCP 0.0.0.0:27017 layne-PC:0 LISTENING TCP 10.60.0.95:80 10.60.0.37:43128 TIME_WAIT TCP 10.60.0.95:80 10.60.0.37:47779 TIME_WAIT TCP 10.60.0.95:80 10.60.0.37:52219 FIN_WAIT_2 TCP 10.60.0.95:80 10.60.0.37:52220 FIN_WAIT_2 TCP 10.60.0.95:80 10.60.0.37:52232 TIME_WAIT TCP 10.60.0.95:80 10.60.0.37:52240 TIME_WAIT TCP 10.60.0.95:49257 mail:imaps ESTABLISHED TCP 10.60.0.95:49452 101.227.160.102:https ESTABLISHED TCP 10.60.0.95:50447 110.76.20.11:http CLOSE_WAIT TCP 10.60.0.95:50661 10.60.0.84:ssh ESTABLISHED TCP 10.60.0.95:50717 mail:imaps ESTABLISHED TCP 10.60.0.95:50718 mail:imaps ESTABLISHED TCP 10.60.0.95:51977 151.101.36.133:https ESTABLISHED TCP 10.60.0.95:51978 151.101.36.133:https ESTABLISHED TCP 10.60.0.95:51988 33:http LAST_ACK TCP 10.60.0.95:51995 115.29.172.248:http TIME_WAIT TCP 10.60.0.95:52003 115.29.172.248:http TIME_WAIT TCP 10.60.0.95:52007 ec2-54-149-28-204:https ESTABLISHED TCP 10.60.0.95:52013 115.29.172.248:http TIME_WAIT TCP 10.60.0.95:52026 122.246.3.142:http ESTABLISHED TCP 10.60.0.95:52027 122.246.3.142:http ESTABLISHED TCP 10.60.0.95:52028 122.246.3.142:http TIME_WAIT TCP 10.60.0.95:52037 122.228.72.161:http ESTABLISHED TCP 127.0.0.1:4300 layne-PC:0 LISTENING TCP 127.0.0.1:10000 layne-PC:0 LISTENING TCP 127.0.0.1:27382 layne-PC:0 LISTENING TCP 127.0.0.1:49156 test:49157 ESTABLISHED TCP 127.0.0.1:49157 test:49156 ESTABLISHED TCP 127.0.0.1:49160 layne-PC:0 LISTENING TCP 127.0.0.1:49337 test:49336 ESTABLISHED TCP 127.0.0.1:52035 test:12000 TIME_WAIT TCP 127.0.0.1:52036 test:12000 TIME_WAIT TCP [::]:80 layne-PC:0 LISTENING TCP [::]:135 layne-PC:0 LISTENING TCP [::]:445 layne-PC:0 LISTENING TCP [::]:3306 layne-PC:0 LISTENING TCP [::]:12000 layne-PC:0 LISTENING TCP [::1]:52073 layne-PC:3306 TIME_WAIT TCP [::1]:52077 layne-PC:3306 TIME_WAIT TCP [::1]:52087 layne-PC:3306 TIME_WAIT UDP 0.0.0.0:500 *:* UDP 0.0.0.0:12000 *:* UDP 10.60.0.95:137 *:* UDP 10.60.0.95:138 *:* UDP 127.0.0.1:49159 *:* UDP 127.0.0.1:49269 *:* UDP 127.0.0.1:50144 *:* UDP 127.0.0.1:57995 *:* UDP [::]:500 *:* UDP [::]:4500 *:* UDP [::]:5355 *:* UDP [::]:12000 *:* 参数说明： 协议（Proto ）：TCP ，指是传输层通讯协议 本地机器名（Local Address ）：Eagle ，计算机名 远程机器名（Foreign Address ）： 10.60.0.37 远程端口： 43128 状态：ESTABLISHED 状态列表: LISTEN ：在监听状态中。 ESTABLISHED ：已建立联机的联机情况。 TIME_WAIT ：该联机在目前已经是等待的状态。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:4:1","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"4.2.-n参数的使用 netstat -n ——显示所有已建立的有效连接。 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:4:2","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"4.3.-e参数的使用 netstat -e ——本选项用于显示关于以太网的统计数据。它列出的项目包括传送的数据报的总字节数、错误数、删除数、数据报的数量和广播的数量。这些统计数据既有发送的数据报数量，也有接收的数据报数量。这个选项可以用来统计一些基本的网络流量。 d:\\server\\php5625\u003enetstat -e 接口统计 接收的 发送的 字节 287777080 23497644 单播数据包 224588 167300 非单播数据包 784988 876 丢弃 0 0 错误 0 0 未知协议 0 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:4:3","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"4.4.-s参数的使用 netstat -s ——本选项能够按照各个协议分别显示其统计数据。如果你的应用程序（如Web 浏览器）运行速度比较慢，或者不能显示Web 页之类的数据，那么你就可以用本选项来查看一下所显示的信息。你需要仔细查看统计数据的各行，找到出错的关键字，进而确定问题所在。 d:\\server\\php5625\u003enetstat -s IPv4 统计信息 接收的数据包 = 84163 接收的标头错误 = 0 接收的地址错误 = 10868 转发的数据报 = 0 接收的未知协议 = 3 丢弃的接收数据包 = 18813 传送的接收数据包 = 108598 输出请求 = 74737 路由丢弃 = 0 丢弃的输出数据包 = 0 输出数据包无路由 = 9 需要重新组合 = 12 重新组合成功 = 3 重新组合失败 = 0 数据报分段成功 = 0 数据报分段失败 = 0 分段已创建 = 0 IPv6 统计信息 接收的数据包 = 125795 接收的标头错误 = 0 接收的地址错误 = 120549 转发的数据报 = 0 接收的未知协议 = 0 丢弃的接收数据包 = 4678 传送的接收数据包 = 8920 输出请求 = 5144 路由丢弃 = 0 丢弃的输出数据包 = 0 输出数据包无路由 = 0 需要重新组合 = 0 重新组合成功 = 0 重新组合失败 = 0 数据报分段成功 = 0 数据报分段失败 = 0 分段已创建 = 0 ICMPv4 统计信息 已接收 已发送 消息 21 7 错误 0 0 目标不可达 19 6 超时 1 0 参数问题 0 0 源抑制 0 0 重定向 0 0 回显回复 0 1 回显 1 0 时间戳 0 0 时间戳回复 0 0 地址掩码 0 0 地址掩码回复 0 0 路由器请求 0 0 路由器播发 0 0 ICMPv6 统计信息 已接收 已发送 消息 568 1387 错误 0 0 目标不可达 0 0 数据包太大 0 0 超时 0 0 参数问题 0 0 回显 0 0 回显回复 0 0 MLD 查询 0 0 MLD 报告 0 0 MLD 已完成 0 0 路由器请求 0 6 路由器播发 0 0 邻居请求 551 830 邻居播发 17 551 重定向 0 0 路由器重新编号 0 0 IPv4 的 TCP 统计信息 主动开放 = 2617 被动开放 = 445 失败的连接尝试 = 189 重置连接 = 59 当前连接 = 39 接收的分段 = 86088 发送的分段 = 68032 重新传输的分段 = 2961 IPv6 的 TCP 统计信息 主动开放 = 54 被动开放 = 54 失败的连接尝试 = 0 重置连接 = 0 当前连接 = 0 接收的分段 = 3642 发送的分段 = 3642 重新传输的分段 = 0 IPv4 的 UDP 统计信息 接收的数据报 = 3898 无端口 = 413 接收错误 = 18383 发送的数据报 = 3733 IPv6 的 UDP 统计信息 接收的数据报 = 0 无端口 = 8 接收错误 = 4670 发送的数据报 = 94 d:\\server\\php5625\u003e ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:4:4","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"4.5.-r参数显示路由表信息 netstat -r ——本选项可以显示关于路由表的信息，类似于后面所讲使用route print命令时看到的信息。除了显示有效路由外，还显示当前有效的连接。 d:\\server\\php5625\u003enetstat -r =========================================================================== 接口列表 11...74 27 ea 3a af 04 ......Realtek PCIe GBE Family Controller 1...........................Software Loopback Interface 1 =========================================================================== IPv4 路由表 =========================================================================== 活动路由: 网络目标 网络掩码 网关 接口 跃点数 0.0.0.0 0.0.0.0 10.60.1.254 10.60.0.95 20 10.60.0.0 255.255.0.0 在链路上 10.60.0.95 276 10.60.0.95 255.255.255.255 在链路上 10.60.0.95 276 10.60.255.255 255.255.255.255 在链路上 10.60.0.95 276 127.0.0.0 255.0.0.0 在链路上 127.0.0.1 306 127.0.0.1 255.255.255.255 在链路上 127.0.0.1 306 127.255.255.255 255.255.255.255 在链路上 127.0.0.1 306 224.0.0.0 240.0.0.0 在链路上 127.0.0.1 306 224.0.0.0 240.0.0.0 在链路上 10.60.0.95 276 255.255.255.255 255.255.255.255 在链路上 127.0.0.1 306 255.255.255.255 255.255.255.255 在链路上 10.60.0.95 276 =========================================================================== 永久路由: 无 IPv6 路由表 =========================================================================== 活动路由: 如果跃点数网络目标 网关 1 306 ::1/128 在链路上 11 276 fe80::/64 在链路上 11 276 fe80::3877:4dea:3379:d681/128 在链路上 1 306 ff00::/8 在链路上 11 276 ff00::/8 在链路上 =========================================================================== 永久路由: 无 ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:4:5","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","windows","netstat"],"content":"4.6.显示正在进行的工作 d:\\server\\php5625\u003enetstat -v 活动连接 协议 本地地址 外部地址 状态 TCP 10.60.0.95:80 10.60.0.37:35676 TIME_WAIT TCP 10.60.0.95:80 10.60.0.37:35681 TIME_WAIT TCP 10.60.0.95:49257 mail:imaps ESTABLISHED TCP 10.60.0.95:49452 101.227.160.102:https ESTABLISHED TCP 10.60.0.95:50447 110.76.20.11:http CLOSE_WAIT TCP 10.60.0.95:50661 10.60.0.84:ssh ESTABLISHED TCP 10.60.0.95:50717 mail:imaps ESTABLISHED TCP 10.60.0.95:50718 mail:imaps ESTABLISHED TCP 10.60.0.95:50719 mail:imaps ESTABLISHED TCP 10.60.0.95:52074 221.228.75.133:http CLOSE_WAIT TCP 10.60.0.95:52329 203.208.51.66:http TIME_WAIT ","date":"2016-10-13","objectID":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/:4:6","tags":["原创","windows","netstat"],"title":"windows下netstat使用手记","uri":"https://daizelai.github.io/posts/windows/windows%E4%B8%8Bnetstat%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/"},{"categories":["原创","linux"],"content":"linux下的进程管理，这里主要是在centos系统中的操作，其它linux也大同小异，可根据实际情况来操作。","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"一、查看进程 ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:1:0","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"1.1.ps之aux查看所有进程 在这里直接使用ps aux查看当前系统中所有的进程情况，当然ps -ef也是可以使用的。 [root@localhost lai]# ps aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.3 43904 2672 ? Ss 08:58 0:01 /usr/lib/systemd/systemd --switched-root --system -- root 2 0.0 0.0 0 0 ? S 08:58 0:00 [kthreadd] root 3 0.0 0.0 0 0 ? S 08:58 0:00 [ksoftirqd/0] root 6 0.0 0.0 0 0 ? S 08:58 0:00 [kworker/u2:0] root 7 0.0 0.0 0 0 ? S 08:58 0:00 [migration/0] root 8 0.0 0.0 0 0 ? S 08:58 0:00 [rcu_bh] root 9 0.0 0.0 0 0 ? S 08:58 0:00 [rcuob/0] ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:1:1","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"1.2.ps之aux只查看httpd进程 使用如下命令查看httpd的进程。 [root@localhost lai]# ps aux | grep httpd root 690 0.0 0.0 341176 652 ? Ss 08:58 0:00 /usr/local/apache/bin/httpd -k start daemon 691 0.0 0.2 341312 2044 ? S 08:58 0:00 /usr/local/apache/bin/httpd -k start daemon 692 0.0 0.2 341312 2216 ? S 08:58 0:00 /usr/local/apache/bin/httpd -k start daemon 693 0.0 0.0 341176 300 ? S 08:58 0:00 /usr/local/apache/bin/httpd -k start daemon 694 0.0 0.0 341176 300 ? S 08:58 0:00 /usr/local/apache/bin/httpd -k start daemon 695 0.0 0.0 341176 300 ? S 08:58 0:00 /usr/local/apache/bin/httpd -k start daemon 2362 0.0 0.2 341176 2144 ? S 09:34 0:00 /usr/local/apache/bin/httpd -k start root 2378 0.0 0.1 112664 976 pts/0 R+ 09:36 0:00 grep --color=auto httpd ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:1:2","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"1.3.ps之ef只查看httpd进程 使用-ef参数同样可以查看指定的进程 [root@localhost lai]# ps -ef | grep httpd root 690 1 0 08:58 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 691 690 0 08:58 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 692 690 0 08:58 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 693 690 0 08:58 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 694 690 0 08:58 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 695 690 0 08:58 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 2362 690 0 09:34 ? 00:00:00 /usr/local/apache/bin/httpd -k start root 2376 2303 0 09:36 pts/0 00:00:00 grep --color=auto httpd ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:1:3","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"1.4.pgrep命令查看httpd的PID 如果只是想查看某个进程的PID，可以使用pgrep命令。 [root@localhost lai]# pgrep httpd 690 691 692 693 694 695 2362 ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:1:4","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"1.5.使用pidof查看进程PID 还有pidof也是可以查看进程的PID的，怎么样，是不是感觉linux命令很强大。 [root@localhost lai]# pidof httpd 2362 695 694 693 692 691 690 pidof = pid of xx，字面意思翻译过来就是xx的PID。 和pgrep相比稍显不足的是，pidof必须给出进程的全名。 ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:1:5","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"二、杀死进程 ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:2:0","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"2.1.使用kill杀进程 kill -s 9 691 其中-s 9 制定了传递给进程的信号是９，即强制、尽快终止进程。 ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:2:1","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"2.2.kill和awk组合使用 当然，还可以把查看出来的PID直接作为kill的参数来使用。 [root@localhost lai]# ps -ef | grep httpd root 2826 1 0 10:26 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 2827 2826 0 10:26 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 2828 2826 0 10:26 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 2829 2826 0 10:26 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 2830 2826 0 10:26 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 2831 2826 0 10:26 ? 00:00:00 /usr/local/apache/bin/httpd -k start root 2833 2303 0 10:26 pts/0 00:00:00 grep --color=auto httpd [root@localhost lai]# kill -s 9 `ps aux | grep httpd | awk '{print $2}'` -bash: kill: (2640) - 没有那个进程 [root@localhost lai]# ps -ef | grep httpd root 2644 2303 0 10:00 pts/0 00:00:00 grep --color=auto httpd ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:2:2","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"2.3.kill和pgrep组合使用 当然使用pgrep也是可以的 [root@localhost lai]# pgrep httpd 2678 2679 2680 2681 2682 2683 [root@localhost lai]# kill -s 9 `pgrep httpd` [root@localhost lai]# pgrep httpd ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:2:3","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"2.4.组合命令xargs kill杀进程 上面的相对来讲简单，这里来一个稍微复杂点的组合命令。 [root@localhost lai]# ps -ef | grep httpd | grep -v grep | cut -c 9-15 690 691 692 693 694 695 2362 [root@localhost lai]# ps -ef | grep httpd | grep -v grep | cut -c 9-15 | xargs kill -s 9 [root@localhost lai]# ps -ef | grep httpd root 2412 2303 0 09:44 pts/0 00:00:00 grep --color=auto httpd 说明： “grep firefox” 的意思为，所有含有关键字“firefox”的进程。 “grep -v grep” 的意思为，在列出的进程中去除含有关键字“grep”的进程。 “cut -c 9-15” 的意思为，截取输入行的第9个字符到第15个字符，而这正好是进程号PID。 “xargs kill -s 9” 中的xargs命令是用来把前面命令的输出结果（PID）作为“kill -s 9”命令的参数，并执行该命令。“kill -s 9”会强行杀掉指定进程。 ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:2:4","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"2.5.pgrep配置组合命令xargs kill杀进程 使用pgrep直接杀死进程，是不是更简单呢？ [root@localhost lai]# pgrep httpd 2477 2478 2479 2480 2481 2482 [root@localhost lai]# pgrep httpd | xargs kill -s 9 [root@localhost lai]# pgrep httpd ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:2:5","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"2.6.使用awk配合xargs kill杀死进程 还可以使用强大的awk配置xargs来杀死进程。 [root@localhost lai]# ps -ef | grep httpd root 2598 1 0 09:55 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 2599 2598 0 09:55 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 2600 2598 0 09:55 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 2601 2598 0 09:55 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 2602 2598 0 09:55 ? 00:00:00 /usr/local/apache/bin/httpd -k start daemon 2603 2598 0 09:55 ? 00:00:00 /usr/local/apache/bin/httpd -k start root 2605 2303 0 09:55 pts/0 00:00:00 grep --color=auto httpd [root@localhost lai]# ps -ef | grep httpd | awk '{print $2}' | xargs kill -9 kill: 向 2607 发送信号失败: 没有那个进程 下面那个提示向 2607 发送信号失败: 没有那个进程，是因为grep httpd时有一个进程，每次grep httpd产生的PID是不一样的，而且该进程本身是没有的，所以有那个提示，这个只是lai自己的见解，^_^。 ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:2:6","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"2.7.使用改进版的pkill来杀死所有进程 pkill可以理解为pgrep+kill。 [root@localhost lai]# pgrep httpd 2702 2703 2704 2705 2706 2707 [root@localhost lai]# pkill -9 httpd [root@localhost lai]# pgrep httpd 参数说明： \"-9\" 即发送的信号是9。 pkill与kill在这点的差别是：pkill无须 “ｓ”，终止信号等级直接跟在 “-“ 后面。 pkill或者pgrep只要给出进程名的一部分就可以终止进程。如： [root@localhost lai]# pkill -9 http ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:2:7","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"2.8.使用更好的killall来杀死进程 killall和pkill是相似的,不过如果给出的进程名不完整，killall会报错 [root@localhost lai]# pgrep httpd 2750 2751 2752 2753 2754 2755 [root@localhost lai]# killall -9 httpd [root@localhost lai]# pgrep httpd ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:2:8","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"三、killall: 未找到命令 ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:3:0","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"3.1.如果提示killall: 未找到命令则需要安装killall命令： [root@localhost lai]# kill kill: 用法:kill [-s 信号声明 | -n 信号编号 | -信号声明] 进程号 | 任务声明 ... 或 kill -l [信号声明] [root@localhost lai]# killall -bash: killall: 未找到命令 ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:3:1","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"3.2.安装killall命令 centos或、rhel系统下 [root@localhost lai]# yum install psmisc Running transaction 正在安装 : psmisc-22.20-9.el7.x86_64 1/1 验证中 : psmisc-22.20-9.el7.x86_64 1/1 已安装: psmisc.x86_64 0:22.20-9.el7 完毕！ debian、ubuntu系统下 [root@localhost lai]# apt-get install psmisc 安装好以后，可以看到 [root@localhost lai]# killall Usage: killall [-Z 上下文] [-u 用户名] [ -eIgiqrvw ] [ -信号 ] 程序名... killall -l, --list killall -V, --version -e,--exact require exact match for very long names -I,--ignore-case case insensitive process name match -g,--process-group kill process group instead of process -y,--younger-than kill processes younger than TIME -o,--older-than kill processes older than TIME -i,--interactive ask for confirmation before killing -l,--list list all known signal names -q,--quiet don't print complaints -r,--regexp interpret NAME as an extended regular expression -s,--signal SIGNAL send this signal instead of SIGTERM -u,--user USER kill only process(es) running as USER -v,--verbose report if the signal was successfully sent -V,--version display version information -w,--wait wait for processes to die -Z,--context 正则表达式 仅杀死含有指定上下文的进程 (必须在其他参数前使用) ","date":"2016-10-11","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/:3:2","tags":["原创","linux","进程管理"],"title":"linux之进程管理","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"categories":["mysql","procedure"],"content":"mysql存储过程的简单使用，记录一下，方便下次使用忘记了。","date":"2016-10-09","objectID":"https://daizelai.github.io/posts/mysql/procedure/","tags":["原创","mysql","数据库","procedure"],"title":"mysql之存储过程","uri":"https://daizelai.github.io/posts/mysql/procedure/"},{"categories":["mysql","procedure"],"content":"查看存储过程 mysql\u003e show procedure status; ","date":"2016-10-09","objectID":"https://daizelai.github.io/posts/mysql/procedure/:1:0","tags":["原创","mysql","数据库","procedure"],"title":"mysql之存储过程","uri":"https://daizelai.github.io/posts/mysql/procedure/"},{"categories":["mysql","procedure"],"content":"查看存储过程内容 查看某一个存储过程的内容 mysql\u003e show create procedure updateHotspot_pro; ","date":"2016-10-09","objectID":"https://daizelai.github.io/posts/mysql/procedure/:2:0","tags":["原创","mysql","数据库","procedure"],"title":"mysql之存储过程","uri":"https://daizelai.github.io/posts/mysql/procedure/"},{"categories":["原创","sftp","linux"],"content":"Linux系统下sftp的简单使用","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/linux/sftp/","tags":["原创","sftp","linux"],"title":"Linux之sftp使用","uri":"https://daizelai.github.io/posts/linux/sftp/"},{"categories":["原创","sftp","linux"],"content":"一、下载文件 将从远程主机的 /var/www/layne/ 目录下将 index.php 下载到本地 /home/layne/ 目录下。 sftp\u003e get /var/www/layne/index.php /home/layne/ ","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/linux/sftp/:1:0","tags":["原创","sftp","linux"],"title":"Linux之sftp使用","uri":"https://daizelai.github.io/posts/linux/sftp/"},{"categories":["原创","sftp","linux"],"content":"二、上传文件 把本地 /home/layne/downloads/ 目录下的 test.pdf文件上传至远程主机 /var/www/layne/ 目录下 sftp\u003e put /home/layne/downloads/test.pdf /var/www/layne/ ","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/linux/sftp/:2:0","tags":["原创","sftp","linux"],"title":"Linux之sftp使用","uri":"https://daizelai.github.io/posts/linux/sftp/"},{"categories":["原创","sftp","linux"],"content":"三、示例 sftp\u003e put -r /home/fuyatao/downloads/Linuxgl.pdf /var/www/html/ sftp\u003e lcd d:/php/webroot/Edu/ sftp\u003e pwd sftp\u003e put pic.png ./ ","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/linux/sftp/:3:0","tags":["原创","sftp","linux"],"title":"Linux之sftp使用","uri":"https://daizelai.github.io/posts/linux/sftp/"},{"categories":["mysql","数据库","mysqldump"],"content":"我是一个MySql数据库导入导出的笔记","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqldump/","tags":["原创","mysql","数据库","mysqldump"],"title":"mysql数据库导入导出","uri":"https://daizelai.github.io/posts/mysql/mysqldump/"},{"categories":["mysql","数据库","mysqldump"],"content":"一、数据库导入导出 ","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqldump/:1:0","tags":["原创","mysql","数据库","mysqldump"],"title":"mysql数据库导入导出","uri":"https://daizelai.github.io/posts/mysql/mysqldump/"},{"categories":["mysql","数据库","mysqldump"],"content":"1.导出数据库 # mysqldump -u root -p 数据库名\u003e文件名.sql ","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqldump/:1:1","tags":["原创","mysql","数据库","mysqldump"],"title":"mysql数据库导入导出","uri":"https://daizelai.github.io/posts/mysql/mysqldump/"},{"categories":["mysql","数据库","mysqldump"],"content":"2.导入数据库 # mysql -u root -p;use 数据库名;source 文件名.sql; ","date":"2016-10-08","objectID":"https://daizelai.github.io/posts/mysql/mysqldump/:1:2","tags":["原创","mysql","数据库","mysqldump"],"title":"mysql数据库导入导出","uri":"https://daizelai.github.io/posts/mysql/mysqldump/"},{"categories":["mysql"],"content":"mysql提示“performance_schema.session_status”问题解决，mysql问题解决。","date":"2016-09-13","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%8F%90%E7%A4%BAperformance-schema-session-status/","tags":["原创","mysql"],"title":"mysql提示performance-schema-session-status","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%8F%90%E7%A4%BAperformance-schema-session-status/"},{"categories":["mysql"],"content":"Mysql提示“performance_schema.session_status doesn’t exist” ","date":"2016-09-13","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%8F%90%E7%A4%BAperformance-schema-session-status/:0:0","tags":["原创","mysql"],"title":"mysql提示performance-schema-session-status","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%8F%90%E7%A4%BAperformance-schema-session-status/"},{"categories":["mysql"],"content":"一、问题的前世今生 开始Web环境为XP 32位系统中的php5.3.5+Apache2.2+mysql5.6.24组合，后来因为换成Win7 64位，Web环境又换成了php5625+Apache2.4+mysql5.7.14。 为了图方便，直接把之前的Mysql5.6的data拷贝过来Mysql5.7使用，于是出现此问题。 ","date":"2016-09-13","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%8F%90%E7%A4%BAperformance-schema-session-status/:1:0","tags":["原创","mysql"],"title":"mysql提示performance-schema-session-status","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%8F%90%E7%A4%BAperformance-schema-session-status/"},{"categories":["mysql"],"content":"二、问题说明 在php中使用代码执行SQL语句是没有问题的，但在navicat工具中使用查询语句就会有以下问题： 截图效果： 查询语句提示performance_schema.session_status doesn’t exist问题 错误如下所示： [Err] 1146 - Table 'performance_schema.session_status' doesn't exist ","date":"2016-09-13","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%8F%90%E7%A4%BAperformance-schema-session-status/:2:0","tags":["原创","mysql"],"title":"mysql提示performance-schema-session-status","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%8F%90%E7%A4%BAperformance-schema-session-status/"},{"categories":["mysql"],"content":"三、解决方案 经过一系列的深究发现是因为mysql5.6的data和mysql5.7的data因为版本不一致导致。 解决方法： 1.执行“mysql_upgrade.exe -u root -p –force” D:\\server\\mysql5714\\bin\u003emysql_upgrade.exe -u root -p --force ........ ucenter.uc_sqlcache OK ucenter.uc_tags OK ucenter.uc_vars OK Upgrade process completed successfully. Checking if update is needed. 2.然后再重启Mysql服务 重启Mysql服务 D:\\server\\mysql5714\\bin\u003enet stop mysql MySQL 服务正在停止.. MySQL 服务已成功停止。 D:\\server\\mysql5714\\bin\u003enet start mysql MySQL 服务正在启动 . MySQL 服务已经启动成功。 3.查看执行query效果 修复后的效果 ","date":"2016-09-13","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%8F%90%E7%A4%BAperformance-schema-session-status/:3:0","tags":["原创","mysql"],"title":"mysql提示performance-schema-session-status","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%8F%90%E7%A4%BAperformance-schema-session-status/"},{"categories":["mysql","数据库"],"content":"mysql创建数据库时指定utf-8字符集，同时还可以修改mysql数据库的字符编码，详情请往内查看。","date":"2016-09-07","objectID":"https://daizelai.github.io/posts/mysql/mysql/","tags":["原创","mysql","数据库","数据库编码"],"title":"mysql创建utf8字符集数据库","uri":"https://daizelai.github.io/posts/mysql/mysql/"},{"categories":["mysql","数据库"],"content":"一、MySQL新建数据库语法 CREATE DATABASE 的语法： CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name [create_specification [, create_specification] ...] create_specification: [DEFAULT] CHARACTER SET charset_name | [DEFAULT] COLLATE collation_name ","date":"2016-09-07","objectID":"https://daizelai.github.io/posts/mysql/mysql/:0:1","tags":["原创","mysql","数据库","数据库编码"],"title":"mysql创建utf8字符集数据库","uri":"https://daizelai.github.io/posts/mysql/mysql/"},{"categories":["mysql","数据库"],"content":"二、新建数据使用示例 CREATE DATABASE db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; ","date":"2016-09-07","objectID":"https://daizelai.github.io/posts/mysql/mysql/:0:2","tags":["原创","mysql","数据库","数据库编码"],"title":"mysql创建utf8字符集数据库","uri":"https://daizelai.github.io/posts/mysql/mysql/"},{"categories":["mysql","数据库"],"content":"三、更改数据库的字符编码 ALTER DATABASE db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ","date":"2016-09-07","objectID":"https://daizelai.github.io/posts/mysql/mysql/:0:3","tags":["原创","mysql","数据库","数据库编码"],"title":"mysql创建utf8字符集数据库","uri":"https://daizelai.github.io/posts/mysql/mysql/"},{"categories":["mysql"],"content":"mysql关于mysql_attr_init_command错误的修复。","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"一、问题描述 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:1:0","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"1.1.打开Web时出现如下问题：mysql_attr_init_command Mysql错误-MSYQL_ATTR_INIT_COMMAND ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:1:1","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"1.2.看了一下项目的配置，是使用mysqli配置的 项目中连接mysql配置 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:1:2","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"二、查看服务器的环境配置 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:2:0","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"2.1.首先看了一下phpinfo中的配置 phpinfo配置 在配置中没有看到mysqli这一项扩展。 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:2:1","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"2.2.在服务器中查看php的扩展 [root@edu local]# php -m [PHP Modules] bz2 calendar Core ctype curl date dom ereg exif fileinfo filter ftp gd gettext gmp hash iconv json libxml mbstring memcache mysql 在这里也没有看到mysqli扩展，意思就是没有这个扩展，需要安装了。 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:2:2","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"三、安装php扩展 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:3:0","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"3.1.命令行安装扩展 在命令行中安装扩展，如下所示： [root@edu html]# yum install php5-mysqli 第一次使用这种命令时出现错误： [root@edu html]# yum install php5-mysqli Loaded plugins: fastestmirror Setting up Install Process Loading mirror speeds from cached hostfile * base: mirrors.163.com * epel: ftp.cuhk.edu.hk * extras: mirrors.aliyun.com * updates: mirrors.cn99.com No package php5-mysqli available. Error: Nothing to do 第二次安装： [root@edu html]# yum install php-mysqli Loaded plugins: fastestmirror Setting up Install Process Loading mirror speeds from cached hostfile * base: mirrors.163.com * epel: ftp.cuhk.edu.hk * extras: mirrors.aliyun.com * updates: mirrors.cn99.com Resolving Dependencies --\u003e Running transaction check ---\u003e Package php-mysql.x86_64 0:5.3.3-48.el6_8 will be installed --\u003e Processing Dependency: php-common(x86-64) = 5.3.3-48.el6_8 for package: php-mysql-5.3.3-48.el6_8.x86_64 --\u003e Running transaction check ---\u003e Package php-common.x86_64 0:5.3.3-47.el6 will be updated --\u003e Processing Dependency: php-common(x86-64) = 5.3.3-47.el6 for package: php-snmp-5.3.3-47.el6.x86_64 --\u003e Processing Dependency: php-common(x86-64) = 5.3.3-47.el6 for package: php-xml-5.3.3-47.el6.x86_64 --\u003e Processing Dependency: php-common(x86-64) = 5.3.3-47.el6 for package: php-xmlrpc-5.3.3-47.el6.x86_64 --\u003e Processing Dependency: php-common(x86-64) = 5.3.3-47.el6 for package: php-pdo-5.3.3-47.el6.x86_64 --\u003e Processing Dependency: php-common(x86-64) = 5.3.3-47.el6 for package: php-mbstring-5.3.3-47.el6.x86_64 --\u003e Processing Dependency: php-common(x86-64) = 5.3.3-47.el6 for package: php-pspell-5.3.3-47.el6.x86_64 --\u003e Processing Dependency: php-common(x86-64) = 5.3.3-47.el6 for package: php-cli-5.3.3-47.el6.x86_64 ....省略.... Installed: php-mysql.x86_64 0:5.3.3-48.el6_8 Dependency Updated: php.x86_64 0:5.3.3-48.el6_8 php-cli.x86_64 0:5.3.3-48.el6_8 php-common.x86_64 0:5.3.3-48.el6_8 php-devel.x86_64 0:5.3.3-48.el6_8 php-gd.x86_64 0:5.3.3-48.el6_8 php-mbstring.x86_64 0:5.3.3-48.el6_8 php-pdo.x86_64 0:5.3.3-48.el6_8 php-pspell.x86_64 0:5.3.3-48.el6_8 php-snmp.x86_64 0:5.3.3-48.el6_8 php-xml.x86_64 0:5.3.3-48.el6_8 php-xmlrpc.x86_64 0:5.3.3-48.el6_8 Complete! [root@edu html]# ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:3:1","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"3.2.使用phpinfo查看是否安装成功 phpinfo() ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:3:2","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"3.3.使用命令行查看是否安装成功 [root@edu local]# php -m [PHP Modules] ....lai省略..... gd gettext gmp hash iconv json libxml mbstring memcache mysql mysqli ....lai省略..... ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:3:3","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"四、查看Web效果 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:4:0","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"4.1.使用phpinfo查看mysqli扩展是否安装成功 查看mysqli是否安装成功 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:4:1","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"4.2.访问Web界面查看效果 访问Web页面效果 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/:4:2","tags":["原创","mysql","mysql问题修复"],"title":"mysql_attr_init_command错误","uri":"https://daizelai.github.io/posts/mysql/mysql_attr_init_command%E9%94%99%E8%AF%AF/"},{"categories":["mysql"],"content":"mysql导入数据库后乱码的问题的解决。","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/","tags":["原创","mysql","数据库乱码"],"title":"mysql导入数据库后乱码的问题","uri":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["mysql"],"content":"Mysql导入数据库后乱码问题 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":["原创","mysql","数据库乱码"],"title":"mysql导入数据库后乱码的问题","uri":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["mysql"],"content":"一、Web乱码 在容器中install好les项目后，打开Web却发现菜单是乱码 数据乱码 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/:1:0","tags":["原创","mysql","数据库乱码"],"title":"mysql导入数据库后乱码的问题","uri":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["mysql"],"content":"二、修改Mysql配置 1）、修改mysql配置 找到数据库的配置文件，增加**[client]配置编码utf8**，[mysqld]中同时增加init_connect=‘SET NAMES utf8’，修改如下： [root@les /]# vim /etc/my.cnf [client] default-character-set=utf8 [mysqld] character_set_server=utf8 init_connect='SET NAMES utf8' datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock user=mysql # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 [mysqld_safe] log-error=/var/log/mysqld.log pid-file=/var/run/mysqld/mysqld.pid 2）、重启服务 /etc/init.d/mysqld restart /etc/init.d/httpd restart ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/:2:0","tags":["原创","mysql","数据库乱码"],"title":"mysql导入数据库后乱码的问题","uri":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["mysql"],"content":"三、解决乱码 1.这个时候刷新Web发现还是乱码，那就是数据源有问题了，说明导入到数据库里的数据就是乱码，打开数据库一看果然如此，接着往下走。 2.卸载掉les项目，重新安装。 ./gbc100_v1.1.bin uninstall lebds_UI /var/www/html lebds ./gbc100_v1.1.bin install lebds_UI /var/www/html lebds 3.打开Web页面，发现问题已解决。 数据乱码 ","date":"2016-09-06","objectID":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/:3:0","tags":["原创","mysql","数据库乱码"],"title":"mysql导入数据库后乱码的问题","uri":"https://daizelai.github.io/posts/mysql/mysql%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","linux","centos"],"content":"在virtualbox虚拟机中安装ubuntu系统。","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/virtualbox/vmware%E5%AE%89%E8%A3%85centos%E5%90%8E%E9%85%8D%E7%BD%AEssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/","tags":["原创","linux","centos"],"title":"VMware安装CentOS后配置SSH远程连接的问题","uri":"https://daizelai.github.io/posts/virtualbox/vmware%E5%AE%89%E8%A3%85centos%E5%90%8E%E9%85%8D%E7%BD%AEssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","linux","centos"],"content":"可以SSH连接，但虚拟机CentOS不能连接外网，呜呜呜呜！！！ ","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/virtualbox/vmware%E5%AE%89%E8%A3%85centos%E5%90%8E%E9%85%8D%E7%BD%AEssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":["原创","linux","centos"],"title":"VMware安装CentOS后配置SSH远程连接的问题","uri":"https://daizelai.github.io/posts/virtualbox/vmware%E5%AE%89%E8%A3%85centos%E5%90%8E%E9%85%8D%E7%BD%AEssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","linux","centos"],"content":"一、安装VM的虚拟网卡（网络连接） 1.安装绿色版的VMware，安装好后，网络连接里是只有**本地连接**的。 “默认的本地连接” 2.在VMware中安装CentOS系统 “VM的网络设置” 3.安装系统后，在看网络连接还是只有本地连接，这时候这样VM的虚拟网络编辑设置一下 点击VMware顶部的菜单，如下所示： “VM的虚拟网络编辑” 点击**“还原默认设置”**设置 “还原默认设置” 4.点击以后，就会有上面图片中的三个连接了。同时，网络连接也多了两块VM的网络连接： “VM的虚拟网络” **VMnet1：**Host-only共享用的虚拟连接； **VMnet8：**NAT共享用的虚拟连接。VMnet8虚拟网卡就相当于连接到内网的网卡，Host主机上的物理网卡就相当于连接到外网的网卡，而虚拟机本身则相当于运行在内网上的计算机，虚拟机内的虚拟网卡则独立于Virtual Ethernet Switch（VMnet8）。 ","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/virtualbox/vmware%E5%AE%89%E8%A3%85centos%E5%90%8E%E9%85%8D%E7%BD%AEssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/:1:0","tags":["原创","linux","centos"],"title":"VMware安装CentOS后配置SSH远程连接的问题","uri":"https://daizelai.github.io/posts/virtualbox/vmware%E5%AE%89%E8%A3%85centos%E5%90%8E%E9%85%8D%E7%BD%AEssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","linux","centos"],"content":"二、配置VM虚拟连接并SSH连接 1.右击网络连接中“VMnet8”选择“属性” 2.查看（没有就设置）TCP/IPv4的相应的IP地址和子网掩码，这里可以配置任意网段，然后点击确定按钮。 “设置VMnet8” 3.查看windows主机的具体IP地址，输入ipconfig 这里查看VMnet8的网络参数如上：IP：192.168.80.1 掩码：255.255.255.0 “查看VMnet8的参数” 4.回到配置VMware中的网络参数，选择NAT模式，并点击右侧的NAT设置 “配置NAT参数” 在弹出的对话框中进行网络的设置，这里的子网必须和windows主机中VMnet8的IP地址处于同一个网段，即192.168.80.0网段 “配置NAT参数” 这里的网关可以选择windows主机中VMnet8的IP地址处于同一个网段的任意IP地址，然后点击确定。 5.配置CentOS中的网络配置 [root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0 HWADDR=00:0C:29:CA:3C:42 TYPE=Ethernet UUID=5bd32e4a-23c2-4c5a-be0f-26ffe1297a9d ONBOOT=yes NM_CONTROLLED=yes BOOTPROTO=none NETMASK=255.255.255.0 IPADDR=192.168.80.11 DNS1=10.60.1.254 主要需要设置下面的参数： ONBOOT=yes NETMASK=255.255.255.0 // 子网掩码 IPADDR=192.168.80.11 // IP地址和VMnet8的IP地址在同一个网段 DNS1=10.60.1.254 // 主DNS服务器IP地址为windows中主机真实网关 重启网络服务 [root@localhost ~]# /etc/init.d/network restart 正在关闭接口 eth0： [确定] 关闭环回接口： [确定] 弹出环回接口： [确定] 弹出界面 eth0： Determining if ip address 192.168.80.11 is already in use for device eth0... [确定] [root@localhost ~]# ","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/virtualbox/vmware%E5%AE%89%E8%A3%85centos%E5%90%8E%E9%85%8D%E7%BD%AEssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/:2:0","tags":["原创","linux","centos"],"title":"VMware安装CentOS后配置SSH远程连接的问题","uri":"https://daizelai.github.io/posts/virtualbox/vmware%E5%AE%89%E8%A3%85centos%E5%90%8E%E9%85%8D%E7%BD%AEssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","linux","centos"],"content":"三、主机通过SSH连接虚拟系统 1.在Windows中ping虚拟系统 ping 192.168.1.11 1.此时主机通过SSH连接虚拟系统 “主机SSH连接CentOS” ","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/virtualbox/vmware%E5%AE%89%E8%A3%85centos%E5%90%8E%E9%85%8D%E7%BD%AEssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/:3:0","tags":["原创","linux","centos"],"title":"VMware安装CentOS后配置SSH远程连接的问题","uri":"https://daizelai.github.io/posts/virtualbox/vmware%E5%AE%89%E8%A3%85centos%E5%90%8E%E9%85%8D%E7%BD%AEssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","mysql","数据库"],"content":"mysql服务突然没有了，mysql的服务安装。","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/","tags":["原创","mysql","数据库"],"title":"MySql服务突然没有了","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/"},{"categories":["原创","mysql","数据库"],"content":"一、打开Web界面发现如下错误 看下图的意思是sql连接的错误，后面会单独连接MySql试试看。 MySql连接不上了 ","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/:0:1","tags":["原创","mysql","数据库"],"title":"MySql服务突然没有了","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/"},{"categories":["原创","mysql","数据库"],"content":"二、使用命令连接不上了，如下图： 1.截图如下： MySql连接不上了 2.代码如下： D:\\server\\mysql5714\\bin\u003emysql -h127.0.0.1 -uroot -p Enter password: ****** ERROR 2003 (HY000): Can't connect to MySQL server on '127.0.0.1' (10061) D:\\server\\mysql5714\\bin\u003enet start mysql 服务名无效。 请键入 NET HELPMSG 2185 以获得更多的帮助。 D:\\server\\mysql5714\\bin\u003enet mysql start 此命令的语法是: NET [ ACCOUNTS | COMPUTER | CONFIG | CONTINUE | FILE | GROUP | HELP | HELPMSG | LOCALGROUP | PAUSE | SESSION | SHARE | START | STATISTICS | STOP | TIME | USE | USER | VIEW ] ","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/:0:2","tags":["原创","mysql","数据库"],"title":"MySql服务突然没有了","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/"},{"categories":["原创","mysql","数据库"],"content":"三、计算机服务中去看，也没有MySql服务 服务中看不到MySql ","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/:0:3","tags":["原创","mysql","数据库"],"title":"MySql服务突然没有了","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/"},{"categories":["原创","mysql","数据库"],"content":"四、解决办法 1.重新安装MySql服务： D:\\server\\mysql5714\\bin\u003emysqld.exe -install Service successfully installed. D:\\server\\mysql5714\\bin\u003enet start mysql MySQL 服务正在启动 .. MySQL 服务已经启动成功。 2.再次查看一切正常 一切正常 注意： MySql5.1之前的版本： mysqld-nt.exe -install MySql5.1及后续版本： mysqld.exe -install 会出现 install/remove of the service denied! 错误—》原因，权限不够 解决方法：再次打开cmd.exe，不过这次要右击“Run as administrator”。 ","date":"2016-09-05","objectID":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/:0:4","tags":["原创","mysql","数据库"],"title":"MySql服务突然没有了","uri":"https://daizelai.github.io/posts/mysql/mysql%E6%9C%8D%E5%8A%A1%E7%AA%81%E7%84%B6%E6%B2%A1%E6%9C%89%E4%BA%86/cantconntent/"},{"categories":["原创","linux","scp"],"content":"在Linux系统中scp命令的使用，可以远程复制文件，当然也可以远程复制目录，一起来看看吧！","date":"2016-08-10","objectID":"https://daizelai.github.io/posts/linux/room/","tags":["原创","linux","scp"],"title":"Linux之scp复制远程文件","uri":"https://daizelai.github.io/posts/linux/room/"},{"categories":["原创","linux","scp"],"content":"一、语法 1.linux 的 scp 命令 可以 在 linux 之间复制 文件 和 目录； 2.scp 可以在 2个 linux 主机间复制文件； 3.命令基本格式： scp [可选参数] file_source file_target ","date":"2016-08-10","objectID":"https://daizelai.github.io/posts/linux/room/:0:1","tags":["原创","linux","scp"],"title":"Linux之scp复制远程文件","uri":"https://daizelai.github.io/posts/linux/room/"},{"categories":["原创","linux","scp"],"content":"二、从 本地 复制到 远程 复制文件： # scp /home/layne/music/1.mp3 root@test.login-wifi.com:/home/root/others/music # scp /home/layne/music/1.mp3 root@test.login-wifi.com:/home/root/others/music/001.mp3 # scp /home/layne/music/1.mp3 test.login-wifi.com:/home/root/others/music # scp /home/layne/music/1.mp3 test.login-wifi.com:/home/root/others/music/001.mp3 复制目录： # scp -r /home/layne/music/ root@test.login-wifi.com:/home/root/others/ # scp -r /home/layne/music/ test.login-wifi.com:/home/root/others/ 混合复制： [root@master pkg]# scp -r public gbc_create_bin.sh svnExportBy* root@test.login-wifi.com:/home/kevin/manage/Public/shell/pkg The authenticity of host 'test.login-wifi.com (115.29.9.167)' can't be established. RSA key fingerprint is 0f:7e:6d:b8:1c:2b:22:6a:28:3b:2a:f1:25:6c:63:cf. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'test.login-wifi.com' (RSA) to the list of known hosts. gbc1000_app_all.sh 100% 2997 2.9KB/s 00:00 gbc1000_pack_all.sh 100% 1599 1.6KB/s 00:00 gbc_create_bin.sh 100% 805 0.8KB/s 00:00 svnExportByPatch.sh 100% 2994 2.9KB/s 00:00 svnExportByTags.sh 100% 2017 2.0KB/s 00:00 [root@master pkg]# pwd /var/www/html/manage/Public/shell/pkg [root@master pkg]# ","date":"2016-08-10","objectID":"https://daizelai.github.io/posts/linux/room/:0:2","tags":["原创","linux","scp"],"title":"Linux之scp复制远程文件","uri":"https://daizelai.github.io/posts/linux/room/"},{"categories":["原创","linux","scp"],"content":"三、从 远程 复制到 本地 格式 scp 本地用户名 @IP 地址 : 文件名 1 远程用户名 @IP 地址 : 文件名 2 [ 本地用户名 @IP 地址 :] 可以不输入 , 可能需要输入远程用户名所对应的密码 . 可能有用的几个参数 : -v 和大多数linux命令中的-v意思一样,用来显示进度.可以用来查看连接,认证,或是配置错误 . -C 使能压缩选项 . -P 选择端口 . 注意 -p 已经被 rcp 使用 . -4 强行使用 IPV4 地址 . -6 强行使用 IPV6 地址 . # scp root@test.login-wifi.com:/home/root/others/music /home/layne/music/1.mp3 # scp -r test.login-wifi.com:/home/root/others/ /home/layne/music/ ","date":"2016-08-10","objectID":"https://daizelai.github.io/posts/linux/room/:0:3","tags":["原创","linux","scp"],"title":"Linux之scp复制远程文件","uri":"https://daizelai.github.io/posts/linux/room/"},{"categories":["原创","linux","scp"],"content":"四、从远程主机复制文件到本地机（亲测可用） # scp root@www.login-wifi.com:/htdocs/mem.zip /home/layne/ // 注意复制目录需要添加参数-r # scp -r root@www.login-wifi.com:/htdocs/dir /home/layne/ ","date":"2016-08-10","objectID":"https://daizelai.github.io/posts/linux/room/:0:4","tags":["原创","linux","scp"],"title":"Linux之scp复制远程文件","uri":"https://daizelai.github.io/posts/linux/room/"},{"categories":["原创","mysql","数据库"],"content":"mysql密码操作，忘记密码，重置密码等。","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","mysql","数据库"],"content":"一、mysql命令行重置密码 ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:1:0","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","mysql","数据库"],"content":"1.1.首先需要连接进入mysql mysql\u003e select user(); +---------------+ | user() | +---------------+ | root@localhost | +---------------+ 1 row in set (0.00 sec) ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:1:1","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","mysql","数据库"],"content":"1.2.重置新的密码 mysql\u003e set password for root@'localhost'=password('123456'); Query OK, 0 rows affected (0.00 sec) 让它生效 mysql\u003e flush privileges; Query OK, 0 rows affected (0.00 sec) ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:1:2","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","mysql","数据库"],"content":"二、设置mysql数据库root帐号密码 mysqladmin -u root password '新密码' ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:2:0","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","mysql","数据库"],"content":"三、 为root账户设置密码 mysql_secure_installation 回车，根据提示输入Y 输入2次密码，回车 根据提示一路输入Y 最后出现：Thanks for using MySQL! MySql密码设置完成，重新启动 MySQL： /etc/init.d/mysqld restart #重启 /etc/init.d/mysqld stop #停止 /etc/init.d/mysqld start #启动 ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:3:0","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","mysql","数据库"],"content":"四、mysql忘记密码的重置方法 ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:0","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","mysql","数据库"],"content":"4.1.编辑mysql主配置文件 my.cnf # vim /etc/my.cnf 在[mysqld]字段下的位置添加参数 skip-grant :wq //保存退出 ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:1","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","mysql","数据库"],"content":"4.2.重启数据库服务 # service mysqld restart ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:2","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","mysql","数据库"],"content":"4.3.这样就可以进入数据库不用授权了 # mysql -uroot ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:3","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","mysql","数据库"],"content":"4.4.修改相应database的用户密码 \u003e use mysql; \u003e update user set password=password('your password') where user='root'; ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:4","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","mysql","数据库"],"content":"4.5.修改/etc/my.cnf 去掉 skip-grant , 重启mysql服务 # /etc/my.cnf # service mysqld restart ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:5","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","mysql","数据库"],"content":"4.6.番外 ps：同理也可以更改其他的 如wordpress、discuz库的密码： 1，使用mysql -u -p密码，进入mysql; 2，use wordpress； 3，update wp_users set user_pass=MD5(‘新密码’) where wp_users.user_login=’用户’; 4，flush privileges; 5，退出mysql 并重启mysqld服务 ","date":"2016-08-09","objectID":"https://daizelai.github.io/posts/mysql/mysqlpassword/:4:6","tags":["原创","mysql","数据库","忘记密码"],"title":"mysql之密码学","uri":"https://daizelai.github.io/posts/mysql/mysqlpassword/"},{"categories":["原创","linux"],"content":"Linux之磁盘管理，主要为du，df命令的使用，查看当前各目录的大小情况。","date":"2016-07-29","objectID":"https://daizelai.github.io/posts/linux/linnux%E4%B9%8B%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/","tags":["原创","linux"],"title":"Linux之磁盘管理","uri":"https://daizelai.github.io/posts/linux/linnux%E4%B9%8B%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"一、描述 在linux下查看磁盘使用情况。 ","date":"2016-07-29","objectID":"https://daizelai.github.io/posts/linux/linnux%E4%B9%8B%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/:1:0","tags":["原创","linux"],"title":"Linux之磁盘管理","uri":"https://daizelai.github.io/posts/linux/linnux%E4%B9%8B%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"二、开始 ","date":"2016-07-29","objectID":"https://daizelai.github.io/posts/linux/linnux%E4%B9%8B%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/:2:0","tags":["原创","linux"],"title":"Linux之磁盘管理","uri":"https://daizelai.github.io/posts/linux/linnux%E4%B9%8B%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"2.1.查看硬盘使用情况 [root@MTX /]# df -h Filesystem Size Used Avail Use% Mounted on /dev/xvda1 20G 8.7G 10G 47% / tmpfs 1.9G 0 1.9G 0% /dev/shm /dev/xvdb1 20G 4.7G 15G 25% /alidata ","date":"2016-07-29","objectID":"https://daizelai.github.io/posts/linux/linnux%E4%B9%8B%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/:2:1","tags":["原创","linux"],"title":"Linux之磁盘管理","uri":"https://daizelai.github.io/posts/linux/linnux%E4%B9%8B%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"},{"categories":["原创","linux"],"content":"2.2.查看当前目录大小 [root@MTX html]# du -sh ./* | sort -n 1.3G ./cmps 2.1M ./jc-website 4.0K ./index.html 32K ./t.tar 60K ./zydc ","date":"2016-07-29","objectID":"https://daizelai.github.io/posts/linux/linnux%E4%B9%8B%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/:2:2","tags":["原创","linux"],"title":"Linux之磁盘管理","uri":"https://daizelai.github.io/posts/linux/linnux%E4%B9%8B%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"},{"categories":["原创","netstat"],"content":"Linux之zip、unzip文件的使用手记。","date":"2016-01-09","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8Bnetstat%E5%91%BD%E4%BB%A4/","tags":["linux","netstat","原创"],"title":"Linux之netstat命令","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8Bnetstat%E5%91%BD%E4%BB%A4/"},{"categories":["原创","netstat"],"content":"一、netstat命令介绍 在Linux使用过程中，需要了解当前系统开放了哪些端口，并且要查看开放这些端口的具体进程和用户，可以通过netstat命令进行简单查询。 netstat命令各个参数说明如下： -t : 指明显示TCP端口 -u : 指明显示UDP端口 -l : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序) -p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。 -n : 不进行DNS轮询，显示IP(可以加速操作) ","date":"2016-01-09","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8Bnetstat%E5%91%BD%E4%BB%A4/:1:0","tags":["linux","netstat","原创"],"title":"Linux之netstat命令","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8Bnetstat%E5%91%BD%E4%BB%A4/"},{"categories":["原创","netstat"],"content":"二、netstat命令简单使用 使用netstat命令即可显示当前服务器上所有端口及进程服务，于grep结合可查看某个具体端口及服务情况·· netstat -ntlp // 查看当前所有tcp端口· netstat -ntulp |grep 80 // 查看所有80端口使用情况· netstat -an | grep 3306 // 查看所有3306端口使用情况· 直接使用 netstat -anp | grep portno，即： netstat –apn | grep 8080 进一步使用命令： ps -aux | grep java ``` 或者直接： ``` ps -aux | grep pid 查看 ``` ","date":"2016-01-09","objectID":"https://daizelai.github.io/posts/linux/linux%E4%B9%8Bnetstat%E5%91%BD%E4%BB%A4/:2:0","tags":["linux","netstat","原创"],"title":"Linux之netstat命令","uri":"https://daizelai.github.io/posts/linux/linux%E4%B9%8Bnetstat%E5%91%BD%E4%BB%A4/"},{"categories":["linux","zip","压缩"],"content":"Linux之zip、unzip文件的使用手记。","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/","tags":["原创","linux","zip","unzip","压缩","解压缩"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip","压缩"],"content":"一、zip/unzip命令说明 ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:1:0","tags":["原创","linux","zip","unzip","压缩","解压缩"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip","压缩"],"content":"1.1.功能说明 将一般的文件或者目录进行压缩或者解压，默认生成以“.zip”为后缀的压缩包。zip命令类似于Windows中的winzip压缩程序。其格式如下： zip [选项] 压缩文件名 需要压缩的文档列表 unzip [选项] 压缩文件名 ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:1:1","tags":["原创","linux","zip","unzip","压缩","解压缩"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip","压缩"],"content":"1.2.zip选项含义 zip选项含义 -r 递归压缩，将指定目录下的所有文件以及子目录全部压缩 -d 从压缩文件内删除指定的文件 -i “文件列表” 只压缩文件列表中的文件 -x “文件列表” 压缩时排除文件列表中指定的文件 -u 更新文件到压缩文件中 -m 将文件加入压缩文件压缩后，删除原始文件，即把文件移到压缩文件中 -F 尝试修复损坏的压缩文件 -T 检查压缩文件内的每个文件是否正确无误 - 压缩级别 压缩级别是一个1～9的数字 ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:1:2","tags":["原创","linux","zip","unzip","压缩","解压缩"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip","压缩"],"content":"1.3.unzip选项含义 unzip选项含义 -x \"文件列表\" 解压文件，但不包含文件列表中指定的文件 -t 测试压缩文件有无损坏，并不解压 -v 查看压缩文件的详细信息，具体包括压缩文件中包含的文件大小、文件名和压缩比等，并不解压 -n 解压时不覆盖已经存在的文件 -o 解压时覆盖已经存在的文件，并且不要求用户确认 -d 目录名 把压缩文件解压到指定目录下 ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:1:3","tags":["原创","linux","zip","unzip","压缩","解压缩"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip","压缩"],"content":"二、示例 ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:2:0","tags":["原创","linux","zip","unzip","压缩","解压缩"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip","压缩"],"content":"2.1.将lai目录下所有的文件和目录压缩，压缩级别为最高，压缩的文件保存到/root/lai.zip。 [root@localhost lai]# pwd /root/lai [root@localhost lai]# ll 总用量 1024 -rwxr--r--. 1 root root 0 10月 18 11:35 index.php drwxr-xr-x. 2 root root 22 10月 18 11:36 lai_test drwxr-xr-x. 2 root root 33 10月 18 11:37 lai_test2 -rwxr--r--. 1 root root 112563 10月 18 11:35 memcache-3.0.8.zip -rwxr--r--. 1 root root 931437 10月 18 11:35 mhash-0.9.9.9.tar.gz -rwxr--r--. 1 root root 0 10月 18 11:35 test.txt [root@localhost ~]# cd /root [root@localhost ~]# zip -9r /root/lai.zip /root/lai adding: root/lai/ (stored 0%) adding: root/lai/mhash-0.9.9.9.tar.gz (deflated 1%) adding: root/lai/memcache-3.0.8.zip (deflated 13%) adding: root/lai/index.php (stored 0%) adding: root/lai/test.txt (stored 0%) adding: root/lai/lai_test/ (stored 0%) adding: root/lai/lai_test/test1.log (deflated 39%) adding: root/lai/lai_test2/ (stored 0%) adding: root/lai/lai_test2/my.cnf (deflated 44%) adding: root/lai/lai_test2/crontab (deflated 41%) 通过上面这种指定压缩绝对路径压缩出来的文件，也携带有目录结构的，也就是说解压出来第一级是root，下面才是lai目录。 直接压缩当前目录下的lai目录，解压后也就这一层目录。 [root@localhost ~]# zip -9r /root/lai.zip lai adding: lai/ (stored 0%) adding: lai/mhash-0.9.9.9.tar.gz (deflated 1%) adding: lai/memcache-3.0.8.zip (deflated 13%) adding: lai/index.php (stored 0%) adding: lai/test.txt (stored 0%) adding: lai/lai_test/ (stored 0%) adding: lai/lai_test/test1.log (deflated 39%) adding: lai/lai_test2/ (stored 0%) adding: lai/lai_test2/my.cnf (deflated 44%) adding: lai/lai_test2/crontab (deflated 41%) ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:2:1","tags":["原创","linux","zip","unzip","压缩","解压缩"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip","压缩"],"content":"2.2.将lai目录下所有的文件和子目录压缩，除了“*.txt”的文件，压缩的文件保存到/root/lai.zip。 [root@localhost ~]# zip -r /root/lai.zip /root/lai -x \"*.txt\" adding: root/lai/ (stored 0%) adding: root/lai/mhash-0.9.9.9.tar.gz (deflated 1%) adding: root/lai/memcache-3.0.8.zip (stored 0%) adding: root/lai/index.php (stored 0%) adding: root/lai/lai_test/ (stored 0%) adding: root/lai/lai_test/test1.log (deflated 39%) adding: root/lai/lai_test2/ (stored 0%) adding: root/lai/lai_test2/my.cnf (deflated 44%) adding: root/lai/lai_test2/crontab (deflated 41%) ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:2:2","tags":["原创","linux","zip","unzip","压缩","解压缩"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip","压缩"],"content":"2.3.将lai.zip压缩文件中的 不知道为什么，这里我虽然这样操作了，但把zip解压后，文件还是存在，现在放在这里吧。 [root@localhost ~]# cd test/ [root@localhost test]# zip /root/lai.zip -d /root/lai/memcache-3.0.8.zip deleting: root/lai/memcache-3.0.8.zip ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:2:3","tags":["原创","linux","zip","unzip","压缩","解压缩"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip","压缩"],"content":"2.4.把修改后的index.php文件更新到/root/lai.zip压缩文件。 [root@localhost test]# cat lai/index.php \u003c?php phpinfo(); echo \"ok\"; [root@localhost test]# zip -u lai.zip lai/index.php updating: lai/index.php (stored 0%) 如果/lai目录下很多文件进行了修改或者增加了很多文件，就需要把/lai目录下的全部信息更新到/root/lai.zip文件。可以使用以下命令： [root@localhost test]# zip –u lai.zip /lai/* 或者使用 [root@localhost test]# zip –ru lai.zip /lai 其实“/lai/*”就代表了/lai目录下的所有文件以及子目录，而这刚好是zip命令“-r”选项完成的功能。 ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:2:4","tags":["原创","linux","zip","unzip","压缩","解压缩"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["linux","zip","压缩"],"content":"2.5.根据要求解压缩文件 将/root/lai.zip压缩文件除了lai/index.php文件，全部解压到/root/test目录下，并且在解压过程中如果出现相同的文件就直接进行覆盖，不需要用户确认。可以使用以下命令： [root@localhost test]# unzip -o /root/test/lai.zip -x lai/index.php -d /root/test Archive: /root/test/lai.zip creating: /root/test/lai/ inflating: /root/test/lai/mhash-0.9.9.9.tar.gz extracting: /root/test/lai/memcache-3.0.8.zip creating: /root/test/lai/lai_test/ inflating: /root/test/lai/lai_test/test1.log inflating: /root/test/lai/lai_test/qq.txt creating: /root/test/lai/lai_test2/ inflating: /root/test/lai/lai_test2/my.cnf inflating: /root/test/lai/lai_test2/crontab extracting: /root/test/lai/test2.txt extracting: /root/test/lai/test.txt [root@localhost test]# ll lai 总用量 1032 drwxr-xr-x. 2 root root 35 10月 18 13:47 lai_test drwxr-xr-x. 2 root root 33 10月 18 11:37 lai_test2 -rwxr--r--. 1 root root 112563 10月 18 11:35 memcache-3.0.8.zip -rwxr--r--. 1 root root 931437 10月 18 11:35 mhash-0.9.9.9.tar.gz -rw-r--r--. 1 root root 9 10月 18 13:47 test2.txt -rwxr--r--. 1 root root 16 10月 18 13:47 test.txt ","date":"2015-08-08","objectID":"https://daizelai.github.io/posts/linux/zip/:2:5","tags":["原创","linux","zip","unzip","压缩","解压缩"],"title":"Linux之zip和unzip的使用","uri":"https://daizelai.github.io/posts/linux/zip/"},{"categories":["原创","memcache"],"content":"Windows下memcache常用操作的记录，先记下这么多，后面会陆陆续续把用到的添加过来。","date":"2014-12-15","objectID":"https://daizelai.github.io/posts/windows/memcache/windows%E4%B8%8Bmemcache%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","tags":["原创","memcache"],"title":"Windows下memcache操作手记","uri":"https://daizelai.github.io/posts/windows/memcache/windows%E4%B8%8Bmemcache%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["原创","memcache"],"content":"Windows下memcache常用操作 ","date":"2014-12-15","objectID":"https://daizelai.github.io/posts/windows/memcache/windows%E4%B8%8Bmemcache%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:0:0","tags":["原创","memcache"],"title":"Windows下memcache操作手记","uri":"https://daizelai.github.io/posts/windows/memcache/windows%E4%B8%8Bmemcache%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["原创","memcache"],"content":"一、修改memcache端口 1.memcache的默认端口11211 2.直接指定端口启动是无效的。 memcached -p 15000 -d start // 这样做是无效的 3.于是直接修改注册表 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\memcached Server 其中的ImagePath项的值为： \"c:\\memcached\\memcached.exe\" -d runservice 改成： \"c:\\memcached\\memcached.exe\" -p 15000 -d runservice ","date":"2014-12-15","objectID":"https://daizelai.github.io/posts/windows/memcache/windows%E4%B8%8Bmemcache%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:1:0","tags":["原创","memcache"],"title":"Windows下memcache操作手记","uri":"https://daizelai.github.io/posts/windows/memcache/windows%E4%B8%8Bmemcache%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["原创","memcache"],"content":"二、清除memcache中的缓存 1.在本地进入dos命令行 2.进入控制台 C:\\Users\\Administrator\u003etelnet localhost 11211（12000） 3.清除 flush_all OK 4.最后退出telnet使用quit命令,再exit退出远程主机 quit 遗失对主机的连接。 ","date":"2014-12-15","objectID":"https://daizelai.github.io/posts/windows/memcache/windows%E4%B8%8Bmemcache%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:2:0","tags":["原创","memcache"],"title":"Windows下memcache操作手记","uri":"https://daizelai.github.io/posts/windows/memcache/windows%E4%B8%8Bmemcache%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":null,"content":"title: “Search Results” sitemap: priority : 0.1 layout: “search” ","date":"0001-01-01","objectID":"https://daizelai.github.io/search/:1:0","tags":null,"title":"","uri":"https://daizelai.github.io/search/"},{"categories":["车载台"],"content":"温州S2号线车载台APP发起请呼业务不成功的问题","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/","tags":["车载台","车载台app","温州S2号线"],"title":"温州S2号线车载台APP发起请呼业务不成功的问题","uri":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["车载台"],"content":"温州S2号线车载台APP发起请呼业务不成功的问题 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":["车载台","车载台app","温州S2号线"],"title":"温州S2号线车载台APP发起请呼业务不成功的问题","uri":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["车载台"],"content":"一、描述 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/:1:0","tags":["车载台","车载台app","温州S2号线"],"title":"温州S2号线车载台APP发起请呼业务不成功的问题","uri":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["车载台"],"content":"问题描述 by daizelai on 2022/09/15 16:03 在车载台APP上面发起请呼调度业务，没有效果。 时间：2022/09/15 14:37 另外，昨天第一次测试车载台的请呼就没有成功的，因为上午时间有限，中午就下车了，所以今天再抓包看。 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/:1:1","tags":["车载台","车载台app","温州S2号线"],"title":"温州S2号线车载台APP发起请呼业务不成功的问题","uri":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["车载台"],"content":"抓包 请呼时在DIS上面的抓包 请呼抓包 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/:1:2","tags":["车载台","车载台app","温州S2号线"],"title":"温州S2号线车载台APP发起请呼业务不成功的问题","uri":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["车载台"],"content":"日志 这是第二次请呼抓的日志，不是和上面抓包一起的 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/:1:3","tags":["车载台","车载台app","温州S2号线"],"title":"温州S2号线车载台APP发起请呼业务不成功的问题","uri":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["车载台"],"content":"二、分析 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/:2:0","tags":["车载台","车载台app","温州S2号线"],"title":"温州S2号线车载台APP发起请呼业务不成功的问题","uri":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["车载台"],"content":"2.1.从抓包看 请呼问题抓包分析。 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/:2:1","tags":["车载台","车载台app","温州S2号线"],"title":"温州S2号线车载台APP发起请呼业务不成功的问题","uri":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["车载台"],"content":"2.2.从日志上看 从日志上看可以看到，APP发起请呼后，一直等待DIS服务器的响应，直到超时都没有收到DIS的响应。 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/:2:2","tags":["车载台","车载台app","温州S2号线"],"title":"温州S2号线车载台APP发起请呼业务不成功的问题","uri":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["车载台"],"content":"2.3.结论 DIS服务器没有回复APP的请呼业务请求。 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/:2:3","tags":["车载台","车载台app","温州S2号线"],"title":"温州S2号线车载台APP发起请呼业务不成功的问题","uri":"https://daizelai.github.io/posts/wzs2/%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0app%E5%8F%91%E8%B5%B7%E8%AF%B7%E5%91%BC%E4%B8%9A%E5%8A%A1%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","车载台"],"content":"温州S2号线车载台与DIS等连接一会好一会断的问题","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/","tags":["原创","车载台","温州S2号线","网络","GM655+","车载台app"],"title":"温州S2号线车载台与DIS等连接一会好一会断的问题","uri":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","车载台"],"content":"20220914_1646温州S2号线车载台与DIS等连接一会好一会断的问题 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":["原创","车载台","温州S2号线","网络","GM655+","车载台app"],"title":"温州S2号线车载台与DIS等连接一会好一会断的问题","uri":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","车载台"],"content":"一、描述 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/:1:0","tags":["原创","车载台","温州S2号线","网络","GM655+","车载台app"],"title":"温州S2号线车载台与DIS等连接一会好一会断的问题","uri":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","车载台"],"content":"1.1.问题描述 在开发并运行温州S2号线APP的时候，突然发现，一会能正常收到DIS回复的报文，一会又收不到，APP这边每次正常发送报文，比如心跳是每3秒准时发送。 去DIS服务器192.168.42.177上面抓包发现，APP一会上线，一会下线，并且收到的APP心跳一会是3秒，一会卫了10秒才收到。 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/:1:1","tags":["原创","车载台","温州S2号线","网络","GM655+","车载台app"],"title":"温州S2号线车载台与DIS等连接一会好一会断的问题","uri":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","车载台"],"content":"1.2.DIS服务器日志 下面是DIS服务器的日志，可以看到有一个m_Socket contains app_id(10.255.0.2) old:strOldIP(10.255.0.2):64003 -\u003e new:strNewIP(192.168.42.130):64003这样的提示，后面问题找到了这里就好理解了，是app_id为10.255.0.2的设备，一会以10.255.0.2IP连接，一会以192.168.42.130连接。其实就是两台终端都向DIS服务器发的，一台是我自己的下挂在GM655+下的终端，一台是我今天下午换到深圳14号线的EV751下的终端。 18:13:56.049 [INFO ] [dis_wz2] [AppNetworkManager.cpp:191, UpdateAppIP, pid: 6220, tid: 18044] : app save socket! app_id(10.255.0.2) IP: 192.168.42.130. Port: 64003\r18:13:56.049 [WARN ] [dis_wz2] [TaskAPP.cpp:899, OnAppGetATSInfo, pid: 6220, tid: 18044] : app is not online! app_id(10.255.0.2)\r18:13:56.998 [WARN ] [dis_wz2] [TaskAPP.cpp:899, OnAppGetATSInfo, pid: 6220, tid: 18044] : app is not online! app_id(10.255.0.2)\r18:13:56.999 [INFO ] [dis_wz2] [AppRegisterManager.cpp:87, AppOnline, pid: 6220, tid: 18044] : app id: 10.255.0.2 is online! sdk_long_num: 10000007133\r18:13:57.948 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:955, HandleSnmpMsg, pid: 6220, tid: 21700] : recv snmp msg type 160, oid is .1.3.6.1.4.1.28723.11.1.1.2.0\r18:13:57.949 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:868, SendGetSysInfoRsp, pid: 6220, tid: 21700] : send GetSysInfoRsp succ\r18:13:57.950 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:955, HandleSnmpMsg, pid: 6220, tid: 21700] : recv snmp msg type 160, oid is .1.3.6.1.4.1.28723.70.1.19.0\r18:13:57.950 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:896, SendGetSysStatusRsp, pid: 6220, tid: 21700] : send GetSysStatusRsp succ\r18:13:57.950 [INFO ] [OMA ] [ThreadOMA_Dis.cpp:1003, HandleSnmpMsg, pid: 6220, tid: 21700] : send get sys status rsp to omc\r18:13:57.950 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:955, HandleSnmpMsg, pid: 6220, tid: 21700] : recv snmp msg type 161, oid is .1.3.6.1.4.1.28723.11.1.4.10.1.5\r18:13:57.950 [INFO ] [OMA ] [ThreadOMA_Dis.cpp:1051, HandleSnmpMsg, pid: 6220, tid: 21700] : send get gateway rsp to omc\r18:13:59.048 [WARN ] [dis_wz2] [AppNetworkManager.cpp:180, UpdateAppIP, pid: 6220, tid: 18044] : m_Socket contains app_id(10.255.0.2) old:strOldIP(192.168.42.130):64003 -\u003e new:strNewIP(10.255.0.2):64003\r18:13:59.049 [INFO ] [dis_wz2] [AppNetworkManager.cpp:191, UpdateAppIP, pid: 6220, tid: 18044] : app save socket! app_id(10.255.0.2) IP: 10.255.0.2. Port: 64003\r18:14:07.939 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:955, HandleSnmpMsg, pid: 6220, tid: 21700] : recv snmp msg type 160, oid is .1.3.6.1.4.1.28723.11.1.1.2.0\r18:14:07.940 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:868, SendGetSysInfoRsp, pid: 6220, tid: 21700] : send GetSysInfoRsp succ\r18:14:07.940 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:955, HandleSnmpMsg, pid: 6220, tid: 21700] : recv snmp msg type 160, oid is .1.3.6.1.4.1.28723.70.1.19.0\r18:14:07.941 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:896, SendGetSysStatusRsp, pid: 6220, tid: 21700] : send GetSysStatusRsp succ\r18:14:07.941 [INFO ] [OMA ] [ThreadOMA_Dis.cpp:1003, HandleSnmpMsg, pid: 6220, tid: 21700] : send get sys status rsp to omc\r18:14:07.941 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:955, HandleSnmpMsg, pid: 6220, tid: 21700] : recv snmp msg type 161, oid is .1.3.6.1.4.1.28723.11.1.4.10.1.5\r18:14:07.942 [INFO ] [OMA ] [ThreadOMA_Dis.cpp:1051, HandleSnmpMsg, pid: 6220, tid: 21700] : send get gateway rsp to omc\r18:14:15.788 [WARN ] [dis_wz2] [AppNetworkManager.cpp:180, UpdateAppIP, pid: 6220, tid: 18044] : m_Socket contains app_id(10.255.0.2) old:strOldIP(10.255.0.2):64003 -\u003e new:strNewIP(192.168.42.130):64003\r18:14:15.788 [INFO ] [dis_wz2] [AppNetworkManager.cpp:191, UpdateAppIP, pid: 6220, tid: 18044] : app save socket! app_id(10.255.0.2) IP: 192.168.42.130. Port: 64003\r18:14:17.947 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:955, HandleSnmpMsg, pid: 6220, tid: 21700] : recv snmp msg type 160, oid is .1.3.6.1.4.1.28723.11.1.1.2.0\r18:14:17.948 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:868, SendGetSysInfoRsp, pid: 6220, tid: 21700] : send GetSysInfoRsp succ\r18:14:17.948 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:955, HandleSnmpMsg, pid: 6220, tid: 21700] : recv snmp msg type 160, oid is .1.3.6.1.4.1.28723.70.1.19.0\r18:14:17.949 [DETAIL] [OMA ] [ThreadOMA_Dis.cpp:896, SendGetSysStatus","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/:1:2","tags":["原创","车载台","温州S2号线","网络","GM655+","车载台app"],"title":"温州S2号线车载台与DIS等连接一会好一会断的问题","uri":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","车载台"],"content":"1.3.AS控制台日志 下面是在AS控制台发现的异常日志。 2022-09-14 16:44:30.849 15694-15759/com.gbcom.metrosystem D/UdpDisServices: udp receive - api receive data disApi, udp service id=249 - udp.packet.address=/192.168.13.177, udp.pack.socketAddress=/192.168.13.177:64002, udp.port=64002- running=true - message={\"MsgSeqID\":8111,\"MsgName\":\"DisReceivedNotify\",\"MsgInfo\":{\"AppMsgSeqID\":307,\"Code\":10001}}\r2022-09-14 16:44:30.849 15694-15759/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] udp receive - api receive data disApi, udp service id=249 - running=true - ip=/192.168.13.177 - port=64002 - message={\"MsgSeqID\":8111,\"MsgName\":\"DisReceivedNotify\",\"MsgInfo\":{\"AppMsgSeqID\":307,\"Code\":10001}}\r2022-09-14 16:44:30.850 15694-15759/com.gbcom.metrosystem D/UdpDisServices: udp receive - api receive data disApi, udp service id=249 - udp.packet.address=/192.168.13.177, udp.pack.socketAddress=/192.168.13.177:64002, udp.port=64002- running=true - message={\"MsgSeqID\":8112,\"MsgName\":\"DisReceivedNotify\",\"MsgInfo\":{\"AppMsgSeqID\":308,\"Code\":10001}}\r2022-09-14 16:44:30.851 15694-15759/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] udp receive - api receive data disApi, udp service id=249 - running=true - ip=/192.168.13.177 - port=64002 - message={\"MsgSeqID\":8112,\"MsgName\":\"DisReceivedNotify\",\"MsgInfo\":{\"AppMsgSeqID\":308,\"Code\":10001}}\r2022-09-14 16:44:30.852 15694-15759/com.gbcom.metrosystem D/UdpDisServices: udp receive - api receive data disApi, udp service id=249 - udp.packet.address=/192.168.13.177, udp.pack.socketAddress=/192.168.13.177:64002, udp.port=64002- running=true - message={\"MsgSeqID\":8113,\"MsgName\":\"GetATSInfoRsp\",\"MsgInfo\":{\"Code\":10010}}\r2022-09-14 16:44:30.856 15694-15759/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] udp receive - api receive data disApi, udp service id=249 - running=true - ip=/192.168.13.177 - port=64002 - message={\"MsgSeqID\":8113,\"MsgName\":\"GetATSInfoRsp\",\"MsgInfo\":{\"Code\":10010}}\r2022-09-14 16:44:30.862 15694-15787/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] start: send(String) - thread ID=266, send msg={\"MsgName\":\"AppReceivedNotify\",\"MsgSeqID\":309,\"AppID\":\"10.255.0.2\",\"MsgInfo\":{\"DisMsgSeqID\":8113,\"Code\":10002}}\r2022-09-14 16:44:30.867 15694-15800/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] start: send(String) - thread ID=276, send msg={\"MsgName\":\"AppReceivedNotify\",\"MsgSeqID\":310,\"AppID\":\"10.255.0.2\",\"MsgInfo\":{\"DisMsgSeqID\":8113,\"Code\":10002}}\r2022-09-14 16:44:32.285 15694-15791/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] start: send(String) - thread ID=270, send msg={\"MsgName\":\"GetATSInfoReq\",\"MsgSeqID\":311,\"AppID\":\"10.255.0.2\",\"MsgInfo\":{}}\r2022-09-14 16:44:33.812 15694-15791/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] start: send(String) - thread ID=270, send msg={\"MsgName\":\"AppHeartbeat\",\"MsgSeqID\":312,\"AppID\":\"10.255.0.2\",\"MsgInfo\":{\"SDKLongNumber\":\"10000007133\"}}\r2022-09-14 16:44:33.823 15694-15791/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] start: send(String) - thread ID=270, send msg={\"MsgName\":\"GetATSInfoReq\",\"MsgSeqID\":313,\"AppID\":\"10.255.0.2\",\"MsgInfo\":{}}\r2022-09-14 16:44:35.284 15694-15791/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] start: send(String) - thread ID=270, send msg={\"MsgName\":\"GetATSInfoReq\",\"MsgSeqID\":314,\"AppID\":\"10.255.0.2\",\"MsgInfo\":{}}\r2022-09-14 16:44:36.815 15694-15791/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] start: send(String) - thread ID=270, send msg={\"MsgName\":\"AppHeartbeat\",\"MsgSeqID\":315,\"AppID\":\"10.255.0.2\",\"MsgInfo\":{\"SDKLongNumber\":\"10000007133\"}}\r2022-09-14 16:44:36.823 15694-15791/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] start: send(String) - thread ID=270, send msg={\"MsgName\":\"GetATSInfoReq\"","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/:1:3","tags":["原创","车载台","温州S2号线","网络","GM655+","车载台app"],"title":"温州S2号线车载台与DIS等连接一会好一会断的问题","uri":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","车载台"],"content":"二、问题分析 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/:2:0","tags":["原创","车载台","温州S2号线","网络","GM655+","车载台app"],"title":"温州S2号线车载台与DIS等连接一会好一会断的问题","uri":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","车载台"],"content":"2.1.问题复现 突然灵机一动，发现不是代码造成的问题，想起来今天因为要复现黑屏问题，把我的设备拿到鼎桥环境上了，但是IP地址没有改，还是192.168.42.130，然后APP因为是随系统自启动的，所以也是在跑的。于时想到，是不是这个有冲突呢？ 跑去把那台设备下电，然后果然我的这台设备APP运行正常，CAD再也没断，同时信号栏图标也一直正常显示了，不然一会就全没信号也就是网断了。 下面是第二次复现问题的录屏。 下面是第二次复现问题的AS控制台的日志，可以看到，一会能接收到DIS数据，一会儿接收不到DIS数据。 2022-09-14 17:42:08.650 4476-4542/com.gbcom.metrosystem D/UdpDisServices: udp receive - api receive data disApi, udp service id=153 - udp.packet.address=/192.168.13.177, udp.pack.socketAddress=/192.168.13.177:64002, udp.port=64002- running=true - message={\"MsgSeqID\":10214,\"MsgName\":\"DisReceivedNotify\",\"MsgInfo\":{\"AppMsgSeqID\":723,\"Code\":10001}}\r2022-09-14 17:42:08.651 4476-4542/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] udp receive - api receive data disApi, udp service id=153 - running=true - ip=/192.168.13.177 - port=64002 - message={\"MsgSeqID\":10214,\"MsgName\":\"DisReceivedNotify\",\"MsgInfo\":{\"AppMsgSeqID\":723,\"Code\":10001}}\r2022-09-14 17:42:08.652 4476-4542/com.gbcom.metrosystem D/UdpDisServices: udp receive - api receive data disApi, udp service id=153 - udp.packet.address=/192.168.13.177, udp.pack.socketAddress=/192.168.13.177:64002, udp.port=64002- running=true - message={\"MsgSeqID\":10215,\"MsgName\":\"GetATSInfoRsp\",\"MsgInfo\":{\"Code\":10010}}\r2022-09-14 17:42:08.652 4476-4542/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] udp receive - api receive data disApi, udp service id=153 - running=true - ip=/192.168.13.177 - port=64002 - message={\"MsgSeqID\":10215,\"MsgName\":\"GetATSInfoRsp\",\"MsgInfo\":{\"Code\":10010}}\r2022-09-14 17:42:08.660 4476-4565/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] start: send(String) - thread ID=169, send msg={\"MsgName\":\"AppReceivedNotify\",\"MsgSeqID\":726,\"AppID\":\"10.255.0.2\",\"MsgInfo\":{\"DisMsgSeqID\":10215,\"Code\":10002}}\r2022-09-14 17:42:08.663 4476-4572/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] start: send(String) - thread ID=176, send msg={\"MsgName\":\"AppReceivedNotify\",\"MsgSeqID\":725,\"AppID\":\"10.255.0.2\",\"MsgInfo\":{\"DisMsgSeqID\":10215,\"Code\":10002}}\r2022-09-14 17:42:08.679 4476-4542/com.gbcom.metrosystem D/UdpDisServices: udp receive - api receive data disApi, udp service id=153 - udp.packet.address=/192.168.13.177, udp.pack.socketAddress=/192.168.13.177:64002, udp.port=64002- running=true - message={\"MsgSeqID\":10216,\"MsgName\":\"DisReceivedNotify\",\"MsgInfo\":{\"AppMsgSeqID\":724,\"Code\":10001}}\r2022-09-14 17:42:08.679 4476-4542/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] udp receive - api receive data disApi, udp service id=153 - running=true - ip=/192.168.13.177 - port=64002 - message={\"MsgSeqID\":10216,\"MsgName\":\"DisReceivedNotify\",\"MsgInfo\":{\"AppMsgSeqID\":724,\"Code\":10001}}\r2022-09-14 17:42:08.838 4476-4542/com.gbcom.metrosystem D/UdpDisServices: udp receive - api receive data disApi, udp service id=153 - udp.packet.address=/192.168.13.177, udp.pack.socketAddress=/192.168.13.177:64002, udp.port=64002- running=true - message={\"MsgSeqID\":10217,\"MsgName\":\"DisReceivedNotify\",\"MsgInfo\":{\"AppMsgSeqID\":42,\"Code\":10001}}\r2022-09-14 17:42:08.839 4476-4542/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] udp receive - api receive data disApi, udp service id=153 - running=true - ip=/192.168.13.177 - port=64002 - message={\"MsgSeqID\":10217,\"MsgName\":\"DisReceivedNotify\",\"MsgInfo\":{\"AppMsgSeqID\":42,\"Code\":10001}}\r2022-09-14 17:42:08.840 4476-4542/com.gbcom.metrosystem D/UdpDisServices: udp receive - api receive data disApi, udp service id=153 - udp.packet.address=/192.168.13.177, udp.pack.socketAddress=/192.168.13.177:64002, udp.port=64002- running=true - message={\"MsgSeqID\":10218,\"MsgName\":\"GetATSInfoRsp\",\"MsgInfo\":{\"Code\":10010}}\r2022-09-14 17:42:08.840 4476-4542/com.gbcom.metrosystem I/APP_LogUtils.kt: [(LogUtils.kt:50).i()] [UdpDisServices] udp receive - api receive data disApi, udp service id=153 - running=true - ip=/192.168.13.177 - port=64002 - messag","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/:2:1","tags":["原创","车载台","温州S2号线","网络","GM655+","车载台app"],"title":"温州S2号线车载台与DIS等连接一会好一会断的问题","uri":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","车载台"],"content":"2.2.问题原因 我自己的这台温州车载台终端IP是192.168.42.130，然后下挂在GM655+下面。 另一台设备跟在EV751深圳14的环境上，但是也跑的是温州S2号线APP，同时终端的IP也是192.168.42.130. 下挂在EV751下的终端 可以看到，虽然不是直接下挂在GM655+下面，但是因为实验室网络都是通的，所以，这台EV751下的设备连接的也是我正在测试的那台GM655+设备。 我当前使用的车载台终端主界面： 我当前使用的车载台终端设置页面： ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/:2:2","tags":["原创","车载台","温州S2号线","网络","GM655+","车载台app"],"title":"温州S2号线车载台与DIS等连接一会好一会断的问题","uri":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","车载台"],"content":"2.3.解决办法 问题解决的办法也很简单： 1.把那台EV751下的终端APP杀掉。 2.把那台终端的IP换成EV751下的IP地址。 3.最简单的是把它主机直边的网线拔掉，让它以EV751的网络通信就可以了。 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/:2:3","tags":["原创","车载台","温州S2号线","网络","GM655+","车载台app"],"title":"温州S2号线车载台与DIS等连接一会好一会断的问题","uri":"https://daizelai.github.io/posts/wzs2/20220914_1646%E6%B8%A9%E5%B7%9Es2%E5%8F%B7%E7%BA%BF%E8%BD%A6%E8%BD%BD%E5%8F%B0%E4%B8%8Edis%E7%AD%89%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%BC%9A%E5%A5%BD%E4%B8%80%E4%BC%9A%E6%96%AD%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"在linux中使用grep的几种技巧","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"20231105_1738在linux中使用grep的几种技巧 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:0:0","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"一、描述 在linux系统中，有一个非常强大的命令行文本搜索工具，它就是grep，本文主要介绍grep的几种使用方法。 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:1:0","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"二、grep ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:2:0","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"2.1.精确匹配 我们需要搜索准确的单词或短语时，就可以使用它，它是完整匹配，使用-w选项。 使用示例： $ grep -s 'train' test.txt 输出结果示例： train app start. ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:2:1","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"2.2.忽略大小写 如果我们在搜索时想要不区分大小写的话，就可以使用-i选项了。 使用示例： $ grep -i \"train\" test.txt 输出结果示例： train app start.\rlogwrite Train and Fixed. ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:2:2","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"2.3.反向匹配 在某些时候，我们想要查找不包含指定的单词或短语的行，此时-v就排上用场了。 使用示例： $ grep -v \"login\" test.txt 输出结果示例： train app start.\rlogwrite Train and Fixed. ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:2:3","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"2.4.行号显示 使用grep查找出一些匹配的行内容的时候，如果想要知道当前行是哪一行，那么-n参数就非常有用了。 使用示例： $ grep -n \"train\" 输出结果示例： 159:train app start. ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:2:4","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"2.5.匹配上下文 如果在查找的时候，还想看到匹配行的上下文的话，-C选项就可以帮助我们来实现这个目标。 使用示例： $ grep -C 2 \"train\" test.txt 输出结果示例： log ---- start\rtrain app start.\rlog ---- end ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:2:5","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"2.6.递归搜索 通过搜索的都是当前指定目录，如果想要搜索目录和目录中的子目录的话，就需要递归实现了，grep命令可以使用-r选项来实现。 使用示例： $ grep -r \"test\" app/ ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:2:6","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"2.7.统计匹配行数 在有些时候，我们并不需要显示匹配了哪些内容，只想知道匹配的行数，那么就可以使用-c选项了，它就像是一个高效的计数器，可以快速准确的告诫我们匹配行的总数。 使用示例： $ grep -c \"train\" test.txt 输出结果示例： 5 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:2:7","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"2.8.使用正则表达式 正则表达式是一种强大的模式匹配工具，可以很灵活的定义搜索模式。在linux中的grep命令中也支持使用正则表达式。 使用示例： $ grep \"^[A-Za-z]+$\" test.txt 输出结果示例： log ---- start\rtrain app start.\rlog ---- end ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:2:8","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"2.9.使用文件作为模式输入 我们还可以在文件中提供多个模式，以便同时搜索它们。在linux命令中grep命令可以使用-f选项来实现。 使用示例： $ grep -f patterns.txt test.txt 输出结果示例： log ---- start\rtrain app start.\rlog ---- end ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:2:9","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"},{"categories":["原创","android","grep技巧","grep使用"],"content":"2.10.输出匹配结果到文件 如果我们想要把匹配的结果保存到一个文件中的话，可以使用shell命令中的重定向操作符来实现。 代码示例： $ grep \"train\" test.txt \u003e result.txt 该命令无输出结果，匹配的行会被保存到result.txt文件中。 ","date":"0001-01-01","objectID":"https://daizelai.github.io/posts/linux/linuxgrep/:2:10","tags":["原创","android","grep技巧","grep使用"],"title":"在linux中使用grep的几种技巧","uri":"https://daizelai.github.io/posts/linux/linuxgrep/"}]